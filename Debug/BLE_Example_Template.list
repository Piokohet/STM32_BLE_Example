
BLE_Example_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013870  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc00  0801dc00  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801dc00  0801dc00  0002dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc08  0801dc08  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dc08  0801dc08  0002dc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc0c  0801dc0c  0002dc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801dc10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005104  2000009c  0801dcac  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200051a0  0801dcac  000351a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214e4  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004137  00000000  00000000  000515b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  000556e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00056ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4c4  00000000  00000000  00058460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d37d  00000000  00000000  00074924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a21a7  00000000  00000000  00091ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00133e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  00133f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  0013aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a378 	.word	0x0800a378

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800a378 	.word	0x0800a378

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000658:	2006      	movs	r0, #6
 800065a:	f002 f8bc 	bl	80027d6 <HAL_NVIC_EnableIRQ>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}

08000662 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000666:	2006      	movs	r0, #6
 8000668:	f002 f8c3 	bl	80027f2 <HAL_NVIC_DisableIRQ>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <HCI_TL_SPI_Init+0x90>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <HCI_TL_SPI_Init+0x90>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <HCI_TL_SPI_Init+0x90>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000694:	2301      	movs	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000698:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	4816      	ldr	r0, [pc, #88]	; (8000704 <HCI_TL_SPI_Init+0x94>)
 80006aa:	f002 fd11 	bl	80030d0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80006ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	480f      	ldr	r0, [pc, #60]	; (8000704 <HCI_TL_SPI_Init+0x94>)
 80006c8:	f002 fd02 	bl	80030d0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <HCI_TL_SPI_Init+0x94>)
 80006e4:	f002 fcf4 	bl	80030d0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <HCI_TL_SPI_Init+0x94>)
 80006ee:	f002 ff6f 	bl	80035d0 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80006f2:	f000 ffdf 	bl	80016b4 <BSP_SPI1_Init>
 80006f6:	4603      	mov	r3, r0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000

08000708 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800070c:	2101      	movs	r1, #1
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <HCI_TL_SPI_DeInit+0x24>)
 8000710:	f002 fe62 	bl	80033d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000714:	2102      	movs	r1, #2
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HCI_TL_SPI_DeInit+0x24>)
 8000718:	f002 fe5e 	bl	80033d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <HCI_TL_SPI_DeInit+0x24>)
 8000722:	f002 fe59 	bl	80033d8 <HAL_GPIO_DeInit>
  return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020000 	.word	0x40020000

08000730 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2102      	movs	r1, #2
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <HCI_TL_SPI_Reset+0x38>)
 800073a:	f002 ff49 	bl	80035d0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <HCI_TL_SPI_Reset+0x38>)
 8000746:	f002 ff43 	bl	80035d0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800074a:	2005      	movs	r0, #5
 800074c:	f001 fb0c 	bl	8001d68 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <HCI_TL_SPI_Reset+0x38>)
 8000758:	f002 ff3a 	bl	80035d0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800075c:	2005      	movs	r0, #5
 800075e:	f001 fb03 	bl	8001d68 <HAL_Delay>
  return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020000 	.word	0x40020000

0800076c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000780:	4a30      	ldr	r2, [pc, #192]	; (8000844 <HCI_TL_SPI_Receive+0xd8>)
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078a:	6018      	str	r0, [r3, #0]
 800078c:	3304      	adds	r3, #4
 800078e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8000790:	f7ff ff67 	bl	8000662 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2102      	movs	r1, #2
 8000798:	482b      	ldr	r0, [pc, #172]	; (8000848 <HCI_TL_SPI_Receive+0xdc>)
 800079a:	f002 ff19 	bl	80035d0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800079e:	f107 0108 	add.w	r1, r7, #8
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2205      	movs	r2, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 ffb3 	bl	8001714 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80007ae:	7b3b      	ldrb	r3, [r7, #12]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80007be:	8bfb      	ldrh	r3, [r7, #30]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d01e      	beq.n	8000802 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80007c4:	8bfa      	ldrh	r2, [r7, #30]
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d901      	bls.n	80007d0 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	777b      	strb	r3, [r7, #29]
 80007d4:	e010      	b.n	80007f8 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80007d6:	f107 0116 	add.w	r1, r7, #22
 80007da:	f107 0317 	add.w	r3, r7, #23
 80007de:	2201      	movs	r2, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 ff97 	bl	8001714 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80007e6:	7f7b      	ldrb	r3, [r7, #29]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	7dba      	ldrb	r2, [r7, #22]
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80007f2:	7f7b      	ldrb	r3, [r7, #29]
 80007f4:	3301      	adds	r3, #1
 80007f6:	777b      	strb	r3, [r7, #29]
 80007f8:	7f7b      	ldrb	r3, [r7, #29]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	8bfa      	ldrh	r2, [r7, #30]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d8e9      	bhi.n	80007d6 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000802:	f001 faa5 	bl	8001d50 <HAL_GetTick>
 8000806:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000808:	e006      	b.n	8000818 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800080a:	2101      	movs	r1, #1
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <HCI_TL_SPI_Receive+0xdc>)
 800080e:	f002 fec7 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d008      	beq.n	800082a <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000818:	f001 fa9a 	bl	8001d50 <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000826:	d3f0      	bcc.n	800080a <HCI_TL_SPI_Receive+0x9e>
 8000828:	e000      	b.n	800082c <HCI_TL_SPI_Receive+0xc0>
      break;
 800082a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800082c:	f7ff ff12 	bl	8000654 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <HCI_TL_SPI_Receive+0xdc>)
 8000836:	f002 fecb 	bl	80035d0 <HAL_GPIO_WritePin>

  return len;
 800083a:	7f7b      	ldrb	r3, [r7, #29]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	0800a390 	.word	0x0800a390
 8000848:	40020000 	.word	0x40020000

0800084c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000858:	4a3f      	ldr	r2, [pc, #252]	; (8000958 <HCI_TL_SPI_Send+0x10c>)
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	6018      	str	r0, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000868:	f001 fa72 	bl	8001d50 <HAL_GetTick>
 800086c:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800086e:	f7ff fef8 	bl	8000662 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000872:	f001 fa6d 	bl	8001d50 <HAL_GetTick>
 8000876:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2102      	movs	r1, #2
 8000880:	4836      	ldr	r0, [pc, #216]	; (800095c <HCI_TL_SPI_Send+0x110>)
 8000882:	f002 fea5 	bl	80035d0 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000886:	e00a      	b.n	800089e <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000888:	f001 fa62 	bl	8001d50 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2b64      	cmp	r3, #100	; 0x64
 8000894:	d903      	bls.n	800089e <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000896:	f06f 0302 	mvn.w	r3, #2
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800089c:	e004      	b.n	80008a8 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800089e:	f000 f861 	bl	8000964 <IsDataAvailable>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0ef      	beq.n	8000888 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	f113 0f03 	cmn.w	r3, #3
 80008ae:	d105      	bne.n	80008bc <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2102      	movs	r1, #2
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <HCI_TL_SPI_Send+0x110>)
 80008b6:	f002 fe8b 	bl	80035d0 <HAL_GPIO_WritePin>
      break;
 80008ba:	e030      	b.n	800091e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80008bc:	f107 010c 	add.w	r1, r7, #12
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2205      	movs	r2, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 ff24 	bl	8001714 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	7b7b      	ldrb	r3, [r7, #13]
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b21b      	sxth	r3, r3
 80008da:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80008dc:	8b7a      	ldrh	r2, [r7, #26]
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d306      	bcc.n	80008f2 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80008e4:	887b      	ldrh	r3, [r7, #2]
 80008e6:	461a      	mov	r2, r3
 80008e8:	491d      	ldr	r1, [pc, #116]	; (8000960 <HCI_TL_SPI_Send+0x114>)
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 ff12 	bl	8001714 <BSP_SPI1_SendRecv>
 80008f0:	e002      	b.n	80008f8 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80008f2:	f06f 0301 	mvn.w	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2102      	movs	r1, #2
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <HCI_TL_SPI_Send+0x110>)
 80008fe:	f002 fe67 	bl	80035d0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000902:	f001 fa25 	bl	8001d50 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b64      	cmp	r3, #100	; 0x64
 800090e:	d903      	bls.n	8000918 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000910:	f06f 0302 	mvn.w	r3, #2
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000916:	e002      	b.n	800091e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	2b00      	cmp	r3, #0
 800091c:	dba9      	blt.n	8000872 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 800091e:	f001 fa17 	bl	8001d50 <HAL_GetTick>
 8000922:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000924:	e006      	b.n	8000934 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000926:	2101      	movs	r1, #1
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <HCI_TL_SPI_Send+0x110>)
 800092a:	f002 fe39 	bl	80035a0 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d008      	beq.n	8000946 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000934:	f001 fa0c 	bl	8001d50 <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000942:	d3f0      	bcc.n	8000926 <HCI_TL_SPI_Send+0xda>
 8000944:	e000      	b.n	8000948 <HCI_TL_SPI_Send+0xfc>
      break;
 8000946:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000948:	f7ff fe84 	bl	8000654 <HCI_TL_SPI_Enable_IRQ>

  return result;
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800094e:	4618      	mov	r0, r3
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	0800a398 	.word	0x0800a398
 800095c:	40020000 	.word	0x40020000
 8000960:	200000c0 	.word	0x200000c0

08000964 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000968:	2101      	movs	r1, #1
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <IsDataAvailable+0x1c>)
 800096c:	f002 fe18 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	bf0c      	ite	eq
 8000976:	2301      	moveq	r3, #1
 8000978:	2300      	movne	r3, #0
 800097a:	b2db      	uxtb	r3, r3
}
 800097c:	4618      	mov	r0, r3
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020000 	.word	0x40020000

08000984 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <hci_tl_lowlevel_init+0x54>)
 800098c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <hci_tl_lowlevel_init+0x58>)
 8000990:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <hci_tl_lowlevel_init+0x5c>)
 8000994:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <hci_tl_lowlevel_init+0x60>)
 8000998:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <hci_tl_lowlevel_init+0x64>)
 800099c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <hci_tl_lowlevel_init+0x68>)
 80009a0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 f8dd 	bl	8007b64 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80009aa:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80009ae:	4810      	ldr	r0, [pc, #64]	; (80009f0 <hci_tl_lowlevel_init+0x6c>)
 80009b0:	f002 fb56 	bl	8003060 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <hci_tl_lowlevel_init+0x70>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <hci_tl_lowlevel_init+0x6c>)
 80009ba:	f002 fb37 	bl	800302c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2006      	movs	r0, #6
 80009c4:	f001 feeb 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c8:	2006      	movs	r0, #6
 80009ca:	f001 ff04 	bl	80027d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08000671 	.word	0x08000671
 80009dc:	08000709 	.word	0x08000709
 80009e0:	0800084d 	.word	0x0800084d
 80009e4:	0800076d 	.word	0x0800076d
 80009e8:	08000731 	.word	0x08000731
 80009ec:	08001755 	.word	0x08001755
 80009f0:	200000b8 	.word	0x200000b8
 80009f4:	080009f9 	.word	0x080009f9

080009f8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80009fc:	e005      	b.n	8000a0a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80009fe:	2000      	movs	r0, #0
 8000a00:	f007 fa16 	bl	8007e30 <hci_notify_asynch_evt>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d105      	bne.n	8000a16 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000a0a:	f7ff ffab 	bl	8000964 <IsDataAvailable>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f4      	bne.n	80009fe <hci_tl_lowlevel_isr+0x6>
 8000a14:	e000      	b.n	8000a18 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8000a16:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <MX_ADC1_Init+0xa0>)
 8000a32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <MX_ADC1_Init+0xa4>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a80:	f001 f996 	bl	8001db0 <HAL_ADC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a8a:	f000 fc0d 	bl	80012a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a96:	2307      	movs	r3, #7
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_ADC1_Init+0x9c>)
 8000aa0:	f001 face 	bl	8002040 <HAL_ADC_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aaa:	f000 fbfd 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001c0 	.word	0x200001c0
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	0f000001 	.word	0x0f000001

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d155      	bne.n	8000b92 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b32:	f002 facd 	bl	80030d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_ADC_MspInit+0xe8>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b78:	f001 fe56 	bl	8002828 <HAL_DMA_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000b82:	f000 fb91 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	20000208 	.word	0x20000208
 8000bac:	40026410 	.word	0x40026410

08000bb0 <bluenrg_init>:
extern volatile uint8_t connected;
extern __IO uint8_t send_data;
extern uint8_t OutFreqArray[10];

void bluenrg_init(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af02      	add	r7, sp, #8
	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "Vibrationmeter";
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <bluenrg_init+0xc4>)
 8000bb8:	617b      	str	r3, [r7, #20]
	uint16_t service_handle, dev_name_char_handle,appearance_char_handle;

	BLUENRG_memcpy(bdaddr, SERVER_BDARR, sizeof(SERVER_BDARR));
 8000bba:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <bluenrg_init+0xc8>)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc4:	6018      	str	r0, [r3, #0]
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	8019      	strh	r1, [r3, #0]

	/* Initialize HCI */
	hci_init(APP_UserEvtRx,NULL);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	482b      	ldr	r0, [pc, #172]	; (8000c7c <bluenrg_init+0xcc>)
 8000bce:	f006 ff87 	bl	8007ae0 <hci_init>

	/* Reset HCI */
	hci_reset();
 8000bd2:	f006 f96c 	bl	8006eae <hci_reset>

	/* Wait a bit */
	HAL_Delay(100);
 8000bd6:	2064      	movs	r0, #100	; 0x64
 8000bd8:	f001 f8c6 	bl	8001d68 <HAL_Delay>

	/* Configure device address */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN,bdaddr);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	461a      	mov	r2, r3
 8000be2:	2106      	movs	r1, #6
 8000be4:	2000      	movs	r0, #0
 8000be6:	f006 fe53 	bl	8007890 <aci_hal_write_config_data>
 8000bea:	4603      	mov	r3, r0
 8000bec:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS)
 8000bee:	7cfb      	ldrb	r3, [r7, #19]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <bluenrg_init+0x4a>
	{
		printf("aci_hal_write_config_data : FAILED !! \n\r");
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <bluenrg_init+0xd0>)
 8000bf6:	f008 fa93 	bl	8009120 <iprintf>
	}
	/* Initialize GATT server */
	ret = aci_gatt_init();
 8000bfa:	f006 fb31 	bl	8007260 <aci_gatt_init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS)
 8000c02:	7cfb      	ldrb	r3, [r7, #19]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <bluenrg_init+0x5e>
	{
		printf("aci_gatt_init : FAILED !! \n\r");
 8000c08:	481e      	ldr	r0, [pc, #120]	; (8000c84 <bluenrg_init+0xd4>)
 8000c0a:	f008 fa89 	bl	8009120 <iprintf>
	}
	/* Initialize GAP service */
	aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x0E,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 8000c0e:	f107 020a 	add.w	r2, r7, #10
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	220e      	movs	r2, #14
 8000c20:	2100      	movs	r1, #0
 8000c22:	2001      	movs	r0, #1
 8000c24:	f006 fa6f 	bl	8007106 <aci_gap_init>

	/* Update device name characteristic value */
	ret = aci_gatt_update_char_value(service_handle,dev_name_char_handle,0,strlen(name),(uint8_t*)name);
 8000c28:	897c      	ldrh	r4, [r7, #10]
 8000c2a:	893d      	ldrh	r5, [r7, #8]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff fb37 	bl	80002a0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4629      	mov	r1, r5
 8000c40:	4620      	mov	r0, r4
 8000c42:	f006 fd15 	bl	8007670 <aci_gatt_update_char_value>
 8000c46:	4603      	mov	r3, r0
 8000c48:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS)
 8000c4a:	7cfb      	ldrb	r3, [r7, #19]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <bluenrg_init+0xa6>
	{
		printf("aci_gatt_update_char_value : FAILED !! \n\r");
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <bluenrg_init+0xd8>)
 8000c52:	f008 fa65 	bl	8009120 <iprintf>
	}

	/* Add custom service */
	ret = add_simple_service();
 8000c56:	f000 fb2d 	bl	80012b4 <add_simple_service>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	74fb      	strb	r3, [r7, #19]

	if(ret != BLE_STATUS_SUCCESS)
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <bluenrg_init+0xba>
	{
		printf("add_simple_service : FAILED !! \n\r");
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <bluenrg_init+0xdc>)
 8000c66:	f008 fa5b 	bl	8009120 <iprintf>
	}

}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bdb0      	pop	{r4, r5, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	0800a3a0 	.word	0x0800a3a0
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	080014c1 	.word	0x080014c1
 8000c80:	0800a3b0 	.word	0x0800a3b0
 8000c84:	0800a3dc 	.word	0x0800a3dc
 8000c88:	0800a3fc 	.word	0x0800a3fc
 8000c8c:	0800a428 	.word	0x0800a428

08000c90 <bluenrg_process>:

void bluenrg_process(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	if(set_connectable)
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <bluenrg_process+0x4c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <bluenrg_process+0x18>
	{
		Set_DeviceConnectable();
 8000c9e:	f000 f825 	bl	8000cec <Set_DeviceConnectable>
		set_connectable = FALSE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <bluenrg_process+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
	}

	if(connected)
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <bluenrg_process+0x50>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00f      	beq.n	8000cd2 <bluenrg_process+0x42>
	{
//		uint8_t RandData[8] = {0,1,2,3,4,5,6,7}; //random data for buffer to send via BLE
		BLEcounter++;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <bluenrg_process+0x54>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <bluenrg_process+0x54>)
 8000cbc:	801a      	strh	r2, [r3, #0]

		if(BLEcounter == 20)
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <bluenrg_process+0x54>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	2b14      	cmp	r3, #20
 8000cc4:	d105      	bne.n	8000cd2 <bluenrg_process+0x42>
		{
			FFT_Update(OutFreqArray); // sending buffer to BLE characteristic
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <bluenrg_process+0x58>)
 8000cc8:	f000 fb70 	bl	80013ac <FFT_Update>
			BLEcounter = 0;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <bluenrg_process+0x54>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	801a      	strh	r2, [r3, #0]

//		HAL_Delay(50); // slowing down a little to stop errors
	}

    /* Process user event */
	hci_user_evt_proc();
 8000cd2:	f007 f881 	bl	8007dd8 <hci_user_evt_proc>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000028 	.word	0x20000028
 8000ce0:	20004a96 	.word	0x20004a96
 8000ce4:	20000268 	.word	0x20000268
 8000ce8:	20004a88 	.word	0x20004a88

08000cec <Set_DeviceConnectable>:

void Set_DeviceConnectable(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af08      	add	r7, sp, #32
	tBleStatus ret;
	uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'V','I','B','R','O','M','E','T','E','R'};
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <Set_DeviceConnectable+0x58>)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	c303      	stmia	r3!, {r0, r1}
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	0c12      	lsrs	r2, r2, #16
 8000d00:	701a      	strb	r2, [r3, #0]
	                                    uint8_t Service_Uuid_length,
	                                    uint8_t Service_Uuid_List[],
	                                    uint16_t Slave_Conn_Interval_Min,
	                                    uint16_t Slave_Conn_Interval_Max); */

		ret = aci_gap_set_discoverable(ADV_IND,0,0,PUBLIC_ADDR,NO_WHITE_LIST_USE,sizeof(local_name), local_name,0,NULL,0,0);
 8000d02:	2300      	movs	r3, #0
 8000d04:	9306      	str	r3, [sp, #24]
 8000d06:	2300      	movs	r3, #0
 8000d08:	9305      	str	r3, [sp, #20]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9304      	str	r3, [sp, #16]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9303      	str	r3, [sp, #12]
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	230b      	movs	r3, #11
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2000      	movs	r0, #0
 8000d26:	f006 f8eb 	bl	8006f00 <aci_gap_set_discoverable>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
		if(ret != BLE_STATUS_SUCCESS)
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <Set_DeviceConnectable+0x4e>
		{
			printf("aci_gap_set_discoverable : FAILED !! \n\r");
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <Set_DeviceConnectable+0x5c>)
 8000d36:	f008 f9f3 	bl	8009120 <iprintf>
		}
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	0800a474 	.word	0x0800a474
 8000d48:	0800a44c 	.word	0x0800a44c

08000d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_DMA_Init+0x68>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <MX_DMA_Init+0x68>)
 8000d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_DMA_Init+0x68>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_DMA_Init+0x68>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <MX_DMA_Init+0x68>)
 8000d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_DMA_Init+0x68>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2011      	movs	r0, #17
 8000d90:	f001 fd05 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d94:	2011      	movs	r0, #17
 8000d96:	f001 fd1e 	bl	80027d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2038      	movs	r0, #56	; 0x38
 8000da0:	f001 fcfd 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000da4:	2038      	movs	r0, #56	; 0x38
 8000da6:	f001 fd16 	bl	80027d6 <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a3c      	ldr	r2, [pc, #240]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a35      	ldr	r2, [pc, #212]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0x110>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000e44:	4821      	ldr	r0, [pc, #132]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e46:	f002 fbc3 	bl	80035d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0x118>)
 8000e62:	f002 f935 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e7c:	f002 f928 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000e80:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_GPIO_Init+0x114>)
 8000e9a:	f002 f919 	bl	80030d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f001 fc7b 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f001 fc94 	bl	80027d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2028      	movs	r0, #40	; 0x28
 8000eb4:	f001 fc73 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eb8:	2028      	movs	r0, #40	; 0x28
 8000eba:	f001 fc8c 	bl	80027d6 <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <__io_putchar>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* function for debugging messages via USART2 */
int __io_putchar(int ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6,((uint8_t *)&ch),1,10);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	230a      	movs	r3, #10
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <__io_putchar+0x20>)
 8000ee4:	f003 fba5 	bl	8004632 <HAL_UART_Transmit>

	return ch;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20004b40 	.word	0x20004b40

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 fec1 	bl	8001c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f84b 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f7ff ff57 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f7ff ff1f 	bl	8000d4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f0e:	f000 fd83 	bl	8001a18 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000f12:	f000 fdab 	bl	8001a6c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000f16:	f7ff fd81 	bl	8000a1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  printf("Initialization successful...\n\r");
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <main+0x8c>)
 8000f1c:	f008 f900 	bl	8009120 <iprintf>


  /* 1.Enable BLE module */
  bluenrg_init();
 8000f20:	f7ff fe46 	bl	8000bb0 <bluenrg_init>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) val, ARRAYLEN);
 8000f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f28:	4917      	ldr	r1, [pc, #92]	; (8000f88 <main+0x90>)
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <main+0x94>)
 8000f2c:	f000 ff84 	bl	8001e38 <HAL_ADC_Start_DMA>

  arm_rfft_fast_init_f32(&FFTHandler, ARRAYLEN);
 8000f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f34:	4816      	ldr	r0, [pc, #88]	; (8000f90 <main+0x98>)
 8000f36:	f007 f8df 	bl	80080f8 <arm_rfft_fast_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(SamplesReady == 1)
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <main+0x9c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1fa      	bne.n	8000f3a <main+0x42>
	  	  {
	  		  SamplesReady = 0;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <main+0x9c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]

	  		  for(uint32_t i = 0; i < ARRAYLEN; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	e010      	b.n	8000f72 <main+0x7a>
	  		  {
	  			  FFTInBuffer[i] = (float) val[i];
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <main+0x90>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <main+0xa0>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	edc3 7a00 	vstr	s15, [r3]
	  		  for(uint32_t i = 0; i < ARRAYLEN; i++)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f78:	d3ea      	bcc.n	8000f50 <main+0x58>
	  		  }

	  		  CalculateFFT();
 8000f7a:	f000 f8b1 	bl	80010e0 <CalculateFFT>
//	  		  BLEcounter++;
//	  		  if(BLEcounter == 20)
//	  		  {
	  			  bluenrg_process();
 8000f7e:	f7ff fe87 	bl	8000c90 <bluenrg_process>
	  if(SamplesReady == 1)
 8000f82:	e7da      	b.n	8000f3a <main+0x42>
 8000f84:	0800a480 	.word	0x0800a480
 8000f88:	2000026c 	.word	0x2000026c
 8000f8c:	200001c0 	.word	0x200001c0
 8000f90:	20004a6c 	.word	0x20004a6c
 8000f94:	20004a84 	.word	0x20004a84
 8000f98:	20000a6c 	.word	0x20000a6c

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f008 f8b0 	bl	8009110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <SystemClock_Config+0xc8>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <SystemClock_Config+0xc8>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <SystemClock_Config+0xc8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <SystemClock_Config+0xcc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <SystemClock_Config+0xcc>)
 8000fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <SystemClock_Config+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ffc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001010:	2360      	movs	r3, #96	; 0x60
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fb13 	bl	800364c <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800102c:	f000 f93c 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2103      	movs	r1, #3
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fd75 	bl	8003b3c <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001058:	f000 f926 	bl	80012a8 <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	; 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_ADC_ConvCpltCallback+0x2c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d108      	bne.n	8001090 <HAL_ADC_ConvCpltCallback+0x24>
	{
		HAL_UART_Transmit_DMA(&huart2,(uint8_t*)val,ARRAYLEN);
 800107e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001082:	4906      	ldr	r1, [pc, #24]	; (800109c <HAL_ADC_ConvCpltCallback+0x30>)
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x34>)
 8001086:	f003 fb67 	bl	8004758 <HAL_UART_Transmit_DMA>
		SamplesReady = 1;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40012000 	.word	0x40012000
 800109c:	2000026c 	.word	0x2000026c
 80010a0:	20004afc 	.word	0x20004afc
 80010a4:	20004a84 	.word	0x20004a84

080010a8 <complexABS>:

float complexABS(float real, float compl) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80010b2:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010be:	edd7 7a00 	vldr	s15, [r7]
 80010c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f008 ffe3 	bl	800a098 <sqrtf>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <CalculateFFT>:

void CalculateFFT(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 80010ea:	2300      	movs	r3, #0
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <CalculateFFT+0x1b8>)
 80010ee:	496b      	ldr	r1, [pc, #428]	; (800129c <CalculateFFT+0x1bc>)
 80010f0:	486b      	ldr	r0, [pc, #428]	; (80012a0 <CalculateFFT+0x1c0>)
 80010f2:	f007 f885 	bl	8008200 <arm_rfft_fast_f32>

	int Freqs[ARRAYLEN];
	int FreqPoint = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80010fc:	f102 020c 	add.w	r2, r2, #12
 8001100:	6013      	str	r3, [r2, #0]
	int Offset = 45; //variable noise floor offset
 8001102:	232d      	movs	r3, #45	; 0x2d
 8001104:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001108:	f102 0204 	add.w	r2, r2, #4
 800110c:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-dB
	for (int i = 0; i < ARRAYLEN; i = i+2)
 800110e:	2300      	movs	r3, #0
 8001110:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001114:	f102 0208 	add.w	r2, r2, #8
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e06d      	b.n	80011f8 <CalculateFFT+0x118>
	{
		Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 800111c:	4a5e      	ldr	r2, [pc, #376]	; (8001298 <CalculateFFT+0x1b8>)
 800111e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001122:	f103 0308 	add.w	r3, r3, #8
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001134:	f103 0308 	add.w	r3, r3, #8
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a56      	ldr	r2, [pc, #344]	; (8001298 <CalculateFFT+0x1b8>)
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	eef0 0a47 	vmov.f32	s1, s14
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f7ff ffab 	bl	80010a8 <complexABS>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	f008 ff6f 	bl	800a03c <log10f>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116e:	ee17 2a90 	vmov	r2, s15
 8001172:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001176:	f103 0304 	add.w	r3, r3, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4619      	mov	r1, r3
 8001184:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001188:	f103 030c 	add.w	r3, r3, #12
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f843 2c0c 	str.w	r2, [r3, #-12]

		if(Freqs[FreqPoint] < 0)
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	461a      	mov	r2, r3
 800119c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80011a0:	f103 030c 	add.w	r3, r3, #12
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da0c      	bge.n	80011cc <CalculateFFT+0xec>
		{
			Freqs[FreqPoint] = 0;
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	461a      	mov	r2, r3
 80011b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80011bc:	f103 030c 	add.w	r3, r3, #12
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	f843 2c0c 	str.w	r2, [r3, #-12]
		}
		FreqPoint++;
 80011cc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80011d0:	f103 030c 	add.w	r3, r3, #12
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80011dc:	f102 020c 	add.w	r2, r2, #12
 80011e0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ARRAYLEN; i = i+2)
 80011e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80011e6:	f103 0308 	add.w	r3, r3, #8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3302      	adds	r3, #2
 80011ee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80011f2:	f102 0208 	add.w	r2, r2, #8
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80011fc:	f103 0308 	add.w	r3, r3, #8
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001206:	db89      	blt.n	800111c <CalculateFFT+0x3c>
	}

	OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <CalculateFFT+0x1c4>)
 8001214:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t)Freqs[3]; // 63 Hz
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <CalculateFFT+0x1c4>)
 8001220:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t)Freqs[6]; // 125 Hz
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <CalculateFFT+0x1c4>)
 800122c:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t)Freqs[11]; // 250 Hz
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <CalculateFFT+0x1c4>)
 8001238:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t)Freqs[21]; // 500 Hz
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <CalculateFFT+0x1c4>)
 8001244:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t)Freqs[42]; // 1000 Hz
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <CalculateFFT+0x1c4>)
 8001252:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t)Freqs[93]; // 2200 Hz
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <CalculateFFT+0x1c4>)
 8001260:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t)Freqs[189]; // 4500 Hz
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <CalculateFFT+0x1c4>)
 800126e:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t)Freqs[378]; // 9000 Hz
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <CalculateFFT+0x1c4>)
 800127c:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t)Freqs[630]; // 15000 Hz
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	; 0x9cc
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <CalculateFFT+0x1c4>)
 800128a:	725a      	strb	r2, [r3, #9]

}
 800128c:	bf00      	nop
 800128e:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20002a6c 	.word	0x20002a6c
 800129c:	20000a6c 	.word	0x20000a6c
 80012a0:	20004a6c 	.word	0x20004a6c
 80012a4:	20004a88 	.word	0x20004a88

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <add_simple_service>:
uint8_t set_connectable = TRUE;
uint16_t connection_handle = FALSE;
uint8_t notification_enabled = TRUE;

tBleStatus add_simple_service(void)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b091      	sub	sp, #68	; 0x44
 80012b8:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t service_uuid;
	Char_UUID_t char_uuid;

	BLUENRG_memcpy(service_uuid.Service_UUID_128,SERVICE_UUID,16);
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <add_simple_service+0x6c>)
 80012bc:	f107 0414 	add.w	r4, r7, #20
 80012c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle);*/

	ret = aci_gatt_add_service(UUID_TYPE_128,&service_uuid,PRIMARY_SERVICE,7,&my_service_handle);
 80012c6:	f107 0114 	add.w	r1, r7, #20
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <add_simple_service+0x70>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2307      	movs	r3, #7
 80012d0:	2201      	movs	r2, #1
 80012d2:	2002      	movs	r0, #2
 80012d4:	f005 ffee 	bl	80072b4 <aci_gatt_add_service>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	BLUENRG_memcpy(char_uuid.Char_UUID_128,CHAR_UUID,16);
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <add_simple_service+0x74>)
 80012e0:	1d3c      	adds	r4, r7, #4
 80012e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle); */
	ret = aci_gatt_add_char(my_service_handle, UUID_TYPE_128, &char_uuid, 10, CHAR_PROP_READ|CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 0, 0, &my_char_handle);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <add_simple_service+0x70>)
 80012ea:	8818      	ldrh	r0, [r3, #0]
 80012ec:	1d3a      	adds	r2, r7, #4
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <add_simple_service+0x78>)
 80012f0:	9305      	str	r3, [sp, #20]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9304      	str	r3, [sp, #16]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9303      	str	r3, [sp, #12]
 80012fa:	2304      	movs	r3, #4
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2312      	movs	r3, #18
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	230a      	movs	r3, #10
 8001308:	2102      	movs	r1, #2
 800130a:	f006 f8a9 	bl	8007460 <aci_gatt_add_char>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	return ret;
 8001314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 8001318:	4618      	mov	r0, r3
 800131a:	372c      	adds	r7, #44	; 0x2c
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	20000008 	.word	0x20000008
 8001324:	20004a92 	.word	0x20004a92
 8001328:	20000018 	.word	0x20000018
 800132c:	20004a94 	.word	0x20004a94

08001330 <update_data>:

void update_data(uint16_t new_data)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	/* tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[]); */
	ret = aci_gatt_update_char_value(my_service_handle,my_char_handle, 0, 2, (uint8_t *)&new_data);
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <update_data+0x38>)
 800133c:	8818      	ldrh	r0, [r3, #0]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <update_data+0x3c>)
 8001340:	8819      	ldrh	r1, [r3, #0]
 8001342:	1dbb      	adds	r3, r7, #6
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2302      	movs	r3, #2
 8001348:	2200      	movs	r2, #0
 800134a:	f006 f991 	bl	8007670 <aci_gatt_update_char_value>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]

	if(ret != BLE_STATUS_SUCCESS)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <update_data+0x2e>
	{
		printf("aci_gatt_update_char_value : FAILED !! \n\r");
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <update_data+0x40>)
 800135a:	f007 fee1 	bl	8009120 <iprintf>
	}


}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20004a92 	.word	0x20004a92
 800136c:	20004a94 	.word	0x20004a94
 8001370:	0800a4a0 	.word	0x0800a4a0

08001374 <Read_Request_CB>:

void Read_Request_CB(uint16_t handle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
	int data;
	data = 450; /* Sent as 0xC201 the bytes are reversed, 0x01C2 = 450 */
 800137e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001382:	60fb      	str	r3, [r7, #12]

	update_data(data);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ffd1 	bl	8001330 <update_data>

	if(connection_handle != FALSE)
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <Read_Request_CB+0x34>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <Read_Request_CB+0x2c>
	{
		aci_gatt_allow_read(connection_handle);
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <Read_Request_CB+0x34>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fa1a 	bl	80077d4 <aci_gatt_allow_read>
	}

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20004a98 	.word	0x20004a98

080013ac <FFT_Update>:
 * @brief  Update FFT characteristic value
 * @param  uint8_t FFT values
 * @retval tBleStatus Status
 */
tBleStatus FFT_Update(uint8_t fft[10])
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t i,buff[11];

  for(i = 0; i < 10; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	75fb      	strb	r3, [r7, #23]
 80013b8:	e00b      	b.n	80013d2 <FFT_Update+0x26>
  {
	  buff[i] = fft[i];
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	441a      	add	r2, r3
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	3318      	adds	r3, #24
 80013c6:	443b      	add	r3, r7
 80013c8:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 10; i++)
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d9f0      	bls.n	80013ba <FFT_Update+0xe>
  }
//  buff[10] = 0xFF;
  ret = aci_gatt_update_char_value(my_service_handle, my_char_handle,
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <FFT_Update+0x64>)
 80013da:	8818      	ldrh	r0, [r3, #0]
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <FFT_Update+0x68>)
 80013de:	8819      	ldrh	r1, [r3, #0]
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	230a      	movs	r3, #10
 80013e8:	2200      	movs	r2, #0
 80013ea:	f006 f941 	bl	8007670 <aci_gatt_update_char_value>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75bb      	strb	r3, [r7, #22]
                                   0, 10, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <FFT_Update+0x5a>
    printf("Error while updating FFT characteristic: 0x%04X\r\n",ret) ;
 80013f8:	7dbb      	ldrb	r3, [r7, #22]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <FFT_Update+0x6c>)
 80013fe:	f007 fe8f 	bl	8009120 <iprintf>
    return BLE_STATUS_ERROR ;
 8001402:	2347      	movs	r3, #71	; 0x47
 8001404:	e000      	b.n	8001408 <FFT_Update+0x5c>
  }

  return BLE_STATUS_SUCCESS;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20004a92 	.word	0x20004a92
 8001414:	20004a94 	.word	0x20004a94
 8001418:	0800a4cc 	.word	0x0800a4cc

0800141c <aci_gatt_read_permit_req_event>:


void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
									uint16_t Attribute_Handle,
									uint16_t Offset)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
 8001426:	460b      	mov	r3, r1
 8001428:	80bb      	strh	r3, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	807b      	strh	r3, [r7, #2]
	Read_Request_CB(Attribute_Handle);
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff9f 	bl	8001374 <Read_Request_CB>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8001440:	b490      	push	{r4, r7}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4604      	mov	r4, r0
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4623      	mov	r3, r4
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	4603      	mov	r3, r0
 8001454:	80bb      	strh	r3, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	71bb      	strb	r3, [r7, #6]
 800145a:	4613      	mov	r3, r2
 800145c:	70fb      	strb	r3, [r7, #3]
	connected = TRUE;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <hci_le_connection_complete_event+0x34>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
	connection_handle = Connection_Handle;
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <hci_le_connection_complete_event+0x38>)
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	8013      	strh	r3, [r2, #0]
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bc90      	pop	{r4, r7}
 8001472:	4770      	bx	lr
 8001474:	20004a96 	.word	0x20004a96
 8001478:	20004a98 	.word	0x20004a98

0800147c <hci_disconnection_complete_event>:

void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	460b      	mov	r3, r1
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	71bb      	strb	r3, [r7, #6]
	connected = FALSE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <hci_disconnection_complete_event+0x34>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	set_connectable = TRUE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <hci_disconnection_complete_event+0x38>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
	connection_handle = FALSE;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <hci_disconnection_complete_event+0x3c>)
 800149c:	2200      	movs	r2, #0
 800149e:	801a      	strh	r2, [r3, #0]

	printf("Disconnected\n\r");
 80014a0:	4806      	ldr	r0, [pc, #24]	; (80014bc <hci_disconnection_complete_event+0x40>)
 80014a2:	f007 fe3d 	bl	8009120 <iprintf>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20004a96 	.word	0x20004a96
 80014b4:	20000028 	.word	0x20000028
 80014b8:	20004a98 	.word	0x20004a98
 80014bc:	0800a500 	.word	0x0800a500

080014c0 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	61bb      	str	r3, [r7, #24]

	/* Process event packet*/
	if(hci_pckt->type == HCI_EVENT_PKT)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d163      	bne.n	800159c <APP_UserEvtRx+0xdc>
	{
		/* Get data from packet */
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]

		/* Process meta data event */
		if(event_pckt->evt == EVT_LE_META_EVENT)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b3e      	cmp	r3, #62	; 0x3e
 80014e0:	d11e      	bne.n	8001520 <APP_UserEvtRx+0x60>
		{
			/* Get meta data */
			evt_le_meta_event *evt = (void *) event_pckt->data;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3302      	adds	r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]

			/* Process each meta data event */
			for(i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	e014      	b.n	8001518 <APP_UserEvtRx+0x58>
			{
				if(evt->subevent == hci_le_meta_events_table[i].evt_code)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	492b      	ldr	r1, [pc, #172]	; (80015a4 <APP_UserEvtRx+0xe4>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d108      	bne.n	8001512 <APP_UserEvtRx+0x52>
				{
					hci_le_meta_events_table[i].process((void *)evt->data);
 8001500:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <APP_UserEvtRx+0xe4>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	3201      	adds	r2, #1
 800150e:	4610      	mov	r0, r2
 8001510:	4798      	blx	r3
			for(i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b09      	cmp	r3, #9
 800151c:	d9e7      	bls.n	80014ee <APP_UserEvtRx+0x2e>
				}
			}
		}

	}
}
 800151e:	e03d      	b.n	800159c <APP_UserEvtRx+0xdc>
		else if(event_pckt->evt == EVT_VENDOR)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d11e      	bne.n	8001566 <APP_UserEvtRx+0xa6>
			evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3302      	adds	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
			for(i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e014      	b.n	800155e <APP_UserEvtRx+0x9e>
				if(blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b29a      	uxth	r2, r3
 800153a:	491b      	ldr	r1, [pc, #108]	; (80015a8 <APP_UserEvtRx+0xe8>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001542:	429a      	cmp	r2, r3
 8001544:	d108      	bne.n	8001558 <APP_UserEvtRx+0x98>
					hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <APP_UserEvtRx+0xe8>)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	3202      	adds	r2, #2
 8001554:	4610      	mov	r0, r2
 8001556:	4798      	blx	r3
			for(i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3301      	adds	r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	2b2a      	cmp	r3, #42	; 0x2a
 8001562:	d9e7      	bls.n	8001534 <APP_UserEvtRx+0x74>
}
 8001564:	e01a      	b.n	800159c <APP_UserEvtRx+0xdc>
			for(i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e014      	b.n	8001596 <APP_UserEvtRx+0xd6>
				if(event_pckt->evt == hci_events_table[i].evt_code)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b29a      	uxth	r2, r3
 8001572:	490e      	ldr	r1, [pc, #56]	; (80015ac <APP_UserEvtRx+0xec>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800157a:	429a      	cmp	r2, r3
 800157c:	d108      	bne.n	8001590 <APP_UserEvtRx+0xd0>
					hci_events_table[i].process((void *)event_pckt->data);
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <APP_UserEvtRx+0xec>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	3202      	adds	r2, #2
 800158c:	4610      	mov	r0, r2
 800158e:	4798      	blx	r3
			for(i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3301      	adds	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	2b06      	cmp	r3, #6
 800159a:	d9e7      	bls.n	800156c <APP_UserEvtRx+0xac>
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800a568 	.word	0x0800a568
 80015a8:	0800a5b8 	.word	0x0800a5b8
 80015ac:	0800a530 	.word	0x0800a530

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ee:	2007      	movs	r0, #7
 80015f0:	f001 f8ca 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 fb6c 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <EXTI0_IRQHandler+0x10>)
 800165a:	f001 fd15 	bl	8003088 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000b8 	.word	0x200000b8

08001668 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Stream6_IRQHandler+0x10>)
 800166e:	f001 fa73 	bl	8002b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20004b84 	.word	0x20004b84

0800167c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <USART2_IRQHandler+0x10>)
 8001682:	f003 f8e7 	bl	8004854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20004afc 	.word	0x20004afc

08001690 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001694:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001698:	f001 ffb4 	bl	8003604 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA2_Stream0_IRQHandler+0x10>)
 80016a6:	f001 fa57 	bl	8002b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000208 	.word	0x20000208

080016b4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <BSP_SPI1_Init+0x54>)
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <BSP_SPI1_Init+0x58>)
 80016c2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <BSP_SPI1_Init+0x5c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	4911      	ldr	r1, [pc, #68]	; (8001710 <BSP_SPI1_Init+0x5c>)
 80016cc:	600a      	str	r2, [r1, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d114      	bne.n	80016fc <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <BSP_SPI1_Init+0x54>)
 80016d4:	f002 fe87 	bl	80043e6 <HAL_SPI_GetState>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10e      	bne.n	80016fc <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80016de:	480a      	ldr	r0, [pc, #40]	; (8001708 <BSP_SPI1_Init+0x54>)
 80016e0:	f000 f87c 	bl	80017dc <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d108      	bne.n	80016fc <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <BSP_SPI1_Init+0x54>)
 80016ec:	f000 f83a 	bl	8001764 <MX_SPI1_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80016f6:	f06f 0307 	mvn.w	r3, #7
 80016fa:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20004a9c 	.word	0x20004a9c
 800170c:	40013000 	.word	0x40013000
 8001710:	20004af4 	.word	0x20004af4

08001714 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <BSP_SPI1_SendRecv+0x3c>)
 8001734:	f002 fcb5 	bl	80040a2 <HAL_SPI_TransmitReceive>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800173e:	f06f 0305 	mvn.w	r3, #5
 8001742:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001744:	697b      	ldr	r3, [r7, #20]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20004a9c 	.word	0x20004a9c

08001754 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001758:	f000 fafa 	bl	8001d50 <HAL_GetTick>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <MX_SPI1_Init+0x74>)
 8001774:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800177c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2230      	movs	r2, #48	; 0x30
 80017a2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	220a      	movs	r2, #10
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f002 fbdd 	bl	8003f7c <HAL_SPI_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40013000 	.word	0x40013000

080017dc <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <SPI1_MspInit+0xc4>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	4a2c      	ldr	r2, [pc, #176]	; (80018a0 <SPI1_MspInit+0xc4>)
 80017ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f2:	6453      	str	r3, [r2, #68]	; 0x44
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <SPI1_MspInit+0xc4>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <SPI1_MspInit+0xc4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <SPI1_MspInit+0xc4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <SPI1_MspInit+0xc4>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <SPI1_MspInit+0xc4>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <SPI1_MspInit+0xc4>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <SPI1_MspInit+0xc4>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001838:	2340      	movs	r3, #64	; 0x40
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001848:	2305      	movs	r3, #5
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4814      	ldr	r0, [pc, #80]	; (80018a4 <SPI1_MspInit+0xc8>)
 8001854:	f001 fc3c 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001868:	2305      	movs	r3, #5
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <SPI1_MspInit+0xc8>)
 8001874:	f001 fc2c 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001878:	2308      	movs	r3, #8
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001888:	2305      	movs	r3, #5
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <SPI1_MspInit+0xcc>)
 8001894:	f001 fc1c 	bl	80030d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400

080018ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
	}

return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fae7 	bl	8000ed4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
	}
	return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
	return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
	return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f007 fb72 	bl	80090a0 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20020000 	.word	0x20020000
 80019e8:	00000600 	.word	0x00000600
 80019ec:	20004af8 	.word	0x20004af8
 80019f0:	200051a0 	.word	0x200051a0

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <MX_USART2_UART_Init+0x50>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a24:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	2208      	movs	r2, #8
 8001a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a50:	f002 fda2 	bl	8004598 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a5a:	f7ff fc25 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20004afc 	.word	0x20004afc
 8001a68:	40004400 	.word	0x40004400

08001a6c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_USART6_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART6_UART_Init+0x4c>)
 8001aa4:	f002 fd78 	bl	8004598 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001aae:	f7ff fbfb 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20004b40 	.word	0x20004b40
 8001abc:	40011400 	.word	0x40011400

08001ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4d      	ldr	r2, [pc, #308]	; (8001c14 <HAL_UART_MspInit+0x154>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d162      	bne.n	8001ba8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a4b      	ldr	r2, [pc, #300]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4839      	ldr	r0, [pc, #228]	; (8001c1c <HAL_UART_MspInit+0x15c>)
 8001b36:	f001 facb 	bl	80030d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b3c:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <HAL_UART_MspInit+0x164>)
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b46:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b7a:	4829      	ldr	r0, [pc, #164]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b7c:	f000 fe54 	bl	8002828 <HAL_DMA_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001b86:	f7ff fb8f 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_UART_MspInit+0x160>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2026      	movs	r0, #38	; 0x26
 8001b9c:	f000 fdff 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba0:	2026      	movs	r0, #38	; 0x26
 8001ba2:	f000 fe18 	bl	80027d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ba6:	e030      	b.n	8001c0a <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART6)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_UART_MspInit+0x168>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d12b      	bne.n	8001c0a <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0x158>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001c06:	f001 fa63 	bl	80030d0 <HAL_GPIO_Init>
}
 8001c0a:	bf00      	nop
 8001c0c:	3730      	adds	r7, #48	; 0x30
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40004400 	.word	0x40004400
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	20004b84 	.word	0x20004b84
 8001c24:	400260a0 	.word	0x400260a0
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	40020800 	.word	0x40020800

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c36:	490e      	ldr	r1, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c4c:	4c0b      	ldr	r4, [pc, #44]	; (8001c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c5a:	f7ff fecb 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f007 fa25 	bl	80090ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff f949 	bl	8000ef8 <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001c74:	0801dc10 	.word	0x0801dc10
  ldr r2, =_sbss
 8001c78:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001c7c:	200051a0 	.word	0x200051a0

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fd6b 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fc7a 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd91 	bl	800280e <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fd4b 	bl	800279e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000002c 	.word	0x2000002c
 8001d20:	20000034 	.word	0x20000034
 8001d24:	20000030 	.word	0x20000030

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000034 	.word	0x20000034
 8001d4c:	20004be4 	.word	0x20004be4

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20004be4 	.word	0x20004be4

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000034 	.word	0x20000034

08001db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e033      	b.n	8001e2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe fe78 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001df6:	f023 0302 	bic.w	r3, r3, #2
 8001dfa:	f043 0202 	orr.w	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa4e 	bl	80022a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e1e:	e001      	b.n	8001e24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Start_DMA+0x1e>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e0ce      	b.n	8001ff4 <HAL_ADC_Start_DMA+0x1bc>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d018      	beq.n	8001e9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7c:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <HAL_ADC_Start_DMA+0x1c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a5f      	ldr	r2, [pc, #380]	; (8002000 <HAL_ADC_Start_DMA+0x1c8>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9a      	lsrs	r2, r3, #18
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eac:	d107      	bne.n	8001ebe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	f040 8086 	bne.w	8001fda <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d106      	bne.n	8001f1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f023 0206 	bic.w	r2, r3, #6
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
 8001f1a:	e002      	b.n	8001f22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_ADC_Start_DMA+0x1cc>)
 8001f2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	4a35      	ldr	r2, [pc, #212]	; (8002008 <HAL_ADC_Start_DMA+0x1d0>)
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_ADC_Start_DMA+0x1d4>)
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	4a33      	ldr	r2, [pc, #204]	; (8002010 <HAL_ADC_Start_DMA+0x1d8>)
 8001f44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	334c      	adds	r3, #76	; 0x4c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f000 fd00 	bl	8002984 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10f      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d129      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	e020      	b.n	8001ff2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_ADC_Start_DMA+0x1dc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x1ba>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d114      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000002c 	.word	0x2000002c
 8002000:	431bde83 	.word	0x431bde83
 8002004:	40012300 	.word	0x40012300
 8002008:	0800249d 	.word	0x0800249d
 800200c:	08002557 	.word	0x08002557
 8002010:	08002573 	.word	0x08002573
 8002014:	40012000 	.word	0x40012000

08002018 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1c>
 8002058:	2302      	movs	r3, #2
 800205a:	e113      	b.n	8002284 <HAL_ADC_ConfigChannel+0x244>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b09      	cmp	r3, #9
 800206a:	d925      	bls.n	80020b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	3b1e      	subs	r3, #30
 8002082:	2207      	movs	r2, #7
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43da      	mvns	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	400a      	ands	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68d9      	ldr	r1, [r3, #12]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4403      	add	r3, r0
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	409a      	lsls	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	e022      	b.n	80020fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	2207      	movs	r2, #7
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4403      	add	r3, r0
 80020f4:	409a      	lsls	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d824      	bhi.n	8002150 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	3b05      	subs	r3, #5
 8002118:	221f      	movs	r2, #31
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	4618      	mov	r0, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3b05      	subs	r3, #5
 8002142:	fa00 f203 	lsl.w	r2, r0, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
 800214e:	e04c      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d824      	bhi.n	80021a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b23      	subs	r3, #35	; 0x23
 800216a:	221f      	movs	r2, #31
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b23      	subs	r3, #35	; 0x23
 8002194:	fa00 f203 	lsl.w	r2, r0, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
 80021a0:	e023      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	3b41      	subs	r3, #65	; 0x41
 80021b4:	221f      	movs	r2, #31
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b41      	subs	r3, #65	; 0x41
 80021de:	fa00 f203 	lsl.w	r2, r0, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_ADC_ConfigChannel+0x250>)
 80021ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_ADC_ConfigChannel+0x254>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10f      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1d8>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d10b      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_ADC_ConfigChannel+0x254>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12b      	bne.n	800227a <HAL_ADC_ConfigChannel+0x23a>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_ADC_ConfigChannel+0x258>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <HAL_ADC_ConfigChannel+0x1f4>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b11      	cmp	r3, #17
 8002232:	d122      	bne.n	800227a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_ADC_ConfigChannel+0x258>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d111      	bne.n	800227a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_ADC_ConfigChannel+0x25c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_ADC_ConfigChannel+0x260>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9a      	lsrs	r2, r3, #18
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800226c:	e002      	b.n	8002274 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3b01      	subs	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40012300 	.word	0x40012300
 8002294:	40012000 	.word	0x40012000
 8002298:	10000012 	.word	0x10000012
 800229c:	2000002c 	.word	0x2000002c
 80022a0:	431bde83 	.word	0x431bde83

080022a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ac:	4b79      	ldr	r3, [pc, #484]	; (8002494 <ADC_Init+0x1f0>)
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	021a      	lsls	r2, r3, #8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	4a58      	ldr	r2, [pc, #352]	; (8002498 <ADC_Init+0x1f4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d022      	beq.n	8002382 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800234a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800236c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6899      	ldr	r1, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	e00f      	b.n	80023a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0202 	bic.w	r2, r2, #2
 80023b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	005a      	lsls	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	3b01      	subs	r3, #1
 80023fc:	035a      	lsls	r2, r3, #13
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	e007      	b.n	8002418 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002416:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	3b01      	subs	r3, #1
 8002434:	051a      	lsls	r2, r3, #20
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800244c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800245a:	025a      	lsls	r2, r3, #9
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6899      	ldr	r1, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	029a      	lsls	r2, r3, #10
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40012300 	.word	0x40012300
 8002498:	0f000001 	.word	0x0f000001

0800249c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d13c      	bne.n	8002530 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d12b      	bne.n	8002528 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d127      	bne.n	8002528 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d119      	bne.n	8002528 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0220 	bic.w	r2, r2, #32
 8002502:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7fe fd9f 	bl	800106c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800252e:	e00e      	b.n	800254e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fd75 	bl	800202c <HAL_ADC_ErrorCallback>
}
 8002542:	e004      	b.n	800254e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fd57 	bl	8002018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f043 0204 	orr.w	r2, r3, #4
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff fd4a 	bl	800202c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <__NVIC_EnableIRQ+0x38>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db12      	blt.n	8002678 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	490a      	ldr	r1, [pc, #40]	; (8002684 <__NVIC_DisableIRQ+0x44>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	3320      	adds	r3, #32
 8002668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800266c:	f3bf 8f4f 	dsb	sy
}
 8002670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002672:	f3bf 8f6f 	isb	sy
}
 8002676:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff8e 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff05 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff1a 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff8e 	bl	80026dc <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5d 	bl	8002688 <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff0d 	bl	8002604 <__NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff1d 	bl	8002640 <__NVIC_DisableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ff94 	bl	8002744 <SysTick_Config>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fa8c 	bl	8001d50 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e099      	b.n	8002978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002864:	e00f      	b.n	8002886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002866:	f7ff fa73 	bl	8001d50 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b05      	cmp	r3, #5
 8002872:	d908      	bls.n	8002886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e078      	b.n	8002978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e8      	bne.n	8002866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <HAL_DMA_Init+0x158>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 0307 	bic.w	r3, r3, #7
 8002906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b04      	cmp	r3, #4
 8002918:	d117      	bne.n	800294a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fb01 	bl	8002f34 <DMA_CheckFifoParam>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002946:	2301      	movs	r3, #1
 8002948:	e016      	b.n	8002978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fab8 	bl	8002ec8 <DMA_CalcBaseAndBitshift>
 8002958:	4603      	mov	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	223f      	movs	r2, #63	; 0x3f
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	f010803f 	.word	0xf010803f

08002984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Start_IT+0x26>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e040      	b.n	8002a2c <HAL_DMA_Start_IT+0xa8>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d12f      	bne.n	8002a1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fa4a 	bl	8002e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	223f      	movs	r2, #63	; 0x3f
 80029de:	409a      	lsls	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0216 	orr.w	r2, r2, #22
 80029f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e005      	b.n	8002a2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a42:	f7ff f985 	bl	8001d50 <HAL_GetTick>
 8002a46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d008      	beq.n	8002a66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e052      	b.n	8002b0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0216 	bic.w	r2, r2, #22
 8002a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_DMA_Abort+0x62>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0208 	bic.w	r2, r2, #8
 8002aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab6:	e013      	b.n	8002ae0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab8:	f7ff f94a 	bl	8001d50 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d90c      	bls.n	8002ae0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e015      	b.n	8002b0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e4      	bne.n	8002ab8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	223f      	movs	r2, #63	; 0x3f
 8002af4:	409a      	lsls	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d004      	beq.n	8002b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00c      	b.n	8002b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2205      	movs	r2, #5
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b64:	4b8e      	ldr	r3, [pc, #568]	; (8002da0 <HAL_DMA_IRQHandler+0x248>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a8e      	ldr	r2, [pc, #568]	; (8002da4 <HAL_DMA_IRQHandler+0x24c>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2208      	movs	r2, #8
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2201      	movs	r2, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	2201      	movs	r2, #1
 8002be8:	409a      	lsls	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2204      	movs	r2, #4
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00b      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	2210      	movs	r2, #16
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d043      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03c      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	2210      	movs	r2, #16
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d018      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d024      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
 8002c86:	e01f      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01b      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e016      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0208 	bic.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2220      	movs	r2, #32
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 808f 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8087 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2220      	movs	r2, #32
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d136      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0216 	bic.w	r2, r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x1da>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0208 	bic.w	r2, r2, #8
 8002d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	223f      	movs	r2, #63	; 0x3f
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d07e      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	4798      	blx	r3
        }
        return;
 8002d6e:	e079      	b.n	8002e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01d      	beq.n	8002dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d031      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e02c      	b.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
 8002d9e:	bf00      	nop
 8002da0:	2000002c 	.word	0x2000002c
 8002da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e01e      	b.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10f      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0210 	bic.w	r2, r2, #16
 8002dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d032      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d022      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2205      	movs	r2, #5
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3301      	adds	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d307      	bcc.n	8002e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f2      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x2cc>
 8002e3e:	e000      	b.n	8002e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
 8002e62:	e000      	b.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e64:	bf00      	nop
    }
  }
}
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d108      	bne.n	8002eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eaa:	e007      	b.n	8002ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	3b10      	subs	r3, #16
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <DMA_CalcBaseAndBitshift+0x64>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d909      	bls.n	8002f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	1d1a      	adds	r2, r3, #4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	659a      	str	r2, [r3, #88]	; 0x58
 8002f08:	e007      	b.n	8002f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	aaaaaaab 	.word	0xaaaaaaab
 8002f30:	0800a528 	.word	0x0800a528

08002f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11f      	bne.n	8002f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d856      	bhi.n	8003002 <DMA_CheckFifoParam+0xce>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <DMA_CheckFifoParam+0x28>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f7f 	.word	0x08002f7f
 8002f64:	08002f6d 	.word	0x08002f6d
 8002f68:	08003003 	.word	0x08003003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d046      	beq.n	8003006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e043      	b.n	8003006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f86:	d140      	bne.n	800300a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8c:	e03d      	b.n	800300a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f96:	d121      	bne.n	8002fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d837      	bhi.n	800300e <DMA_CheckFifoParam+0xda>
 8002f9e:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <DMA_CheckFifoParam+0x70>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fbb 	.word	0x08002fbb
 8002fac:	08002fb5 	.word	0x08002fb5
 8002fb0:	08002fcd 	.word	0x08002fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e030      	b.n	800301c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d025      	beq.n	8003012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fca:	e022      	b.n	8003012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd4:	d11f      	bne.n	8003016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fda:	e01c      	b.n	8003016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d903      	bls.n	8002fea <DMA_CheckFifoParam+0xb6>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d003      	beq.n	8002ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fe8:	e018      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      break;
 8002fee:	e015      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00e      	beq.n	800301a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8003000:	e00b      	b.n	800301a <DMA_CheckFifoParam+0xe6>
      break;
 8003002:	bf00      	nop
 8003004:	e00a      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e008      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e006      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e004      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;   
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 800301a:	bf00      	nop
    }
  } 
  
  return status; 
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop

0800302c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	460b      	mov	r3, r1
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	605a      	str	r2, [r3, #4]
      break;
 800304a:	e002      	b.n	8003052 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	75fb      	strb	r3, [r7, #23]
      break;
 8003050:	bf00      	nop
  }

  return status;
 8003052:	7dfb      	ldrb	r3, [r7, #23]
}
 8003054:	4618      	mov	r0, r3
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e003      	b.n	800307c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2201      	movs	r2, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_EXTI_IRQHandler+0x44>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80030b0:	4a06      	ldr	r2, [pc, #24]	; (80030cc <HAL_EXTI_IRQHandler+0x44>)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4798      	blx	r3
    }
  }
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e159      	b.n	80033a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ec:	2201      	movs	r2, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	f040 8148 	bne.w	800339a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d005      	beq.n	8003122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	2b02      	cmp	r3, #2
 8003120:	d130      	bne.n	8003184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 0201 	and.w	r2, r3, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d017      	beq.n	80031c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d123      	bne.n	8003214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3208      	adds	r2, #8
 80031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0203 	and.w	r2, r3, #3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a2 	beq.w	800339a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_GPIO_Init+0x2e8>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <HAL_GPIO_Init+0x2e8>)
 8003260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <HAL_GPIO_Init+0x2e8>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003272:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_GPIO_Init+0x2ec>)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3302      	adds	r3, #2
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a49      	ldr	r2, [pc, #292]	; (80033c0 <HAL_GPIO_Init+0x2f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x202>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_GPIO_Init+0x2f4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x1fe>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a47      	ldr	r2, [pc, #284]	; (80033c8 <HAL_GPIO_Init+0x2f8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x1fa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a46      	ldr	r2, [pc, #280]	; (80033cc <HAL_GPIO_Init+0x2fc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x1f6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <HAL_GPIO_Init+0x300>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x1f2>
 80032be:	2304      	movs	r3, #4
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032c2:	2307      	movs	r3, #7
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	; (80033bc <HAL_GPIO_Init+0x2ec>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_GPIO_Init+0x304>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_GPIO_Init+0x304>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_GPIO_Init+0x304>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f aea2 	bls.w	80030ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e0bb      	b.n	800356c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f4:	2201      	movs	r2, #1
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	429a      	cmp	r2, r3
 800340c:	f040 80ab 	bne.w	8003566 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003410:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_GPIO_DeInit+0x1ac>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3302      	adds	r3, #2
 8003418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a54      	ldr	r2, [pc, #336]	; (8003588 <HAL_GPIO_DeInit+0x1b0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_DeInit+0x96>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a53      	ldr	r2, [pc, #332]	; (800358c <HAL_GPIO_DeInit+0x1b4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_DeInit+0x92>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a52      	ldr	r2, [pc, #328]	; (8003590 <HAL_GPIO_DeInit+0x1b8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_DeInit+0x8e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a51      	ldr	r2, [pc, #324]	; (8003594 <HAL_GPIO_DeInit+0x1bc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_DeInit+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a50      	ldr	r2, [pc, #320]	; (8003598 <HAL_GPIO_DeInit+0x1c0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_DeInit+0x86>
 800345a:	2304      	movs	r3, #4
 800345c:	e008      	b.n	8003470 <HAL_GPIO_DeInit+0x98>
 800345e:	2307      	movs	r3, #7
 8003460:	e006      	b.n	8003470 <HAL_GPIO_DeInit+0x98>
 8003462:	2303      	movs	r3, #3
 8003464:	e004      	b.n	8003470 <HAL_GPIO_DeInit+0x98>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_DeInit+0x98>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_DeInit+0x98>
 800346e:	2300      	movs	r3, #0
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	f002 0203 	and.w	r2, r2, #3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4093      	lsls	r3, r2
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d132      	bne.n	80034e6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003480:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43db      	mvns	r3, r3
 8003488:	4944      	ldr	r1, [pc, #272]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 800348a:	4013      	ands	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	4941      	ldr	r1, [pc, #260]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 8003498:	4013      	ands	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800349c:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	493d      	ldr	r1, [pc, #244]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	493a      	ldr	r1, [pc, #232]	; (800359c <HAL_GPIO_DeInit+0x1c4>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034c8:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_GPIO_DeInit+0x1ac>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	482a      	ldr	r0, [pc, #168]	; (8003584 <HAL_GPIO_DeInit+0x1ac>)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	400a      	ands	r2, r1
 80034e0:	3302      	adds	r3, #2
 80034e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2103      	movs	r1, #3
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	401a      	ands	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	08d2      	lsrs	r2, r2, #3
 800351c:	4019      	ands	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3208      	adds	r2, #8
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2103      	movs	r1, #3
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	401a      	ands	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	2101      	movs	r1, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2103      	movs	r1, #3
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	401a      	ands	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	f67f af40 	bls.w	80033f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40013800 	.word	0x40013800
 8003588:	40020000 	.word	0x40020000
 800358c:	40020400 	.word	0x40020400
 8003590:	40020800 	.word	0x40020800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40021000 	.word	0x40021000
 800359c:	40013c00 	.word	0x40013c00

080035a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e001      	b.n	80035c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035ec:	e003      	b.n	80035f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	041a      	lsls	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	619a      	str	r2, [r3, #24]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f806 	bl	8003634 <HAL_GPIO_EXTI_Callback>
  }
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40013c00 	.word	0x40013c00

08003634 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e267      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d075      	beq.n	8003756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d00c      	beq.n	8003690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d112      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368e:	d10b      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d05b      	beq.n	8003754 <HAL_RCC_OscConfig+0x108>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d157      	bne.n	8003754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e242      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x74>
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e01d      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6f      	ldr	r2, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6c      	ldr	r2, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a68      	ldr	r2, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fb24 	bl	8001d50 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fb20 	bl	8001d50 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e207      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0xc0>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fb10 	bl	8001d50 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fe fb0c 	bl	8001d50 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1f3      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0xe8>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003776:	2b08      	cmp	r3, #8
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1c7      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4937      	ldr	r1, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	e03a      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fac5 	bl	8001d50 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe fac1 	bl	8001d50 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1a8      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4925      	ldr	r1, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe faa4 	bl	8001d50 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fe faa0 	bl	8001d50 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e187      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d036      	beq.n	80038a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fa84 	bl	8001d50 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe fa80 	bl	8001d50 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e167      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x200>
 800386a:	e01b      	b.n	80038a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe fa6d 	bl	8001d50 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	e00e      	b.n	8003898 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387a:	f7fe fa69 	bl	8001d50 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d907      	bls.n	8003898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e150      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8097 	beq.w	80039e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b7d      	ldr	r3, [pc, #500]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a73      	ldr	r2, [pc, #460]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe fa29 	bl	8001d50 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe fa25 	bl	8001d50 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e10c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x2ea>
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a63      	ldr	r2, [pc, #396]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x30c>
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a5b      	ldr	r2, [pc, #364]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003958:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a57      	ldr	r2, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b55      	ldr	r3, [pc, #340]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f9ea 	bl	8001d50 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe f9e6 	bl	8001d50 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0cb      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	4b49      	ldr	r3, [pc, #292]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <HAL_RCC_OscConfig+0x334>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fe f9d4 	bl	8001d50 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe f9d0 	bl	8001d50 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0b5      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ee      	bne.n	80039ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a1 	beq.w	8003b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d05c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d141      	bne.n	8003a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe f9a4 	bl	8001d50 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fe f9a0 	bl	8001d50 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e087      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	491b      	ldr	r1, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f979 	bl	8001d50 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe f975 	bl	8001d50 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e05c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x416>
 8003a80:	e054      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f962 	bl	8001d50 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fe f95e 	bl	8001d50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e045      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x444>
 8003aae:	e03d      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e038      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d121      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d111      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0cc      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d90c      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0b8      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	494d      	ldr	r1, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d044      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d119      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e067      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4934      	ldr	r1, [pc, #208]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7fe f890 	bl	8001d50 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fe f88c 	bl	8001d50 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e04f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d20c      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e032      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cc2:	f000 f821 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	490a      	ldr	r1, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd fff0 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023c00 	.word	0x40023c00
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	0800a510 	.word	0x0800a510
 8003d00:	2000002c 	.word	0x2000002c
 8003d04:	20000030 	.word	0x20000030

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b094      	sub	sp, #80	; 0x50
 8003d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	647b      	str	r3, [r7, #68]	; 0x44
 8003d14:	2300      	movs	r3, #0
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	2300      	movs	r3, #0
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d20:	4b79      	ldr	r3, [pc, #484]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d00d      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x40>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	f200 80e1 	bhi.w	8003ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x34>
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d3a:	e0db      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d3c:	4b73      	ldr	r3, [pc, #460]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d40:	e0db      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d42:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d46:	e0d8      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d48:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d52:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5e:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	099b      	lsrs	r3, r3, #6
 8003d64:	2200      	movs	r2, #0
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
 8003d72:	2300      	movs	r3, #0
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
 8003d76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	f04f 0000 	mov.w	r0, #0
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	0159      	lsls	r1, r3, #5
 8003d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8c:	0150      	lsls	r0, r2, #5
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4621      	mov	r1, r4
 8003d94:	1a51      	subs	r1, r2, r1
 8003d96:	6139      	str	r1, [r7, #16]
 8003d98:	4629      	mov	r1, r5
 8003d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dac:	4659      	mov	r1, fp
 8003dae:	018b      	lsls	r3, r1, #6
 8003db0:	4651      	mov	r1, sl
 8003db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db6:	4651      	mov	r1, sl
 8003db8:	018a      	lsls	r2, r1, #6
 8003dba:	4651      	mov	r1, sl
 8003dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dda:	4690      	mov	r8, r2
 8003ddc:	4699      	mov	r9, r3
 8003dde:	4623      	mov	r3, r4
 8003de0:	eb18 0303 	adds.w	r3, r8, r3
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	462b      	mov	r3, r5
 8003de8:	eb49 0303 	adc.w	r3, r9, r3
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	024b      	lsls	r3, r1, #9
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e04:	4621      	mov	r1, r4
 8003e06:	024a      	lsls	r2, r1, #9
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	2200      	movs	r2, #0
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e18:	f7fc fa9a 	bl	8000350 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e24:	e058      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e26:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	099b      	lsrs	r3, r3, #6
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	4611      	mov	r1, r2
 8003e32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e40:	4642      	mov	r2, r8
 8003e42:	464b      	mov	r3, r9
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	0159      	lsls	r1, r3, #5
 8003e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e52:	0150      	lsls	r0, r2, #5
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4641      	mov	r1, r8
 8003e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e5e:	4649      	mov	r1, r9
 8003e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e78:	ebb2 040a 	subs.w	r4, r2, sl
 8003e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	00eb      	lsls	r3, r5, #3
 8003e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8e:	00e2      	lsls	r2, r4, #3
 8003e90:	4614      	mov	r4, r2
 8003e92:	461d      	mov	r5, r3
 8003e94:	4643      	mov	r3, r8
 8003e96:	18e3      	adds	r3, r4, r3
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eae:	4629      	mov	r1, r5
 8003eb0:	028b      	lsls	r3, r1, #10
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb8:	4621      	mov	r1, r4
 8003eba:	028a      	lsls	r2, r1, #10
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	61fa      	str	r2, [r7, #28]
 8003ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ecc:	f7fc fa40 	bl	8000350 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ee8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef2:	e002      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3750      	adds	r7, #80	; 0x50
 8003f00:	46bd      	mov	sp, r7
 8003f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	007a1200 	.word	0x007a1200

08003f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000002c 	.word	0x2000002c

08003f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f30:	f7ff fff0 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0a9b      	lsrs	r3, r3, #10
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	0800a520 	.word	0x0800a520

08003f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f58:	f7ff ffdc 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0b5b      	lsrs	r3, r3, #13
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4903      	ldr	r1, [pc, #12]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	0800a520 	.word	0x0800a520

08003f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e07b      	b.n	8004086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9e:	d009      	beq.n	8003fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]
 8003fa6:	e005      	b.n	8003fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f85d 	bl	800408e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004038:	ea42 0103 	orr.w	r1, r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0104 	and.w	r1, r3, #4
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f003 0210 	and.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b08c      	sub	sp, #48	; 0x30
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040b0:	2301      	movs	r3, #1
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x26>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e18a      	b.n	80043de <HAL_SPI_TransmitReceive+0x33c>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d0:	f7fd fe3e 	bl	8001d50 <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d00f      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x70>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f8:	d107      	bne.n	800410a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <HAL_SPI_TransmitReceive+0x68>
 8004102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004106:	2b04      	cmp	r3, #4
 8004108:	d003      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004110:	e15b      	b.n	80043ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_SPI_TransmitReceive+0x82>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_SPI_TransmitReceive+0x82>
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800412a:	e14e      	b.n	80043ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b04      	cmp	r3, #4
 8004136:	d003      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2205      	movs	r2, #5
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	887a      	ldrh	r2, [r7, #2]
 8004156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d007      	beq.n	8004194 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419c:	d178      	bne.n	8004290 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_TransmitReceive+0x10a>
 80041a6:	8b7b      	ldrh	r3, [r7, #26]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d166      	bne.n	800427a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	881a      	ldrh	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d0:	e053      	b.n	800427a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11b      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x176>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x176>
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d113      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d119      	bne.n	800425a <HAL_SPI_TransmitReceive+0x1b8>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d014      	beq.n	800425a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	b292      	uxth	r2, r2
 800423c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	1c9a      	adds	r2, r3, #2
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004256:	2301      	movs	r3, #1
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800425a:	f7fd fd79 	bl	8001d50 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004266:	429a      	cmp	r2, r3
 8004268:	d807      	bhi.n	800427a <HAL_SPI_TransmitReceive+0x1d8>
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d003      	beq.n	800427a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004278:	e0a7      	b.n	80043ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1a6      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x130>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1a1      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x130>
 800428e:	e07c      	b.n	800438a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_TransmitReceive+0x1fc>
 8004298:	8b7b      	ldrh	r3, [r7, #26]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d16b      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	7812      	ldrb	r2, [r2, #0]
 80042aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c4:	e057      	b.n	8004376 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d11c      	bne.n	800430e <HAL_SPI_TransmitReceive+0x26c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d017      	beq.n	800430e <HAL_SPI_TransmitReceive+0x26c>
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d114      	bne.n	800430e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	7812      	ldrb	r2, [r2, #0]
 80042f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d119      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x2ae>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d014      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800434c:	2301      	movs	r3, #1
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004350:	f7fd fcfe 	bl	8001d50 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800435c:	429a      	cmp	r2, r3
 800435e:	d803      	bhi.n	8004368 <HAL_SPI_TransmitReceive+0x2c6>
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d102      	bne.n	800436e <HAL_SPI_TransmitReceive+0x2cc>
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004374:	e029      	b.n	80043ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1a2      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x224>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d19d      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8c0 	bl	8004514 <SPI_EndRxTxTransaction>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043a6:	e010      	b.n	80043ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	e000      	b.n	80043ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3730      	adds	r7, #48	; 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f4:	b2db      	uxtb	r3, r3
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004414:	f7fd fc9c 	bl	8001d50 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4413      	add	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004424:	f7fd fc94 	bl	8001d50 <HAL_GetTick>
 8004428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	0d1b      	lsrs	r3, r3, #20
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443a:	e054      	b.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d050      	beq.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004444:	f7fd fc84 	bl	8001d50 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d902      	bls.n	800445a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13d      	bne.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004472:	d111      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447c:	d004      	beq.n	8004488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d107      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a0:	d10f      	bne.n	80044c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e017      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d19b      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	2000002c 	.word	0x2000002c

08004514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <SPI_EndRxTxTransaction+0x7c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <SPI_EndRxTxTransaction+0x80>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0d5b      	lsrs	r3, r3, #21
 800452c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453e:	d112      	bne.n	8004566 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff ff5a 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e00f      	b.n	8004586 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3b01      	subs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d0f2      	beq.n	8004566 <SPI_EndRxTxTransaction+0x52>
 8004580:	e000      	b.n	8004584 <SPI_EndRxTxTransaction+0x70>
        break;
 8004582:	bf00      	nop
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2000002c 	.word	0x2000002c
 8004594:	165e9f81 	.word	0x165e9f81

08004598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03f      	b.n	800462a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fd fa7e 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	; 0x24
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fed1 	bl	8005384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	d17c      	bne.n	800474c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Transmit+0x2c>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e075      	b.n	800474e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_UART_Transmit+0x3e>
 800466c:	2302      	movs	r3, #2
 800466e:	e06e      	b.n	800474e <HAL_UART_Transmit+0x11c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2221      	movs	r2, #33	; 0x21
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004686:	f7fd fb63 	bl	8001d50 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d108      	bne.n	80046b4 <HAL_UART_Transmit+0x82>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e003      	b.n	80046bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046c4:	e02a      	b.n	800471c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fc26 	bl	8004f22 <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e036      	b.n	800474e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	3302      	adds	r3, #2
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e007      	b.n	800470e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1cf      	bne.n	80046c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	2140      	movs	r1, #64	; 0x40
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fbf6 	bl	8004f22 <UART_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e006      	b.n	800474e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08c      	sub	sp, #48	; 0x30
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b20      	cmp	r3, #32
 8004770:	d165      	bne.n	800483e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_UART_Transmit_DMA+0x26>
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e05e      	b.n	8004840 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_UART_Transmit_DMA+0x38>
 800478c:	2302      	movs	r3, #2
 800478e:	e057      	b.n	8004840 <HAL_UART_Transmit_DMA+0xe8>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2221      	movs	r2, #33	; 0x21
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <HAL_UART_Transmit_DMA+0xf0>)
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <HAL_UART_Transmit_DMA+0xf4>)
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <HAL_UART_Transmit_DMA+0xf8>)
 80047ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3304      	adds	r3, #4
 80047ec:	461a      	mov	r2, r3
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	f7fe f8c8 	bl	8002984 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	617b      	str	r3, [r7, #20]
   return(result);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004826:	627a      	str	r2, [r7, #36]	; 0x24
 8004828:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6a39      	ldr	r1, [r7, #32]
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	61fb      	str	r3, [r7, #28]
   return(result);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	08004dd9 	.word	0x08004dd9
 800484c:	08004e73 	.word	0x08004e73
 8004850:	08004e8f 	.word	0x08004e8f

08004854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b0ba      	sub	sp, #232	; 0xe8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fcaa 	bl	800520c <UART_Receive_IT>
      return;
 80048b8:	e256      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80de 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80d1 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0202 	orr.w	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d011      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 81ed 	beq.w	8004d5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fc35 	bl	800520c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_UART_IRQHandler+0x17a>
 80049c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fb3d 	bl	800504e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	4a7d      	ldr	r2, [pc, #500]	; (8004c30 <HAL_UART_IRQHandler+0x3dc>)
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f866 	bl	8002b14 <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00e      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9a4 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00a      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9a0 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e006      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f99c 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a7a:	e170      	b.n	8004d5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	bf00      	nop
    return;
 8004a7e:	e16e      	b.n	8004d5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 814a 	bne.w	8004d1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8143 	beq.w	8004d1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 813c 	beq.w	8004d1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	f040 80b4 	bne.w	8004c34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8140 	beq.w	8004d62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f080 8139 	bcs.w	8004d62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	f000 8088 	beq.w	8004c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1d9      	bne.n	8004b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e1      	bne.n	8004b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e3      	bne.n	8004b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e3      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd ff0f 	bl	8002a34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8ca 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c2c:	e099      	b.n	8004d62 <HAL_UART_IRQHandler+0x50e>
 8004c2e:	bf00      	nop
 8004c30:	08005115 	.word	0x08005115
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 808b 	beq.w	8004d66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8086 	beq.w	8004d66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e3      	bne.n	8004c5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0310 	bic.w	r3, r3, #16
 8004cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cfc:	61fa      	str	r2, [r7, #28]
 8004cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e3      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f852 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d1c:	e023      	b.n	8004d66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <HAL_UART_IRQHandler+0x4ea>
 8004d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa00 	bl	800513c <UART_Transmit_IT>
    return;
 8004d3c:	e014      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00e      	beq.n	8004d68 <HAL_UART_IRQHandler+0x514>
 8004d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa40 	bl	80051dc <UART_EndTransmit_IT>
    return;
 8004d5c:	e004      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
    return;
 8004d5e:	bf00      	nop
 8004d60:	e002      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
      return;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
      return;
 8004d66:	bf00      	nop
  }
}
 8004d68:	37e8      	adds	r7, #232	; 0xe8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop

08004d70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b090      	sub	sp, #64	; 0x40
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d137      	bne.n	8004e64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	2200      	movs	r2, #0
 8004df8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	623b      	str	r3, [r7, #32]
   return(result);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e4e:	61fa      	str	r2, [r7, #28]
 8004e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	69b9      	ldr	r1, [r7, #24]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e62:	e002      	b.n	8004e6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004e64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e66:	f7ff ff83 	bl	8004d70 <HAL_UART_TxCpltCallback>
}
 8004e6a:	bf00      	nop
 8004e6c:	3740      	adds	r7, #64	; 0x40
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff ff7f 	bl	8004d84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b21      	cmp	r3, #33	; 0x21
 8004ec0:	d108      	bne.n	8004ed4 <UART_DMAError+0x46>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f000 f895 	bl	8004ffe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b22      	cmp	r3, #34	; 0x22
 8004ef4:	d108      	bne.n	8004f08 <UART_DMAError+0x7a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2200      	movs	r2, #0
 8004f00:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f02:	68b8      	ldr	r0, [r7, #8]
 8004f04:	f000 f8a3 	bl	800504e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	f043 0210 	orr.w	r2, r3, #16
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f14:	68b8      	ldr	r0, [r7, #8]
 8004f16:	f7ff ff49 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b090      	sub	sp, #64	; 0x40
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	e050      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d04c      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f42:	f7fc ff05 	bl	8001d50 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d241      	bcs.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f72:	637a      	str	r2, [r7, #52]	; 0x34
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	613b      	str	r3, [r7, #16]
   return(result);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fa6:	623a      	str	r2, [r7, #32]
 8004fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d09f      	beq.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3740      	adds	r7, #64	; 0x40
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b089      	sub	sp, #36	; 0x24
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	60bb      	str	r3, [r7, #8]
   return(result);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	61ba      	str	r2, [r7, #24]
 8005028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6979      	ldr	r1, [r7, #20]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	613b      	str	r3, [r7, #16]
   return(result);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005042:	bf00      	nop
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800504e:	b480      	push	{r7}
 8005050:	b095      	sub	sp, #84	; 0x54
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800506c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005076:	643a      	str	r2, [r7, #64]	; 0x40
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800507c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3314      	adds	r3, #20
 8005090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	61fb      	str	r3, [r7, #28]
   return(result);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d119      	bne.n	80050fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 0310 	bic.w	r3, r3, #16
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e6:	61ba      	str	r2, [r7, #24]
 80050e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6979      	ldr	r1, [r7, #20]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	613b      	str	r3, [r7, #16]
   return(result);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005108:	bf00      	nop
 800510a:	3754      	adds	r7, #84	; 0x54
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fe3c 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b21      	cmp	r3, #33	; 0x21
 800514e:	d13e      	bne.n	80051ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d114      	bne.n	8005184 <UART_Transmit_IT+0x48>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d110      	bne.n	8005184 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005176:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]
 8005182:	e008      	b.n	8005196 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	1c59      	adds	r1, r3, #1
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6211      	str	r1, [r2, #32]
 800518e:	781a      	ldrb	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29b      	uxth	r3, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4619      	mov	r1, r3
 80051a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fdb7 	bl	8004d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b22      	cmp	r3, #34	; 0x22
 800521e:	f040 80ab 	bne.w	8005378 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	d117      	bne.n	800525c <UART_Receive_IT+0x50>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d113      	bne.n	800525c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	b29a      	uxth	r2, r3
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
 800525a:	e026      	b.n	80052aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	d007      	beq.n	8005280 <UART_Receive_IT+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <UART_Receive_IT+0x82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e008      	b.n	80052a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	b2da      	uxtb	r2, r3
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d15a      	bne.n	8005374 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d135      	bne.n	800536a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	613b      	str	r3, [r7, #16]
   return(result);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 0310 	bic.w	r3, r3, #16
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	623a      	str	r2, [r7, #32]
 8005326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	69f9      	ldr	r1, [r7, #28]
 800532a:	6a3a      	ldr	r2, [r7, #32]
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	61bb      	str	r3, [r7, #24]
   return(result);
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e5      	bne.n	8005304 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d10a      	bne.n	800535c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fd2c 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
 8005368:	e002      	b.n	8005370 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff fd14 	bl	8004d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e002      	b.n	800537a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	e000      	b.n	800537a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3730      	adds	r7, #48	; 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005388:	b0c0      	sub	sp, #256	; 0x100
 800538a:	af00      	add	r7, sp, #0
 800538c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053dc:	f021 010c 	bic.w	r1, r1, #12
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ea:	430b      	orrs	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	6999      	ldr	r1, [r3, #24]
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	ea40 0301 	orr.w	r3, r0, r1
 800540a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b8f      	ldr	r3, [pc, #572]	; (8005650 <UART_SetConfig+0x2cc>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d005      	beq.n	8005424 <UART_SetConfig+0xa0>
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b8d      	ldr	r3, [pc, #564]	; (8005654 <UART_SetConfig+0x2d0>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d104      	bne.n	800542e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fe fd96 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8005428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800542c:	e003      	b.n	8005436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800542e:	f7fe fd7d 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8005432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005440:	f040 810c 	bne.w	800565c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800544e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	1891      	adds	r1, r2, r2
 800545c:	65b9      	str	r1, [r7, #88]	; 0x58
 800545e:	415b      	adcs	r3, r3
 8005460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005466:	4621      	mov	r1, r4
 8005468:	eb12 0801 	adds.w	r8, r2, r1
 800546c:	4629      	mov	r1, r5
 800546e:	eb43 0901 	adc.w	r9, r3, r1
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800547e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005486:	4690      	mov	r8, r2
 8005488:	4699      	mov	r9, r3
 800548a:	4623      	mov	r3, r4
 800548c:	eb18 0303 	adds.w	r3, r8, r3
 8005490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005494:	462b      	mov	r3, r5
 8005496:	eb49 0303 	adc.w	r3, r9, r3
 800549a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054b2:	460b      	mov	r3, r1
 80054b4:	18db      	adds	r3, r3, r3
 80054b6:	653b      	str	r3, [r7, #80]	; 0x50
 80054b8:	4613      	mov	r3, r2
 80054ba:	eb42 0303 	adc.w	r3, r2, r3
 80054be:	657b      	str	r3, [r7, #84]	; 0x54
 80054c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054c8:	f7fa ff42 	bl	8000350 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4b61      	ldr	r3, [pc, #388]	; (8005658 <UART_SetConfig+0x2d4>)
 80054d2:	fba3 2302 	umull	r2, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	011c      	lsls	r4, r3, #4
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	1891      	adds	r1, r2, r2
 80054f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80054f4:	415b      	adcs	r3, r3
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054fc:	4641      	mov	r1, r8
 80054fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005502:	4649      	mov	r1, r9
 8005504:	eb43 0b01 	adc.w	fp, r3, r1
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800551c:	4692      	mov	sl, r2
 800551e:	469b      	mov	fp, r3
 8005520:	4643      	mov	r3, r8
 8005522:	eb1a 0303 	adds.w	r3, sl, r3
 8005526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800552a:	464b      	mov	r3, r9
 800552c:	eb4b 0303 	adc.w	r3, fp, r3
 8005530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005548:	460b      	mov	r3, r1
 800554a:	18db      	adds	r3, r3, r3
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
 800554e:	4613      	mov	r3, r2
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
 8005556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800555a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800555e:	f7fa fef7 	bl	8000350 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4611      	mov	r1, r2
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <UART_SetConfig+0x2d4>)
 800556a:	fba3 2301 	umull	r2, r3, r3, r1
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2264      	movs	r2, #100	; 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	1acb      	subs	r3, r1, r3
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800557e:	4b36      	ldr	r3, [pc, #216]	; (8005658 <UART_SetConfig+0x2d4>)
 8005580:	fba3 2302 	umull	r2, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800558c:	441c      	add	r4, r3
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800559c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	1891      	adds	r1, r2, r2
 80055a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055a8:	415b      	adcs	r3, r3
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b0:	4641      	mov	r1, r8
 80055b2:	1851      	adds	r1, r2, r1
 80055b4:	6339      	str	r1, [r7, #48]	; 0x30
 80055b6:	4649      	mov	r1, r9
 80055b8:	414b      	adcs	r3, r1
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055c8:	4659      	mov	r1, fp
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4651      	mov	r1, sl
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4642      	mov	r2, r8
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e4:	464b      	mov	r3, r9
 80055e6:	460a      	mov	r2, r1
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005604:	460b      	mov	r3, r1
 8005606:	18db      	adds	r3, r3, r3
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
 800560a:	4613      	mov	r3, r2
 800560c:	eb42 0303 	adc.w	r3, r2, r3
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800561a:	f7fa fe99 	bl	8000350 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <UART_SetConfig+0x2d4>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2164      	movs	r1, #100	; 0x64
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	3332      	adds	r3, #50	; 0x32
 8005636:	4a08      	ldr	r2, [pc, #32]	; (8005658 <UART_SetConfig+0x2d4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4422      	add	r2, r4
 800564a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800564c:	e105      	b.n	800585a <UART_SetConfig+0x4d6>
 800564e:	bf00      	nop
 8005650:	40011000 	.word	0x40011000
 8005654:	40011400 	.word	0x40011400
 8005658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800566a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800566e:	4642      	mov	r2, r8
 8005670:	464b      	mov	r3, r9
 8005672:	1891      	adds	r1, r2, r2
 8005674:	6239      	str	r1, [r7, #32]
 8005676:	415b      	adcs	r3, r3
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800567e:	4641      	mov	r1, r8
 8005680:	1854      	adds	r4, r2, r1
 8005682:	4649      	mov	r1, r9
 8005684:	eb43 0501 	adc.w	r5, r3, r1
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	00eb      	lsls	r3, r5, #3
 8005692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005696:	00e2      	lsls	r2, r4, #3
 8005698:	4614      	mov	r4, r2
 800569a:	461d      	mov	r5, r3
 800569c:	4643      	mov	r3, r8
 800569e:	18e3      	adds	r3, r4, r3
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a4:	464b      	mov	r3, r9
 80056a6:	eb45 0303 	adc.w	r3, r5, r3
 80056aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056ca:	4629      	mov	r1, r5
 80056cc:	008b      	lsls	r3, r1, #2
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d4:	4621      	mov	r1, r4
 80056d6:	008a      	lsls	r2, r1, #2
 80056d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056dc:	f7fa fe38 	bl	8000350 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4b60      	ldr	r3, [pc, #384]	; (8005868 <UART_SetConfig+0x4e4>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011c      	lsls	r4, r3, #4
 80056ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	1891      	adds	r1, r2, r2
 8005706:	61b9      	str	r1, [r7, #24]
 8005708:	415b      	adcs	r3, r3
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	4641      	mov	r1, r8
 8005712:	1851      	adds	r1, r2, r1
 8005714:	6139      	str	r1, [r7, #16]
 8005716:	4649      	mov	r1, r9
 8005718:	414b      	adcs	r3, r1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005728:	4659      	mov	r1, fp
 800572a:	00cb      	lsls	r3, r1, #3
 800572c:	4651      	mov	r1, sl
 800572e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005732:	4651      	mov	r1, sl
 8005734:	00ca      	lsls	r2, r1, #3
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	4603      	mov	r3, r0
 800573c:	4642      	mov	r2, r8
 800573e:	189b      	adds	r3, r3, r2
 8005740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005744:	464b      	mov	r3, r9
 8005746:	460a      	mov	r2, r1
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	67bb      	str	r3, [r7, #120]	; 0x78
 800575a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005768:	4649      	mov	r1, r9
 800576a:	008b      	lsls	r3, r1, #2
 800576c:	4641      	mov	r1, r8
 800576e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005772:	4641      	mov	r1, r8
 8005774:	008a      	lsls	r2, r1, #2
 8005776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800577a:	f7fa fde9 	bl	8000350 <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4b39      	ldr	r3, [pc, #228]	; (8005868 <UART_SetConfig+0x4e4>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <UART_SetConfig+0x4e4>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a2:	441c      	add	r4, r3
 80057a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a8:	2200      	movs	r2, #0
 80057aa:	673b      	str	r3, [r7, #112]	; 0x70
 80057ac:	677a      	str	r2, [r7, #116]	; 0x74
 80057ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057b2:	4642      	mov	r2, r8
 80057b4:	464b      	mov	r3, r9
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c2:	4641      	mov	r1, r8
 80057c4:	1851      	adds	r1, r2, r1
 80057c6:	6039      	str	r1, [r7, #0]
 80057c8:	4649      	mov	r1, r9
 80057ca:	414b      	adcs	r3, r1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057da:	4659      	mov	r1, fp
 80057dc:	00cb      	lsls	r3, r1, #3
 80057de:	4651      	mov	r1, sl
 80057e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e4:	4651      	mov	r1, sl
 80057e6:	00ca      	lsls	r2, r1, #3
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	4603      	mov	r3, r0
 80057ee:	4642      	mov	r2, r8
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	663b      	str	r3, [r7, #96]	; 0x60
 8005808:	667a      	str	r2, [r7, #100]	; 0x64
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005816:	4649      	mov	r1, r9
 8005818:	008b      	lsls	r3, r1, #2
 800581a:	4641      	mov	r1, r8
 800581c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005820:	4641      	mov	r1, r8
 8005822:	008a      	lsls	r2, r1, #2
 8005824:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005828:	f7fa fd92 	bl	8000350 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <UART_SetConfig+0x4e4>)
 8005832:	fba3 1302 	umull	r1, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2164      	movs	r1, #100	; 0x64
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <UART_SetConfig+0x4e4>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4422      	add	r2, r4
 8005858:	609a      	str	r2, [r3, #8]
}
 800585a:	bf00      	nop
 800585c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	51eb851f 	.word	0x51eb851f

0800586c <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	7818      	ldrb	r0, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005886:	b299      	uxth	r1, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	78db      	ldrb	r3, [r3, #3]
 800588c:	461a      	mov	r2, r3
 800588e:	f7fb fdf5 	bl	800147c <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	7818      	ldrb	r0, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80058b6:	b299      	uxth	r1, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	461a      	mov	r2, r3
 80058be:	f000 ffca 	bl	8006856 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80058cc:	b590      	push	{r4, r7, lr}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	7818      	ldrb	r0, [r3, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80058e6:	b299      	uxth	r1, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	78da      	ldrb	r2, [r3, #3]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	889b      	ldrh	r3, [r3, #4]
 80058f0:	b29c      	uxth	r4, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	88db      	ldrh	r3, [r3, #6]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4623      	mov	r3, r4
 80058fc:	f000 ffba 	bl	8006874 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bd90      	pop	{r4, r7, pc}

0800590a <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 ffbc 	bl	800689c <hci_hardware_error_event>

  return status;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b0a6      	sub	sp, #152	; 0x98
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005936:	2300      	movs	r3, #0
 8005938:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8005948:	2300      	movs	r3, #0
 800594a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800594e:	e02e      	b.n	80059ae <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8005950:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005960:	b29a      	uxth	r2, r3
 8005962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3398      	adds	r3, #152	; 0x98
 800596a:	443b      	add	r3, r7
 800596c:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8005970:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005974:	3302      	adds	r3, #2
 8005976:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800597a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800597e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800598a:	b29a      	uxth	r2, r3
 800598c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	3398      	adds	r3, #152	; 0x98
 8005994:	443b      	add	r3, r7
 8005996:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800599a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800599e:	3302      	adds	r3, #2
 80059a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80059a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059a8:	3301      	adds	r3, #1
 80059aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059ba:	4293      	cmp	r3, r2
 80059bc:	dbc8      	blt.n	8005950 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 80059be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f107 0208 	add.w	r2, r7, #8
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ff71 	bl	80068b2 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80059d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3798      	adds	r7, #152	; 0x98
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 ff6a 	bl	80068ca <hci_data_buffer_overflow_event>

  return status;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 ff5e 	bl	80068e0 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 f9e6 	bl	8006e14 <aci_blue_initialized_event>

  return status;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 f9e0 	bl	8006e2a <aci_blue_events_lost_event>

  return status;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8005a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a78:	b08d      	sub	sp, #52	; 0x34
 8005a7a:	af08      	add	r7, sp, #32
 8005a7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f893 c000 	ldrb.w	ip, [r3]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005aa4:	603b      	str	r3, [r7, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8005ab8:	68bc      	ldr	r4, [r7, #8]
 8005aba:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8005abe:	68bd      	ldr	r5, [r7, #8]
 8005ac0:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8005ac4:	68be      	ldr	r6, [r7, #8]
 8005ac6:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8005ace:	9307      	str	r3, [sp, #28]
 8005ad0:	9606      	str	r6, [sp, #24]
 8005ad2:	9505      	str	r5, [sp, #20]
 8005ad4:	9404      	str	r4, [sp, #16]
 8005ad6:	9003      	str	r0, [sp, #12]
 8005ad8:	9102      	str	r1, [sp, #8]
 8005ada:	9201      	str	r2, [sp, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	4671      	mov	r1, lr
 8005ae6:	4660      	mov	r0, ip
 8005ae8:	f001 f9a9 	bl	8006e3e <aci_blue_crash_info_event>

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005af8 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	7818      	ldrb	r0, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	7859      	ldrb	r1, [r3, #1]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f001 f99f 	bl	8006e5a <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f993 0000 	ldrsb.w	r0, [r3]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8005b44:	461a      	mov	r2, r3
 8005b46:	f001 f996 	bl	8006e76 <aci_hal_scan_req_report_event>

  return status;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	7818      	ldrb	r0, [r3, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8005b70:	461a      	mov	r2, r3
 8005b72:	f001 f98e 	bl	8006e92 <aci_hal_fw_error_event>

  return status;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8005b8c:	f000 ff3e 	bl	8006a0c <aci_gap_limited_discoverable_event>

  return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b298      	uxth	r0, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	7899      	ldrb	r1, [r3, #2]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	78db      	ldrb	r3, [r3, #3]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f000 ff2e 	bl	8006a1a <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 ff2a 	bl	8006a38 <aci_gap_pass_key_req_event>

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 ff22 	bl	8006a4e <aci_gap_authorization_req_event>

  return status;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8005c20:	f000 ff20 	bl	8006a64 <aci_gap_slave_security_initiated_event>

  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8005c3a:	f000 ff1a 	bl	8006a72 <aci_gap_bond_lost_event>

  return status;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	7818      	ldrb	r0, [r3, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	7859      	ldrb	r1, [r3, #1]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8005c68:	f000 ff0a 	bl	8006a80 <aci_gap_proc_complete_event>

  return status;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 ff07 	bl	8006aa0 <aci_gap_addr_not_resolved_event>

  return status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fefb 	bl	8006ab6 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	789b      	ldrb	r3, [r3, #2]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 fef1 	bl	8006ace <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	885b      	ldrh	r3, [r3, #2]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f001 f839 	bl	8006d8c <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b298      	uxth	r0, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8005d42:	461a      	mov	r2, r3
 8005d44:	f001 f830 	bl	8006da8 <aci_l2cap_proc_timeout_event>

  return status;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8005d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d54:	b089      	sub	sp, #36	; 0x24
 8005d56:	af04      	add	r7, sp, #16
 8005d58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b298      	uxth	r0, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	789c      	ldrb	r4, [r3, #2]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005d72:	b29d      	uxth	r5, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005d7a:	b29e      	uxth	r6, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8005d92:	b289      	uxth	r1, r1
 8005d94:	9102      	str	r1, [sp, #8]
 8005d96:	9201      	str	r2, [sp, #4]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	4633      	mov	r3, r6
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4621      	mov	r1, r4
 8005da0:	f001 f810 	bl	8006dc4 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dae <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8005dae:	b590      	push	{r4, r7, lr}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af02      	add	r7, sp, #8
 8005db4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b298      	uxth	r0, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	7899      	ldrb	r1, [r3, #2]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	4623      	mov	r3, r4
 8005ddc:	f001 f806 	bl	8006dec <aci_l2cap_command_reject_event>

  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd90      	pop	{r4, r7, pc}

08005dea <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8005dea:	b590      	push	{r4, r7, lr}
 8005dec:	b087      	sub	sp, #28
 8005dee:	af02      	add	r7, sp, #8
 8005df0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	885b      	ldrh	r3, [r3, #2]
 8005e04:	b299      	uxth	r1, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	889b      	ldrh	r3, [r3, #4]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	88db      	ldrh	r3, [r3, #6]
 8005e10:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4623      	mov	r3, r4
 8005e1a:	f000 fe66 	bl	8006aea <aci_gatt_attribute_modified_event>

  return status;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd90      	pop	{r4, r7, pc}

08005e28 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fe67 	bl	8006b12 <aci_gatt_proc_timeout_event>

  return status;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	885b      	ldrh	r3, [r3, #2]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f000 fe5b 	bl	8006b28 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b298      	uxth	r0, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	7899      	ldrb	r1, [r3, #2]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8005e9e:	f000 fe51 	bl	8006b44 <aci_att_find_info_resp_event>

  return status;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b0a6      	sub	sp, #152	; 0x98
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ecc:	e02e      	b.n	8005f2c <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8005ece:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	3398      	adds	r3, #152	; 0x98
 8005ee8:	443b      	add	r3, r7
 8005eea:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8005eee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8005ef8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	3398      	adds	r3, #152	; 0x98
 8005f12:	443b      	add	r3, r7
 8005f14:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8005f18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8005f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f26:	3301      	adds	r3, #1
 8005f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f30:	789b      	ldrb	r3, [r3, #2]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	dbc8      	blt.n	8005ece <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8005f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b298      	uxth	r0, r3
 8005f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	f107 0208 	add.w	r2, r7, #8
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f000 fe08 	bl	8006b64 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8005f54:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3798      	adds	r7, #152	; 0x98
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b298      	uxth	r0, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	7899      	ldrb	r1, [r3, #2]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8005f82:	f000 fdfd 	bl	8006b80 <aci_att_read_by_type_resp_event>

  return status;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b298      	uxth	r0, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 fdf6 	bl	8006ba0 <aci_att_read_resp_event>

  return status;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b298      	uxth	r0, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f000 fded 	bl	8006bbc <aci_att_read_blob_resp_event>

  return status;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b298      	uxth	r0, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800600a:	461a      	mov	r2, r3
 800600c:	f000 fde4 	bl	8006bd8 <aci_att_read_multiple_resp_event>

  return status;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b298      	uxth	r0, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	7899      	ldrb	r1, [r3, #2]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800603c:	f000 fdda 	bl	8006bf4 <aci_att_read_by_group_type_resp_event>

  return status;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800604a:	b590      	push	{r4, r7, lr}
 800604c:	b087      	sub	sp, #28
 800604e:	af02      	add	r7, sp, #8
 8006050:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b298      	uxth	r0, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	885b      	ldrh	r3, [r3, #2]
 8006064:	b299      	uxth	r1, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	889b      	ldrh	r3, [r3, #4]
 800606a:	b29a      	uxth	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4623      	mov	r3, r4
 8006078:	f000 fdcc 	bl	8006c14 <aci_att_prepare_write_resp_event>

  return status;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}

08006086 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fdcd 	bl	8006c3c <aci_att_exec_write_resp_event>

  return status;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b298      	uxth	r0, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	885b      	ldrh	r3, [r3, #2]
 80060c6:	b299      	uxth	r1, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 80060d0:	f000 fdbf 	bl	8006c52 <aci_gatt_indication_event>

  return status;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b298      	uxth	r0, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	885b      	ldrh	r3, [r3, #2]
 80060f8:	b299      	uxth	r1, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8006102:	f000 fdb6 	bl	8006c72 <aci_gatt_notification_event>

  return status;
 8006106:	7bfb      	ldrb	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29a      	uxth	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	789b      	ldrb	r3, [r3, #2]
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f000 fdb0 	bl	8006c92 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b298      	uxth	r0, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	7899      	ldrb	r1, [r3, #2]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800615c:	b29a      	uxth	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	795b      	ldrb	r3, [r3, #5]
 8006162:	f000 fda4 	bl	8006cae <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b298      	uxth	r0, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	885b      	ldrh	r3, [r3, #2]
 800618a:	b299      	uxth	r1, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8006194:	f000 fd9f 	bl	8006cd6 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b298      	uxth	r0, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	885b      	ldrh	r3, [r3, #2]
 80061bc:	b299      	uxth	r1, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80061c6:	f000 fd96 	bl	8006cf6 <aci_gatt_write_permit_req_event>

  return status;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b298      	uxth	r0, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	885b      	ldrh	r3, [r3, #2]
 80061ee:	b299      	uxth	r1, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	889b      	ldrh	r3, [r3, #4]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fb f910 	bl	800141c <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b0a6      	sub	sp, #152	; 0x98
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800620e:	2300      	movs	r3, #0
 8006210:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800621a:	2303      	movs	r3, #3
 800621c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006220:	2300      	movs	r3, #0
 8006222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006226:	e019      	b.n	800625c <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8006228:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800622c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4413      	add	r3, r2
 8006234:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	3398      	adds	r3, #152	; 0x98
 8006242:	443b      	add	r3, r7
 8006244:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8006248:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800624c:	3302      	adds	r3, #2
 800624e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006256:	3301      	adds	r3, #1
 8006258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800625c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006260:	789b      	ldrb	r3, [r3, #2]
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006268:	4293      	cmp	r3, r2
 800626a:	dbdd      	blt.n	8006228 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800626c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b298      	uxth	r0, r3
 8006274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006278:	789b      	ldrb	r3, [r3, #2]
 800627a:	f107 0208 	add.w	r2, r7, #8
 800627e:	4619      	mov	r1, r3
 8006280:	f000 fd49 	bl	8006d16 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8006284:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8006288:	4618      	mov	r0, r3
 800628a:	3798      	adds	r7, #152	; 0x98
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	885b      	ldrh	r3, [r3, #2]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f000 fd3f 	bl	8006d32 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fd3a 	bl	8006d4e <aci_gatt_server_confirmation_event>

  return status;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b298      	uxth	r0, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	885b      	ldrh	r3, [r3, #2]
 80062fe:	b299      	uxth	r1, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	889b      	ldrh	r3, [r3, #4]
 8006304:	b29a      	uxth	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4623      	mov	r3, r4
 8006312:	f000 fd27 	bl	8006d64 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	bd90      	pop	{r4, r7, pc}

08006320 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8006320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006322:	b08b      	sub	sp, #44	; 0x2c
 8006324:	af06      	add	r7, sp, #24
 8006326:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	781d      	ldrb	r5, [r3, #0]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800633a:	b29e      	uxth	r6, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8006352:	b292      	uxth	r2, r2
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800635a:	b289      	uxth	r1, r1
 800635c:	68b8      	ldr	r0, [r7, #8]
 800635e:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8006362:	b280      	uxth	r0, r0
 8006364:	68bc      	ldr	r4, [r7, #8]
 8006366:	7c64      	ldrb	r4, [r4, #17]
 8006368:	9404      	str	r4, [sp, #16]
 800636a:	9003      	str	r0, [sp, #12]
 800636c:	9102      	str	r1, [sp, #8]
 800636e:	9201      	str	r2, [sp, #4]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4673      	mov	r3, lr
 8006374:	4662      	mov	r2, ip
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	f7fb f861 	bl	8001440 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006388 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0a4      	sub	sp, #144	; 0x90
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80063a2:	2300      	movs	r3, #0
 80063a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063a8:	e0b3      	b.n	8006512 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80063aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80063ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	440b      	add	r3, r1
 80063be:	3301      	adds	r3, #1
 80063c0:	7819      	ldrb	r1, [r3, #0]
 80063c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	3390      	adds	r3, #144	; 0x90
 80063d0:	443b      	add	r3, r7
 80063d2:	3b88      	subs	r3, #136	; 0x88
 80063d4:	460a      	mov	r2, r1
 80063d6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80063d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80063dc:	3301      	adds	r3, #1
 80063de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80063e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80063e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	4413      	add	r3, r2
 80063f4:	440b      	add	r3, r1
 80063f6:	3302      	adds	r3, #2
 80063f8:	7819      	ldrb	r1, [r3, #0]
 80063fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3390      	adds	r3, #144	; 0x90
 8006408:	443b      	add	r3, r7
 800640a:	3b87      	subs	r3, #135	; 0x87
 800640c:	460a      	mov	r2, r1
 800640e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006410:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006414:	3301      	adds	r3, #1
 8006416:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800641a:	f107 0108 	add.w	r1, r7, #8
 800641e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	1c98      	adds	r0, r3, #2
 800642e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006440:	4413      	add	r3, r2
 8006442:	3303      	adds	r3, #3
 8006444:	2206      	movs	r2, #6
 8006446:	4619      	mov	r1, r3
 8006448:	f002 fe54 	bl	80090f4 <memcpy>
    size += 6;
 800644c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006450:	3306      	adds	r3, #6
 8006452:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8006456:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800645a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	440b      	add	r3, r1
 800646a:	3309      	adds	r3, #9
 800646c:	7819      	ldrb	r1, [r3, #0]
 800646e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	3390      	adds	r3, #144	; 0x90
 800647c:	443b      	add	r3, r7
 800647e:	3b80      	subs	r3, #128	; 0x80
 8006480:	460a      	mov	r2, r1
 8006482:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006484:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006488:	3301      	adds	r3, #1
 800648a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800648e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	3308      	adds	r3, #8
 800649e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064a2:	4413      	add	r3, r2
 80064a4:	1c99      	adds	r1, r3, #2
 80064a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	3390      	adds	r3, #144	; 0x90
 80064b4:	443b      	add	r3, r7
 80064b6:	3b7c      	subs	r3, #124	; 0x7c
 80064b8:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 80064ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80064be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	440b      	add	r3, r1
 80064ce:	3309      	adds	r3, #9
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80064d6:	4413      	add	r3, r2
 80064d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 80064dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b259      	sxtb	r1, r3
 80064e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	3390      	adds	r3, #144	; 0x90
 80064f6:	443b      	add	r3, r7
 80064f8:	3b78      	subs	r3, #120	; 0x78
 80064fa:	460a      	mov	r2, r1
 80064fc:	701a      	strb	r2, [r3, #0]
    size += 1;
 80064fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006502:	3301      	adds	r3, #1
 8006504:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8006508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800650c:	3301      	adds	r3, #1
 800650e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800651e:	4293      	cmp	r3, r2
 8006520:	f6ff af43 	blt.w	80063aa <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8006524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f107 0208 	add.w	r2, r7, #8
 800652e:	4611      	mov	r1, r2
 8006530:	4618      	mov	r0, r3
 8006532:	f000 f9e3 	bl	80068fc <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8006536:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800653a:	4618      	mov	r0, r3
 800653c:	3790      	adds	r7, #144	; 0x90
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8006542:	b590      	push	{r4, r7, lr}
 8006544:	b087      	sub	sp, #28
 8006546:	af02      	add	r7, sp, #8
 8006548:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7818      	ldrb	r0, [r3, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800655c:	b299      	uxth	r1, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006564:	b29a      	uxth	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800656c:	b29c      	uxth	r4, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006574:	b29b      	uxth	r3, r3
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4623      	mov	r3, r4
 800657a:	f000 f9cb 	bl	8006914 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bd90      	pop	{r4, r7, pc}

08006588 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	7818      	ldrb	r0, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80065a2:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80065a8:	461a      	mov	r2, r3
 80065aa:	f000 f9c7 	bl	800693c <hci_le_read_remote_used_features_complete_event>

  return status;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	895b      	ldrh	r3, [r3, #10]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	f000 f9bd 	bl	8006958 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b298      	uxth	r0, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	885b      	ldrh	r3, [r3, #2]
 8006602:	b299      	uxth	r1, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	889b      	ldrh	r3, [r3, #4]
 8006608:	b29a      	uxth	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	88db      	ldrh	r3, [r3, #6]
 800660e:	b29c      	uxth	r4, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	891b      	ldrh	r3, [r3, #8]
 8006614:	b29b      	uxth	r3, r3
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4623      	mov	r3, r4
 800661a:	f000 f9ab 	bl	8006974 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	bd90      	pop	{r4, r7, pc}

08006628 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f000 f9aa 	bl	800699c <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 f9a1 	bl	80069b4 <hci_le_generate_dhkey_complete_event>

  return status;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800667c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006680:	b08d      	sub	sp, #52	; 0x34
 8006682:	af08      	add	r7, sp, #32
 8006684:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f893 c000 	ldrb.w	ip, [r3]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800669a:	fa1f fe83 	uxth.w	lr, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f893 8003 	ldrb.w	r8, [r3, #3]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80066b6:	68b8      	ldr	r0, [r7, #8]
 80066b8:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 80066bc:	b280      	uxth	r0, r0
 80066be:	68bc      	ldr	r4, [r7, #8]
 80066c0:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 80066c4:	b2a4      	uxth	r4, r4
 80066c6:	68bd      	ldr	r5, [r7, #8]
 80066c8:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80066cc:	b2ad      	uxth	r5, r5
 80066ce:	68be      	ldr	r6, [r7, #8]
 80066d0:	7f76      	ldrb	r6, [r6, #29]
 80066d2:	9606      	str	r6, [sp, #24]
 80066d4:	9505      	str	r5, [sp, #20]
 80066d6:	9404      	str	r4, [sp, #16]
 80066d8:	9003      	str	r0, [sp, #12]
 80066da:	9102      	str	r1, [sp, #8]
 80066dc:	9201      	str	r2, [sp, #4]
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	464b      	mov	r3, r9
 80066e2:	4642      	mov	r2, r8
 80066e4:	4671      	mov	r1, lr
 80066e6:	4660      	mov	r0, ip
 80066e8:	f000 f970 	bl	80069cc <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080066f8 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b0a6      	sub	sp, #152	; 0x98
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006700:	2300      	movs	r3, #0
 8006702:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006718:	e085      	b.n	8006826 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800671a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800671e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	4413      	add	r3, r2
 8006726:	3301      	adds	r3, #1
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	3398      	adds	r3, #152	; 0x98
 8006732:	443b      	add	r3, r7
 8006734:	3b90      	subs	r3, #144	; 0x90
 8006736:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006738:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800673c:	3301      	adds	r3, #1
 800673e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8006742:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	4413      	add	r3, r2
 800674e:	3302      	adds	r3, #2
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	3398      	adds	r3, #152	; 0x98
 800675a:	443b      	add	r3, r7
 800675c:	3b8f      	subs	r3, #143	; 0x8f
 800675e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006760:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006764:	3301      	adds	r3, #1
 8006766:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800676a:	f107 0208 	add.w	r2, r7, #8
 800676e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	4413      	add	r3, r2
 8006776:	1c98      	adds	r0, r3, #2
 8006778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006782:	4413      	add	r3, r2
 8006784:	3303      	adds	r3, #3
 8006786:	2206      	movs	r2, #6
 8006788:	4619      	mov	r1, r3
 800678a:	f002 fcb3 	bl	80090f4 <memcpy>
    size += 6;
 800678e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006792:	3306      	adds	r3, #6
 8006794:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8006798:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800679c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4413      	add	r3, r2
 80067a4:	3309      	adds	r3, #9
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	3398      	adds	r3, #152	; 0x98
 80067b0:	443b      	add	r3, r7
 80067b2:	3b88      	subs	r3, #136	; 0x88
 80067b4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80067b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80067ba:	3301      	adds	r3, #1
 80067bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80067c0:	f107 0208 	add.w	r2, r7, #8
 80067c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	3308      	adds	r3, #8
 80067cc:	4413      	add	r3, r2
 80067ce:	1c58      	adds	r0, r3, #1
 80067d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	3308      	adds	r3, #8
 80067d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80067dc:	4413      	add	r3, r2
 80067de:	3302      	adds	r3, #2
 80067e0:	2206      	movs	r2, #6
 80067e2:	4619      	mov	r1, r3
 80067e4:	f002 fc86 	bl	80090f4 <memcpy>
    size += 6;
 80067e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80067ec:	3306      	adds	r3, #6
 80067ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80067f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80067f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	3310      	adds	r3, #16
 8006800:	f993 2000 	ldrsb.w	r2, [r3]
 8006804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3398      	adds	r3, #152	; 0x98
 800680c:	443b      	add	r3, r7
 800680e:	3b81      	subs	r3, #129	; 0x81
 8006810:	701a      	strb	r2, [r3, #0]
    size += 1;
 8006812:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006816:	3301      	adds	r3, #1
 8006818:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800681c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006820:	3301      	adds	r3, #1
 8006822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006832:	4293      	cmp	r3, r2
 8006834:	f6ff af71 	blt.w	800671a <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8006838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f107 0208 	add.w	r2, r7, #8
 8006842:	4611      	mov	r1, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f8d5 	bl	80069f4 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800684a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800684e:	4618      	mov	r0, r3
 8006850:	3798      	adds	r7, #152	; 0x98
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	4603      	mov	r3, r0
 800685e:	71fb      	strb	r3, [r7, #7]
 8006860:	460b      	mov	r3, r1
 8006862:	80bb      	strh	r3, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8006874:	b490      	push	{r4, r7}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	4611      	mov	r1, r2
 8006880:	461a      	mov	r2, r3
 8006882:	4623      	mov	r3, r4
 8006884:	71fb      	strb	r3, [r7, #7]
 8006886:	4603      	mov	r3, r0
 8006888:	80bb      	strh	r3, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	71bb      	strb	r3, [r7, #6]
 800688e:	4613      	mov	r3, r2
 8006890:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bc90      	pop	{r4, r7}
 800689a:	4770      	bx	lr

0800689c <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	4603      	mov	r3, r0
 80068ba:	6039      	str	r1, [r7, #0]
 80068bc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	4603      	mov	r3, r0
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	460a      	mov	r2, r1
 80068ea:	71fb      	strb	r3, [r7, #7]
 80068ec:	4613      	mov	r3, r2
 80068ee:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8006914:	b490      	push	{r4, r7}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	461a      	mov	r2, r3
 8006922:	4623      	mov	r3, r4
 8006924:	71fb      	strb	r3, [r7, #7]
 8006926:	4603      	mov	r3, r0
 8006928:	80bb      	strh	r3, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	807b      	strh	r3, [r7, #2]
 800692e:	4613      	mov	r3, r2
 8006930:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bc90      	pop	{r4, r7}
 800693a:	4770      	bx	lr

0800693c <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	603a      	str	r2, [r7, #0]
 8006946:	71fb      	strb	r3, [r7, #7]
 8006948:	460b      	mov	r3, r1
 800694a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	80fb      	strh	r3, [r7, #6]
 8006964:	4613      	mov	r3, r2
 8006966:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8006974:	b490      	push	{r4, r7}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	4611      	mov	r1, r2
 8006980:	461a      	mov	r2, r3
 8006982:	4623      	mov	r3, r4
 8006984:	80fb      	strh	r3, [r7, #6]
 8006986:	4603      	mov	r3, r0
 8006988:	80bb      	strh	r3, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	807b      	strh	r3, [r7, #2]
 800698e:	4613      	mov	r3, r2
 8006990:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bc90      	pop	{r4, r7}
 800699a:	4770      	bx	lr

0800699c <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	6039      	str	r1, [r7, #0]
 80069a6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 80069cc:	b490      	push	{r4, r7}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	4623      	mov	r3, r4
 80069dc:	71fb      	strb	r3, [r7, #7]
 80069de:	4603      	mov	r3, r0
 80069e0:	80bb      	strh	r3, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	71bb      	strb	r3, [r7, #6]
 80069e6:	4613      	mov	r3, r2
 80069e8:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc90      	pop	{r4, r7}
 80069f2:	4770      	bx	lr

080069f4 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	6039      	str	r1, [r7, #0]
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4603      	mov	r3, r0
 8006a22:	80fb      	strh	r3, [r7, #6]
 8006a24:	460b      	mov	r3, r1
 8006a26:	717b      	strb	r3, [r7, #5]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	4603      	mov	r3, r0
 8006a56:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8006a72:	b480      	push	{r7}
 8006a74:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4603      	mov	r3, r0
 8006a8a:	71fb      	strb	r3, [r7, #7]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	71bb      	strb	r3, [r7, #6]
 8006a90:	4613      	mov	r3, r2
 8006a92:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	4603      	mov	r3, r0
 8006abe:	6039      	str	r1, [r7, #0]
 8006ac0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	80fb      	strh	r3, [r7, #6]
 8006ada:	4613      	mov	r3, r2
 8006adc:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 8006aea:	b490      	push	{r4, r7}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4604      	mov	r4, r0
 8006af2:	4608      	mov	r0, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	461a      	mov	r2, r3
 8006af8:	4623      	mov	r3, r4
 8006afa:	80fb      	strh	r3, [r7, #6]
 8006afc:	4603      	mov	r3, r0
 8006afe:	80bb      	strh	r3, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	807b      	strh	r3, [r7, #2]
 8006b04:	4613      	mov	r3, r2
 8006b06:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc90      	pop	{r4, r7}
 8006b10:	4770      	bx	lr

08006b12 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	4603      	mov	r3, r0
 8006b1a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	460a      	mov	r2, r1
 8006b32:	80fb      	strh	r3, [r7, #6]
 8006b34:	4613      	mov	r3, r2
 8006b36:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	80fb      	strh	r3, [r7, #6]
 8006b50:	460b      	mov	r3, r1
 8006b52:	717b      	strb	r3, [r7, #5]
 8006b54:	4613      	mov	r3, r2
 8006b56:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	603a      	str	r2, [r7, #0]
 8006b6e:	80fb      	strh	r3, [r7, #6]
 8006b70:	460b      	mov	r3, r1
 8006b72:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	80fb      	strh	r3, [r7, #6]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	717b      	strb	r3, [r7, #5]
 8006b90:	4613      	mov	r3, r2
 8006b92:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	603a      	str	r2, [r7, #0]
 8006baa:	80fb      	strh	r3, [r7, #6]
 8006bac:	460b      	mov	r3, r1
 8006bae:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	603a      	str	r2, [r7, #0]
 8006bc6:	80fb      	strh	r3, [r7, #6]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	603a      	str	r2, [r7, #0]
 8006be2:	80fb      	strh	r3, [r7, #6]
 8006be4:	460b      	mov	r3, r1
 8006be6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	80fb      	strh	r3, [r7, #6]
 8006c00:	460b      	mov	r3, r1
 8006c02:	717b      	strb	r3, [r7, #5]
 8006c04:	4613      	mov	r3, r2
 8006c06:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8006c14:	b490      	push	{r4, r7}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	461a      	mov	r2, r3
 8006c22:	4623      	mov	r3, r4
 8006c24:	80fb      	strh	r3, [r7, #6]
 8006c26:	4603      	mov	r3, r0
 8006c28:	80bb      	strh	r3, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	807b      	strh	r3, [r7, #2]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc90      	pop	{r4, r7}
 8006c3a:	4770      	bx	lr

08006c3c <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	81fb      	strh	r3, [r7, #14]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	81bb      	strh	r3, [r7, #12]
 8006c62:	4613      	mov	r3, r2
 8006c64:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8006c66:	bf00      	nop
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	81fb      	strh	r3, [r7, #14]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	81bb      	strh	r3, [r7, #12]
 8006c82:	4613      	mov	r3, r2
 8006c84:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	4603      	mov	r3, r0
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	80fb      	strh	r3, [r7, #6]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8006cae:	b490      	push	{r4, r7}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	4608      	mov	r0, r1
 8006cb8:	4611      	mov	r1, r2
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	80fb      	strh	r3, [r7, #6]
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	717b      	strb	r3, [r7, #5]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	807b      	strh	r3, [r7, #2]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc90      	pop	{r4, r7}
 8006cd4:	4770      	bx	lr

08006cd6 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	607b      	str	r3, [r7, #4]
 8006cde:	4603      	mov	r3, r0
 8006ce0:	81fb      	strh	r3, [r7, #14]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	81bb      	strh	r3, [r7, #12]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	81fb      	strh	r3, [r7, #14]
 8006d02:	460b      	mov	r3, r1
 8006d04:	81bb      	strh	r3, [r7, #12]
 8006d06:	4613      	mov	r3, r2
 8006d08:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	603a      	str	r2, [r7, #0]
 8006d20:	80fb      	strh	r3, [r7, #6]
 8006d22:	460b      	mov	r3, r1
 8006d24:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	4603      	mov	r3, r0
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	80fb      	strh	r3, [r7, #6]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	4603      	mov	r3, r0
 8006d56:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8006d64:	b490      	push	{r4, r7}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4623      	mov	r3, r4
 8006d74:	80fb      	strh	r3, [r7, #6]
 8006d76:	4603      	mov	r3, r0
 8006d78:	80bb      	strh	r3, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	807b      	strh	r3, [r7, #2]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc90      	pop	{r4, r7}
 8006d8a:	4770      	bx	lr

08006d8c <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	460a      	mov	r2, r1
 8006d96:	80fb      	strh	r3, [r7, #6]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	603a      	str	r2, [r7, #0]
 8006db2:	80fb      	strh	r3, [r7, #6]
 8006db4:	460b      	mov	r3, r1
 8006db6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8006dc4:	b490      	push	{r4, r7}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	80fb      	strh	r3, [r7, #6]
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	717b      	strb	r3, [r7, #5]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	807b      	strh	r3, [r7, #2]
 8006dde:	4613      	mov	r3, r2
 8006de0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc90      	pop	{r4, r7}
 8006dea:	4770      	bx	lr

08006dec <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8006dec:	b490      	push	{r4, r7}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	80fb      	strh	r3, [r7, #6]
 8006dfe:	4603      	mov	r3, r0
 8006e00:	717b      	strb	r3, [r7, #5]
 8006e02:	460b      	mov	r3, r1
 8006e04:	807b      	strh	r3, [r7, #2]
 8006e06:	4613      	mov	r3, r2
 8006e08:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc90      	pop	{r4, r7}
 8006e12:	4770      	bx	lr

08006e14 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8006e4e:	bf00      	nop
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	4603      	mov	r3, r0
 8006e62:	603a      	str	r2, [r7, #0]
 8006e64:	71fb      	strb	r3, [r7, #7]
 8006e66:	460b      	mov	r3, r1
 8006e68:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	603a      	str	r2, [r7, #0]
 8006e80:	71fb      	strb	r3, [r7, #7]
 8006e82:	460b      	mov	r3, r1
 8006e84:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	4603      	mov	r3, r0
 8006e9a:	603a      	str	r2, [r7, #0]
 8006e9c:	71fb      	strb	r3, [r7, #7]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006eb8:	f107 0308 	add.w	r3, r7, #8
 8006ebc:	2218      	movs	r2, #24
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 f925 	bl	8009110 <memset>
  rq.ogf = 0x03;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006ece:	1dfb      	adds	r3, r7, #7
 8006ed0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fe61 	bl	8007ba4 <hci_send_req>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da01      	bge.n	8006eec <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006ee8:	23ff      	movs	r3, #255	; 0xff
 8006eea:	e005      	b.n	8006ef8 <hci_reset+0x4a>
  if (status) {
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <hci_reset+0x48>
    return status;
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	e000      	b.n	8006ef8 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8006f00:	b5b0      	push	{r4, r5, r7, lr}
 8006f02:	b0ce      	sub	sp, #312	; 0x138
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4605      	mov	r5, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f12:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006f16:	462a      	mov	r2, r5
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f22:	4622      	mov	r2, r4
 8006f24:	801a      	strh	r2, [r3, #0]
 8006f26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f2a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006f2e:	4602      	mov	r2, r0
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f36:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006f3a:	460a      	mov	r2, r1
 8006f3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006f3e:	f107 030c 	add.w	r3, r7, #12
 8006f42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006f46:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	f107 020c 	add.w	r2, r7, #12
 8006f50:	4413      	add	r3, r2
 8006f52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006f56:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f5a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006f5e:	4413      	add	r3, r2
 8006f60:	3309      	adds	r3, #9
 8006f62:	f107 020c 	add.w	r2, r7, #12
 8006f66:	4413      	add	r3, r2
 8006f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f70:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8006f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f82:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f86:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f8e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006f92:	3301      	adds	r3, #1
 8006f94:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8006f98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f9c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fa0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006fa4:	8812      	ldrh	r2, [r2, #0]
 8006fa6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006faa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006fae:	3302      	adds	r3, #2
 8006fb0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8006fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fb8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fbc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006fc0:	8812      	ldrh	r2, [r2, #0]
 8006fc2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006fc6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006fca:	3302      	adds	r3, #2
 8006fcc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8006fd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fd4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fd8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006fe0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8006fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fee:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006ff2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006ff4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8006ffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007002:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007006:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007008:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800700c:	3301      	adds	r3, #1
 800700e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8007012:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007016:	3308      	adds	r3, #8
 8007018:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800701c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007020:	4618      	mov	r0, r3
 8007022:	f002 f867 	bl	80090f4 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8007026:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800702a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800702e:	4413      	add	r3, r2
 8007030:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8007034:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007038:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800703c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800703e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007042:	3301      	adds	r3, #1
 8007044:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8007048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800704c:	3301      	adds	r3, #1
 800704e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007052:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007056:	4618      	mov	r0, r3
 8007058:	f002 f84c 	bl	80090f4 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800705c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007060:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007064:	4413      	add	r3, r2
 8007066:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800706a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007072:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007074:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007078:	3302      	adds	r3, #2
 800707a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800707e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007082:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007086:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007088:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800708c:	3302      	adds	r3, #2
 800708e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007096:	2218      	movs	r2, #24
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f002 f838 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 80070a0:	233f      	movs	r3, #63	; 0x3f
 80070a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80070a6:	2383      	movs	r3, #131	; 0x83
 80070a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070ac:	f107 030c 	add.w	r3, r7, #12
 80070b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80070b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80070bc:	f107 030b 	add.w	r3, r7, #11
 80070c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80070ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fd67 	bl	8007ba4 <hci_send_req>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da01      	bge.n	80070e0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80070dc:	23ff      	movs	r3, #255	; 0xff
 80070de:	e00d      	b.n	80070fc <aci_gap_set_discoverable+0x1fc>
  if (status) {
 80070e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80070e4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <aci_gap_set_discoverable+0x1fa>
    return status;
 80070ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80070f2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	e000      	b.n	80070fc <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007102:	46bd      	mov	sp, r7
 8007104:	bdb0      	pop	{r4, r5, r7, pc}

08007106 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8007106:	b590      	push	{r4, r7, lr}
 8007108:	b0cf      	sub	sp, #316	; 0x13c
 800710a:	af00      	add	r7, sp, #0
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007116:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007120:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007124:	4622      	mov	r2, r4
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800712c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007130:	4602      	mov	r2, r0
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007138:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800713c:	460a      	mov	r2, r1
 800713e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007140:	f107 0314 	add.w	r3, r7, #20
 8007144:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007148:	f107 030c 	add.w	r3, r7, #12
 800714c:	2207      	movs	r2, #7
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f001 ffdd 	bl	8009110 <memset>
  uint8_t index_input = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 800715c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007160:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007164:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800716c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007170:	3301      	adds	r3, #1
 8007172:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8007176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800717a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800717e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007186:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800718a:	3301      	adds	r3, #1
 800718c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8007190:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007194:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007198:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80071a0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80071a4:	3301      	adds	r3, #1
 80071a6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80071aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071ae:	2218      	movs	r2, #24
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 ffac 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 80071b8:	233f      	movs	r3, #63	; 0x3f
 80071ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 80071be:	238a      	movs	r3, #138	; 0x8a
 80071c0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80071cc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80071d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80071dc:	2307      	movs	r3, #7
 80071de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80071e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071e6:	2100      	movs	r1, #0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fcdb 	bl	8007ba4 <hci_send_req>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da01      	bge.n	80071f8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80071f4:	23ff      	movs	r3, #255	; 0xff
 80071f6:	e02e      	b.n	8007256 <aci_gap_init+0x150>
  if (resp.Status) {
 80071f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <aci_gap_init+0x10c>
    return resp.Status;
 8007206:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800720a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	e021      	b.n	8007256 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8007212:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800721a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800721e:	b29a      	uxth	r2, r3
 8007220:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007224:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800722c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007234:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007238:	b29a      	uxth	r2, r3
 800723a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800723e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8007240:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007248:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800724c:	b29a      	uxth	r2, r3
 800724e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007252:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800725c:	46bd      	mov	sp, r7
 800725e:	bd90      	pop	{r4, r7, pc}

08007260 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800726a:	f107 0308 	add.w	r3, r7, #8
 800726e:	2218      	movs	r2, #24
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f001 ff4c 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 8007278:	233f      	movs	r3, #63	; 0x3f
 800727a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800727c:	f240 1301 	movw	r3, #257	; 0x101
 8007280:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007282:	1dfb      	adds	r3, r7, #7
 8007284:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fc87 	bl	8007ba4 <hci_send_req>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	da01      	bge.n	80072a0 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800729c:	23ff      	movs	r3, #255	; 0xff
 800729e:	e005      	b.n	80072ac <aci_gatt_init+0x4c>
  if (status) {
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <aci_gatt_init+0x4a>
    return status;
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	e000      	b.n	80072ac <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b0cf      	sub	sp, #316	; 0x13c
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4604      	mov	r4, r0
 80072bc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80072c0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80072c4:	6001      	str	r1, [r0, #0]
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072ce:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80072d2:	4622      	mov	r2, r4
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072da:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80072de:	4602      	mov	r2, r0
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072e6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80072ea:	460a      	mov	r2, r1
 80072ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80072f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072fa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d00a      	beq.n	800731a <aci_gatt_add_service+0x66>
 8007304:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007308:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d101      	bne.n	8007316 <aci_gatt_add_service+0x62>
 8007312:	2311      	movs	r3, #17
 8007314:	e002      	b.n	800731c <aci_gatt_add_service+0x68>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <aci_gatt_add_service+0x68>
 800731a:	2303      	movs	r3, #3
 800731c:	f107 020c 	add.w	r2, r7, #12
 8007320:	4413      	add	r3, r2
 8007322:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	2203      	movs	r2, #3
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f001 feee 	bl	8009110 <memset>
  uint8_t index_input = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800733a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800733e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007342:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800734a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800734e:	3301      	adds	r3, #1
 8007350:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8007354:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007358:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d002      	beq.n	8007368 <aci_gatt_add_service+0xb4>
 8007362:	2b02      	cmp	r3, #2
 8007364:	d004      	beq.n	8007370 <aci_gatt_add_service+0xbc>
 8007366:	e007      	b.n	8007378 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8007368:	2302      	movs	r3, #2
 800736a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800736e:	e005      	b.n	800737c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007370:	2310      	movs	r3, #16
 8007372:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007376:	e001      	b.n	800737c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007378:	2347      	movs	r3, #71	; 0x47
 800737a:	e06c      	b.n	8007456 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800737c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007380:	1c58      	adds	r0, r3, #1
 8007382:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007386:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800738a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800738e:	6819      	ldr	r1, [r3, #0]
 8007390:	f001 feb0 	bl	80090f4 <memcpy>
    index_input += size;
 8007394:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007398:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800739c:	4413      	add	r3, r2
 800739e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073aa:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80073ae:	7812      	ldrb	r2, [r2, #0]
 80073b0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80073b2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073b6:	3301      	adds	r3, #1
 80073b8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073c4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80073c8:	7812      	ldrb	r2, [r2, #0]
 80073ca:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80073cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073d0:	3301      	adds	r3, #1
 80073d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80073d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073da:	2218      	movs	r2, #24
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fe96 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 80073e4:	233f      	movs	r3, #63	; 0x3f
 80073e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80073ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 80073ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80073fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800740a:	2303      	movs	r3, #3
 800740c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007410:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fbc4 	bl	8007ba4 <hci_send_req>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	da01      	bge.n	8007426 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007422:	23ff      	movs	r3, #255	; 0xff
 8007424:	e017      	b.n	8007456 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8007426:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800742a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007434:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	e00a      	b.n	8007456 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8007440:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007448:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007452:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800745c:	46bd      	mov	sp, r7
 800745e:	bd90      	pop	{r4, r7, pc}

08007460 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8007460:	b590      	push	{r4, r7, lr}
 8007462:	b0d1      	sub	sp, #324	; 0x144
 8007464:	af00      	add	r7, sp, #0
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800746e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007472:	600a      	str	r2, [r1, #0]
 8007474:	4619      	mov	r1, r3
 8007476:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800747a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800747e:	4622      	mov	r2, r4
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007486:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800748a:	4602      	mov	r2, r0
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007492:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007496:	460a      	mov	r2, r1
 8007498:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800749a:	f107 0314 	add.w	r3, r7, #20
 800749e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80074a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074a6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d00a      	beq.n	80074c6 <aci_gatt_add_char+0x66>
 80074b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074b4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d101      	bne.n	80074c2 <aci_gatt_add_char+0x62>
 80074be:	2313      	movs	r3, #19
 80074c0:	e002      	b.n	80074c8 <aci_gatt_add_char+0x68>
 80074c2:	2303      	movs	r3, #3
 80074c4:	e000      	b.n	80074c8 <aci_gatt_add_char+0x68>
 80074c6:	2305      	movs	r3, #5
 80074c8:	f107 0214 	add.w	r2, r7, #20
 80074cc:	4413      	add	r3, r2
 80074ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	2203      	movs	r2, #3
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fe18 	bl	8009110 <memset>
  uint8_t index_input = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80074e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80074ea:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80074ee:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80074f2:	8812      	ldrh	r2, [r2, #0]
 80074f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80074f6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80074fa:	3302      	adds	r3, #2
 80074fc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8007500:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007504:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007508:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800750c:	7812      	ldrb	r2, [r2, #0]
 800750e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007510:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007514:	3301      	adds	r3, #1
 8007516:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800751a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800751e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d002      	beq.n	800752e <aci_gatt_add_char+0xce>
 8007528:	2b02      	cmp	r3, #2
 800752a:	d004      	beq.n	8007536 <aci_gatt_add_char+0xd6>
 800752c:	e007      	b.n	800753e <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 800752e:	2302      	movs	r3, #2
 8007530:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007534:	e005      	b.n	8007542 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007536:	2310      	movs	r3, #16
 8007538:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800753c:	e001      	b.n	8007542 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800753e:	2347      	movs	r3, #71	; 0x47
 8007540:	e091      	b.n	8007666 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8007542:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007546:	1cd8      	adds	r0, r3, #3
 8007548:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800754c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007550:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007554:	6819      	ldr	r1, [r3, #0]
 8007556:	f001 fdcd 	bl	80090f4 <memcpy>
    index_input += size;
 800755a:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800755e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007562:	4413      	add	r3, r2
 8007564:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8007568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800756c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007570:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007578:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800757c:	3302      	adds	r3, #2
 800757e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8007582:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007586:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800758a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800758c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8007590:	3301      	adds	r3, #1
 8007592:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8007596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800759a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800759e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80075a0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80075a4:	3301      	adds	r3, #1
 80075a6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80075aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075ae:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80075b2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80075b4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80075b8:	3301      	adds	r3, #1
 80075ba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80075be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075c2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80075c6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80075c8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80075cc:	3301      	adds	r3, #1
 80075ce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80075d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075d6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80075da:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80075dc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80075e0:	3301      	adds	r3, #1
 80075e2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80075e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075ea:	2218      	movs	r2, #24
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 fd8e 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 80075f4:	233f      	movs	r3, #63	; 0x3f
 80075f6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80075fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80075fe:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007602:	f107 0314 	add.w	r3, r7, #20
 8007606:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800760a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800760e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007612:	f107 0310 	add.w	r3, r7, #16
 8007616:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800761a:	2303      	movs	r3, #3
 800761c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8007620:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fabc 	bl	8007ba4 <hci_send_req>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	da01      	bge.n	8007636 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007632:	23ff      	movs	r3, #255	; 0xff
 8007634:	e017      	b.n	8007666 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8007636:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800763a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007644:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	e00a      	b.n	8007666 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8007650:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007658:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800765c:	b29a      	uxth	r2, r3
 800765e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007662:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800766c:	46bd      	mov	sp, r7
 800766e:	bd90      	pop	{r4, r7, pc}

08007670 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8007670:	b5b0      	push	{r4, r5, r7, lr}
 8007672:	b0cc      	sub	sp, #304	; 0x130
 8007674:	af00      	add	r7, sp, #0
 8007676:	4605      	mov	r5, r0
 8007678:	460c      	mov	r4, r1
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007686:	462a      	mov	r2, r5
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007692:	4622      	mov	r2, r4
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800769e:	4602      	mov	r2, r0
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80076aa:	460a      	mov	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80076ae:	f107 030c 	add.w	r3, r7, #12
 80076b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076d0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80076d4:	8812      	ldrh	r2, [r2, #0]
 80076d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076d8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80076dc:	3302      	adds	r3, #2
 80076de:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80076e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80076ee:	8812      	ldrh	r2, [r2, #0]
 80076f0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80076f2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80076f6:	3302      	adds	r3, #2
 80076f8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007704:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800770c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007710:	3301      	adds	r3, #1
 8007712:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8007716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800771e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007726:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800772a:	3301      	adds	r3, #1
 800772c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8007730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007734:	1d98      	adds	r0, r3, #6
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007746:	f001 fcd5 	bl	80090f4 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800774a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007752:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	4413      	add	r3, r2
 800775a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800775e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007762:	2218      	movs	r2, #24
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f001 fcd2 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 800776c:	233f      	movs	r3, #63	; 0x3f
 800776e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007772:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007776:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800777a:	f107 030c 	add.w	r3, r7, #12
 800777e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007782:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800778a:	f107 030b 	add.w	r3, r7, #11
 800778e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007792:	2301      	movs	r3, #1
 8007794:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fa00 	bl	8007ba4 <hci_send_req>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da01      	bge.n	80077ae <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80077aa:	23ff      	movs	r3, #255	; 0xff
 80077ac:	e00d      	b.n	80077ca <aci_gatt_update_char_value+0x15a>
  if (status) {
 80077ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <aci_gatt_update_char_value+0x158>
    return status;
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	e000      	b.n	80077ca <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bdb0      	pop	{r4, r5, r7, pc}

080077d4 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b0cc      	sub	sp, #304	; 0x130
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4602      	mov	r2, r0
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80077e4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80077e6:	f107 030c 	add.w	r3, r7, #12
 80077ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80077ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007804:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007808:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800780c:	8812      	ldrh	r2, [r2, #0]
 800780e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007810:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007814:	3302      	adds	r3, #2
 8007816:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800781a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800781e:	2218      	movs	r2, #24
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f001 fc74 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 8007828:	233f      	movs	r3, #63	; 0x3f
 800782a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 800782e:	f240 1327 	movw	r3, #295	; 0x127
 8007832:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007836:	f107 030c 	add.w	r3, r7, #12
 800783a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800783e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007842:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007846:	f107 030b 	add.w	r3, r7, #11
 800784a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007854:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007858:	2100      	movs	r1, #0
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f9a2 	bl	8007ba4 <hci_send_req>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	da01      	bge.n	800786a <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8007866:	23ff      	movs	r3, #255	; 0xff
 8007868:	e00d      	b.n	8007886 <aci_gatt_allow_read+0xb2>
  if (status) {
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <aci_gatt_allow_read+0xb0>
    return status;
 8007878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	e000      	b.n	8007886 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b0cc      	sub	sp, #304	; 0x130
 8007894:	af00      	add	r7, sp, #0
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80078a8:	4602      	mov	r2, r0
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078b4:	460a      	mov	r2, r1
 80078b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 80078d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078da:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80078de:	7812      	ldrb	r2, [r2, #0]
 80078e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80078e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80078e6:	3301      	adds	r3, #1
 80078e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 80078ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078f4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80078f8:	7812      	ldrb	r2, [r2, #0]
 80078fa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80078fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8007900:	3301      	adds	r3, #1
 8007902:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8007906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790a:	1c98      	adds	r0, r3, #2
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	f001 fbe8 	bl	80090f4 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800792c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	4413      	add	r3, r2
 8007934:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800793c:	2218      	movs	r2, #24
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fbe5 	bl	8009110 <memset>
  rq.ogf = 0x3f;
 8007946:	233f      	movs	r3, #63	; 0x3f
 8007948:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800794c:	230c      	movs	r3, #12
 800794e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007952:	f107 030c 	add.w	r3, r7, #12
 8007956:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800795a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800795e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007962:	f107 030b 	add.w	r3, r7, #11
 8007966:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f914 	bl	8007ba4 <hci_send_req>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	da01      	bge.n	8007986 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007982:	23ff      	movs	r3, #255	; 0xff
 8007984:	e00d      	b.n	80079a2 <aci_hal_write_config_data+0x112>
  if (status) {
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <aci_hal_write_config_data+0x110>
    return status;
 8007994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007998:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	e000      	b.n	80079a2 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3308      	adds	r3, #8
 80079b8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d001      	beq.n	80079c6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80079c2:	2301      	movs	r3, #1
 80079c4:	e00c      	b.n	80079e0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3302      	adds	r3, #2
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80079d4:	3b03      	subs	r3, #3
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d001      	beq.n	80079de <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80079da:	2302      	movs	r3, #2
 80079dc:	e000      	b.n	80079e0 <verify_packet+0x34>
  
  return 0;      
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b0a6      	sub	sp, #152	; 0x98
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	4603      	mov	r3, r0
 80079f6:	81fb      	strh	r3, [r7, #14]
 80079f8:	460b      	mov	r3, r1
 80079fa:	81bb      	strh	r3, [r7, #12]
 80079fc:	4613      	mov	r3, r2
 80079fe:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8007a00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a08:	b21a      	sxth	r2, r3
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b21b      	sxth	r3, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	b21b      	sxth	r3, r3
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8007a20:	f107 0318 	add.w	r3, r7, #24
 8007a24:	3301      	adds	r3, #1
 8007a26:	461a      	mov	r2, r3
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	8819      	ldrh	r1, [r3, #0]
 8007a2e:	789b      	ldrb	r3, [r3, #2]
 8007a30:	8011      	strh	r1, [r2, #0]
 8007a32:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007a34:	f107 0318 	add.w	r3, r7, #24
 8007a38:	3304      	adds	r3, #4
 8007a3a:	7afa      	ldrb	r2, [r7, #11]
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f001 fb58 	bl	80090f4 <memcpy>
  
  if (hciContext.io.Send)
 8007a44:	4b08      	ldr	r3, [pc, #32]	; (8007a68 <send_cmd+0x7c>)
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d009      	beq.n	8007a60 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <send_cmd+0x7c>)
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	7afa      	ldrb	r2, [r7, #11]
 8007a52:	b292      	uxth	r2, r2
 8007a54:	3204      	adds	r2, #4
 8007a56:	b291      	uxth	r1, r2
 8007a58:	f107 0218 	add.w	r2, r7, #24
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
  }
}
 8007a60:	bf00      	nop
 8007a62:	3798      	adds	r7, #152	; 0x98
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20005170 	.word	0x20005170

08007a6c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8007a76:	e00a      	b.n	8007a8e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8007a78:	f107 030c 	add.w	r3, r7, #12
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6838      	ldr	r0, [r7, #0]
 8007a80:	f000 faea 	bl	8008058 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa51 	bl	8007f30 <list_insert_head>
  while (!list_is_empty(src_list))
 8007a8e:	6838      	ldr	r0, [r7, #0]
 8007a90:	f000 fa2c 	bl	8007eec <list_is_empty>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ee      	beq.n	8007a78 <move_list+0xc>
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007aaa:	e009      	b.n	8007ac0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8007aac:	1d3b      	adds	r3, r7, #4
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4809      	ldr	r0, [pc, #36]	; (8007ad8 <free_event_list+0x34>)
 8007ab2:	f000 faaa 	bl	800800a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4808      	ldr	r0, [pc, #32]	; (8007adc <free_event_list+0x38>)
 8007abc:	f000 fa5e 	bl	8007f7c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007ac0:	4806      	ldr	r0, [pc, #24]	; (8007adc <free_event_list+0x38>)
 8007ac2:	f000 faf0 	bl	80080a6 <list_get_size>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	ddef      	ble.n	8007aac <free_event_list+0x8>
  }
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20004bf0 	.word	0x20004bf0
 8007adc:	20004be8 	.word	0x20004be8

08007ae0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8007af0:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <hci_init+0x74>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8007af6:	4818      	ldr	r0, [pc, #96]	; (8007b58 <hci_init+0x78>)
 8007af8:	f000 f9e8 	bl	8007ecc <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8007afc:	4817      	ldr	r0, [pc, #92]	; (8007b5c <hci_init+0x7c>)
 8007afe:	f000 f9e5 	bl	8007ecc <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8007b02:	f7f8 ff3f 	bl	8000984 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
 8007b0a:	e00c      	b.n	8007b26 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	228c      	movs	r2, #140	; 0x8c
 8007b10:	fb02 f303 	mul.w	r3, r2, r3
 8007b14:	4a12      	ldr	r2, [pc, #72]	; (8007b60 <hci_init+0x80>)
 8007b16:	4413      	add	r3, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	480f      	ldr	r0, [pc, #60]	; (8007b58 <hci_init+0x78>)
 8007b1c:	f000 fa2e 	bl	8007f7c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	3301      	adds	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d9ef      	bls.n	8007b0c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <hci_init+0x74>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <hci_init+0x5c>
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <hci_init+0x74>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2000      	movs	r0, #0
 8007b3a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <hci_init+0x74>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <hci_init+0x6a>
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <hci_init+0x74>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4798      	blx	r3
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20005170 	.word	0x20005170
 8007b58:	20004be8 	.word	0x20004be8
 8007b5c:	20004bf0 	.word	0x20004bf0
 8007b60:	20004bf8 	.word	0x20004bf8

08007b64 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0b      	ldr	r2, [pc, #44]	; (8007ba0 <hci_register_io_bus+0x3c>)
 8007b72:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <hci_register_io_bus+0x3c>)
 8007b7a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	4a07      	ldr	r2, [pc, #28]	; (8007ba0 <hci_register_io_bus+0x3c>)
 8007b82:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	4a05      	ldr	r2, [pc, #20]	; (8007ba0 <hci_register_io_bus+0x3c>)
 8007b8a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	4a03      	ldr	r2, [pc, #12]	; (8007ba0 <hci_register_io_bus+0x3c>)
 8007b92:	6093      	str	r3, [r2, #8]
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20005170 	.word	0x20005170

08007ba4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	885b      	ldrh	r3, [r3, #2]
 8007bb4:	b21b      	sxth	r3, r3
 8007bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	029b      	lsls	r3, r3, #10
 8007bc2:	b21b      	sxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b21b      	sxth	r3, r3
 8007bc8:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8007bce:	f107 0308 	add.w	r3, r7, #8
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f97a 	bl	8007ecc <list_init_head>

  free_event_list();
 8007bd8:	f7ff ff64 	bl	8007aa4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8818      	ldrh	r0, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8859      	ldrh	r1, [r3, #2]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f7ff fefd 	bl	80079ec <send_cmd>
  
  if (async)
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <hci_send_req+0x58>
  {
    return 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e0e5      	b.n	8007dc8 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8007bfc:	f7fa f8a8 	bl	8001d50 <HAL_GetTick>
 8007c00:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007c02:	f7fa f8a5 	bl	8001d50 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c10:	f200 80b6 	bhi.w	8007d80 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8007c14:	486e      	ldr	r0, [pc, #440]	; (8007dd0 <hci_send_req+0x22c>)
 8007c16:	f000 f969 	bl	8007eec <list_is_empty>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d000      	beq.n	8007c22 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007c20:	e7ef      	b.n	8007c02 <hci_send_req+0x5e>
      {
        break;
 8007c22:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8007c24:	f107 0310 	add.w	r3, r7, #16
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4869      	ldr	r0, [pc, #420]	; (8007dd0 <hci_send_req+0x22c>)
 8007c2c:	f000 f9ed 	bl	800800a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	3308      	adds	r3, #8
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d17b      	bne.n	8007d36 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	3301      	adds	r3, #1
 8007c42:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	3308      	adds	r3, #8
 8007c48:	3303      	adds	r3, #3
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007c52:	3b03      	subs	r3, #3
 8007c54:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5c:	d04d      	beq.n	8007cfa <hci_send_req+0x156>
 8007c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c60:	dc6b      	bgt.n	8007d3a <hci_send_req+0x196>
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	f000 808e 	beq.w	8007d84 <hci_send_req+0x1e0>
 8007c68:	2b10      	cmp	r3, #16
 8007c6a:	dc66      	bgt.n	8007d3a <hci_send_req+0x196>
 8007c6c:	2b0e      	cmp	r3, #14
 8007c6e:	d024      	beq.n	8007cba <hci_send_req+0x116>
 8007c70:	2b0f      	cmp	r3, #15
 8007c72:	d162      	bne.n	8007d3a <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	885b      	ldrh	r3, [r3, #2]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007c80:	429a      	cmp	r2, r3
 8007c82:	f040 8081 	bne.w	8007d88 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b0f      	cmp	r3, #15
 8007c8c:	d004      	beq.n	8007c98 <hci_send_req+0xf4>
          if (cs->status) {
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d053      	beq.n	8007d3e <hci_send_req+0x19a>
            goto failed;
 8007c96:	e07a      	b.n	8007d8e <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	bf28      	it	cs
 8007ca2:	461a      	movcs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6918      	ldr	r0, [r3, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cb4:	f001 fa1e 	bl	80090f4 <memcpy>
        goto done;
 8007cb8:	e07a      	b.n	8007db0 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d15f      	bne.n	8007d8c <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	3303      	adds	r3, #3
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	3b03      	subs	r3, #3
 8007cd6:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	695a      	ldr	r2, [r3, #20]
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	bf28      	it	cs
 8007ce2:	461a      	movcs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6918      	ldr	r0, [r3, #16]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cf4:	f001 f9fe 	bl	80090f4 <memcpy>
        goto done;
 8007cf8:	e05a      	b.n	8007db0 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d11a      	bne.n	8007d42 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695a      	ldr	r2, [r3, #20]
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	bf28      	it	cs
 8007d1c:	461a      	movcs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6918      	ldr	r0, [r3, #16]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	1c59      	adds	r1, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f001 f9e0 	bl	80090f4 <memcpy>
        goto done;
 8007d34:	e03c      	b.n	8007db0 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8007d36:	bf00      	nop
 8007d38:	e004      	b.n	8007d44 <hci_send_req+0x1a0>
        break;
 8007d3a:	bf00      	nop
 8007d3c:	e002      	b.n	8007d44 <hci_send_req+0x1a0>
          break;
 8007d3e:	bf00      	nop
 8007d40:	e000      	b.n	8007d44 <hci_send_req+0x1a0>
          break;
 8007d42:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8007d44:	4823      	ldr	r0, [pc, #140]	; (8007dd4 <hci_send_req+0x230>)
 8007d46:	f000 f8d1 	bl	8007eec <list_is_empty>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <hci_send_req+0x1c8>
 8007d50:	481f      	ldr	r0, [pc, #124]	; (8007dd0 <hci_send_req+0x22c>)
 8007d52:	f000 f8cb 	bl	8007eec <list_is_empty>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	481c      	ldr	r0, [pc, #112]	; (8007dd4 <hci_send_req+0x230>)
 8007d62:	f000 f90b 	bl	8007f7c <list_insert_tail>
      hciReadPacket=NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	e008      	b.n	8007d7e <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	f107 0308 	add.w	r3, r7, #8
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 f901 	bl	8007f7c <list_insert_tail>
      hciReadPacket=NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
  {
 8007d7e:	e73d      	b.n	8007bfc <hci_send_req+0x58>
        goto failed;
 8007d80:	bf00      	nop
 8007d82:	e004      	b.n	8007d8e <hci_send_req+0x1ea>
        goto failed;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <hci_send_req+0x1ea>
          goto failed;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <hci_send_req+0x1ea>
          goto failed;
 8007d8c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4619      	mov	r1, r3
 8007d98:	480e      	ldr	r0, [pc, #56]	; (8007dd4 <hci_send_req+0x230>)
 8007d9a:	f000 f8c9 	bl	8007f30 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8007d9e:	f107 0308 	add.w	r3, r7, #8
 8007da2:	4619      	mov	r1, r3
 8007da4:	480a      	ldr	r0, [pc, #40]	; (8007dd0 <hci_send_req+0x22c>)
 8007da6:	f7ff fe61 	bl	8007a6c <move_list>

  return -1;
 8007daa:	f04f 33ff 	mov.w	r3, #4294967295
 8007dae:	e00b      	b.n	8007dc8 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	4619      	mov	r1, r3
 8007db4:	4807      	ldr	r0, [pc, #28]	; (8007dd4 <hci_send_req+0x230>)
 8007db6:	f000 f8bb 	bl	8007f30 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8007dba:	f107 0308 	add.w	r3, r7, #8
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4803      	ldr	r0, [pc, #12]	; (8007dd0 <hci_send_req+0x22c>)
 8007dc2:	f7ff fe53 	bl	8007a6c <move_list>

  return 0;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3738      	adds	r7, #56	; 0x38
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20004bf0 	.word	0x20004bf0
 8007dd4:	20004be8 	.word	0x20004be8

08007dd8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007de2:	e013      	b.n	8007e0c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	480e      	ldr	r0, [pc, #56]	; (8007e24 <hci_user_evt_proc+0x4c>)
 8007dea:	f000 f90e 	bl	800800a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007dee:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <hci_user_evt_proc+0x50>)
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <hci_user_evt_proc+0x50>)
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	3208      	adds	r2, #8
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4619      	mov	r1, r3
 8007e06:	4809      	ldr	r0, [pc, #36]	; (8007e2c <hci_user_evt_proc+0x54>)
 8007e08:	f000 f8b8 	bl	8007f7c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007e0c:	4805      	ldr	r0, [pc, #20]	; (8007e24 <hci_user_evt_proc+0x4c>)
 8007e0e:	f000 f86d 	bl	8007eec <list_is_empty>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0e5      	beq.n	8007de4 <hci_user_evt_proc+0xc>
  }
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20004bf0 	.word	0x20004bf0
 8007e28:	20005170 	.word	0x20005170
 8007e2c:	20004be8 	.word	0x20004be8

08007e30 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007e40:	481f      	ldr	r0, [pc, #124]	; (8007ec0 <hci_notify_asynch_evt+0x90>)
 8007e42:	f000 f853 	bl	8007eec <list_is_empty>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d132      	bne.n	8007eb2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	4619      	mov	r1, r3
 8007e52:	481b      	ldr	r0, [pc, #108]	; (8007ec0 <hci_notify_asynch_evt+0x90>)
 8007e54:	f000 f8d9 	bl	800800a <list_remove_head>
    
    if (hciContext.io.Receive)
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <hci_notify_asynch_evt+0x94>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02a      	beq.n	8007eb6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8007e60:	4b18      	ldr	r3, [pc, #96]	; (8007ec4 <hci_notify_asynch_evt+0x94>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	3208      	adds	r2, #8
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8007e72:	7cfb      	ldrb	r3, [r7, #19]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d016      	beq.n	8007ea6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	7cfa      	ldrb	r2, [r7, #19]
 8007e7c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff fd92 	bl	80079ac <verify_packet>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4619      	mov	r1, r3
 8007e92:	480d      	ldr	r0, [pc, #52]	; (8007ec8 <hci_notify_asynch_evt+0x98>)
 8007e94:	f000 f872 	bl	8007f7c <list_insert_tail>
 8007e98:	e00d      	b.n	8007eb6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4808      	ldr	r0, [pc, #32]	; (8007ec0 <hci_notify_asynch_evt+0x90>)
 8007ea0:	f000 f846 	bl	8007f30 <list_insert_head>
 8007ea4:	e007      	b.n	8007eb6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4805      	ldr	r0, [pc, #20]	; (8007ec0 <hci_notify_asynch_evt+0x90>)
 8007eac:	f000 f840 	bl	8007f30 <list_insert_head>
 8007eb0:	e001      	b.n	8007eb6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8007eb6:	697b      	ldr	r3, [r7, #20]
  
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20004be8 	.word	0x20004be8
 8007ec4:	20005170 	.word	0x20005170
 8007ec8:	20004bf0 	.word	0x20004bf0

08007ecc <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	605a      	str	r2, [r3, #4]
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007efa:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007efe:	b672      	cpsid	i
}
 8007f00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d102      	bne.n	8007f12 <list_is_empty+0x26>
  {
    return_value = 1;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
 8007f10:	e001      	b.n	8007f16 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f383 8810 	msr	PRIMASK, r3
}
 8007f20:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	371c      	adds	r7, #28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f40:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007f42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f44:	b672      	cpsid	i
}
 8007f46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	605a      	str	r2, [r3, #4]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f383 8810 	msr	PRIMASK, r3
}
 8007f6e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007f70:	bf00      	nop
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f86:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f90:	b672      	cpsid	i
}
 8007f92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f383 8810 	msr	PRIMASK, r3
}
 8007fba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007fd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fda:	b672      	cpsid	i
}
 8007fdc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6852      	ldr	r2, [r2, #4]
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f383 8810 	msr	PRIMASK, r3
}
 8007ffc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b086      	sub	sp, #24
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008014:	f3ef 8310 	mrs	r3, PRIMASK
 8008018:	60fb      	str	r3, [r7, #12]
  return(result);
 800801a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800801c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800801e:	b672      	cpsid	i
}
 8008020:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff ffca 	bl	8007fc8 <list_remove_node>
  (*node)->next = NULL;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f383 8810 	msr	PRIMASK, r3
}
 800804e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008050:	bf00      	nop
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008062:	f3ef 8310 	mrs	r3, PRIMASK
 8008066:	60fb      	str	r3, [r7, #12]
  return(result);
 8008068:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800806a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800806c:	b672      	cpsid	i
}
 800806e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ffa3 	bl	8007fc8 <list_remove_node>
  (*node)->next = NULL;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800809e:	bf00      	nop
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b089      	sub	sp, #36	; 0x24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  int size = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b2:	f3ef 8310 	mrs	r3, PRIMASK
 80080b6:	613b      	str	r3, [r7, #16]
  return(result);
 80080b8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80080ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80080bc:	b672      	cpsid	i
}
 80080be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80080c6:	e005      	b.n	80080d4 <list_get_size+0x2e>
  {
    size++;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	3301      	adds	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d1f5      	bne.n	80080c8 <list_get_size+0x22>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f383 8810 	msr	PRIMASK, r3
}
 80080e6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80080e8:	69fb      	ldr	r3, [r7, #28]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3724      	adds	r7, #36	; 0x24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <arm_rfft_fast_init_f32>:
 80080f8:	084b      	lsrs	r3, r1, #1
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	b410      	push	{r4}
 80080fe:	8201      	strh	r1, [r0, #16]
 8008100:	8003      	strh	r3, [r0, #0]
 8008102:	d047      	beq.n	8008194 <arm_rfft_fast_init_f32+0x9c>
 8008104:	d917      	bls.n	8008136 <arm_rfft_fast_init_f32+0x3e>
 8008106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810a:	d03d      	beq.n	8008188 <arm_rfft_fast_init_f32+0x90>
 800810c:	d929      	bls.n	8008162 <arm_rfft_fast_init_f32+0x6a>
 800810e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008112:	d020      	beq.n	8008156 <arm_rfft_fast_init_f32+0x5e>
 8008114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008118:	d113      	bne.n	8008142 <arm_rfft_fast_init_f32+0x4a>
 800811a:	4921      	ldr	r1, [pc, #132]	; (80081a0 <arm_rfft_fast_init_f32+0xa8>)
 800811c:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <arm_rfft_fast_init_f32+0xac>)
 800811e:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <arm_rfft_fast_init_f32+0xb0>)
 8008120:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008124:	8184      	strh	r4, [r0, #12]
 8008126:	6081      	str	r1, [r0, #8]
 8008128:	6042      	str	r2, [r0, #4]
 800812a:	6143      	str	r3, [r0, #20]
 800812c:	2000      	movs	r0, #0
 800812e:	b240      	sxtb	r0, r0
 8008130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	2b20      	cmp	r3, #32
 8008138:	d01c      	beq.n	8008174 <arm_rfft_fast_init_f32+0x7c>
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d006      	beq.n	800814c <arm_rfft_fast_init_f32+0x54>
 800813e:	2b10      	cmp	r3, #16
 8008140:	d01d      	beq.n	800817e <arm_rfft_fast_init_f32+0x86>
 8008142:	20ff      	movs	r0, #255	; 0xff
 8008144:	b240      	sxtb	r0, r0
 8008146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	2438      	movs	r4, #56	; 0x38
 800814e:	4917      	ldr	r1, [pc, #92]	; (80081ac <arm_rfft_fast_init_f32+0xb4>)
 8008150:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <arm_rfft_fast_init_f32+0xb8>)
 8008152:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <arm_rfft_fast_init_f32+0xbc>)
 8008154:	e7e6      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 8008156:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800815a:	4917      	ldr	r1, [pc, #92]	; (80081b8 <arm_rfft_fast_init_f32+0xc0>)
 800815c:	4a17      	ldr	r2, [pc, #92]	; (80081bc <arm_rfft_fast_init_f32+0xc4>)
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <arm_rfft_fast_init_f32+0xc8>)
 8008160:	e7e0      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 8008162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008166:	d1ec      	bne.n	8008142 <arm_rfft_fast_init_f32+0x4a>
 8008168:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800816c:	4915      	ldr	r1, [pc, #84]	; (80081c4 <arm_rfft_fast_init_f32+0xcc>)
 800816e:	4a16      	ldr	r2, [pc, #88]	; (80081c8 <arm_rfft_fast_init_f32+0xd0>)
 8008170:	4b16      	ldr	r3, [pc, #88]	; (80081cc <arm_rfft_fast_init_f32+0xd4>)
 8008172:	e7d7      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 8008174:	2430      	movs	r4, #48	; 0x30
 8008176:	4916      	ldr	r1, [pc, #88]	; (80081d0 <arm_rfft_fast_init_f32+0xd8>)
 8008178:	4a16      	ldr	r2, [pc, #88]	; (80081d4 <arm_rfft_fast_init_f32+0xdc>)
 800817a:	4b17      	ldr	r3, [pc, #92]	; (80081d8 <arm_rfft_fast_init_f32+0xe0>)
 800817c:	e7d2      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 800817e:	2414      	movs	r4, #20
 8008180:	4916      	ldr	r1, [pc, #88]	; (80081dc <arm_rfft_fast_init_f32+0xe4>)
 8008182:	4a17      	ldr	r2, [pc, #92]	; (80081e0 <arm_rfft_fast_init_f32+0xe8>)
 8008184:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <arm_rfft_fast_init_f32+0xec>)
 8008186:	e7cd      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 8008188:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800818c:	4916      	ldr	r1, [pc, #88]	; (80081e8 <arm_rfft_fast_init_f32+0xf0>)
 800818e:	4a17      	ldr	r2, [pc, #92]	; (80081ec <arm_rfft_fast_init_f32+0xf4>)
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <arm_rfft_fast_init_f32+0xf8>)
 8008192:	e7c7      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 8008194:	24d0      	movs	r4, #208	; 0xd0
 8008196:	4917      	ldr	r1, [pc, #92]	; (80081f4 <arm_rfft_fast_init_f32+0xfc>)
 8008198:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <arm_rfft_fast_init_f32+0x100>)
 800819a:	4b18      	ldr	r3, [pc, #96]	; (80081fc <arm_rfft_fast_init_f32+0x104>)
 800819c:	e7c2      	b.n	8008124 <arm_rfft_fast_init_f32+0x2c>
 800819e:	bf00      	nop
 80081a0:	08019518 	.word	0x08019518
 80081a4:	0800a710 	.word	0x0800a710
 80081a8:	08010880 	.word	0x08010880
 80081ac:	0800e810 	.word	0x0800e810
 80081b0:	0801b2d8 	.word	0x0801b2d8
 80081b4:	0801d7c8 	.word	0x0801d7c8
 80081b8:	08017200 	.word	0x08017200
 80081bc:	08015100 	.word	0x08015100
 80081c0:	0800e880 	.word	0x0800e880
 80081c4:	0801d458 	.word	0x0801d458
 80081c8:	08014880 	.word	0x08014880
 80081cc:	0801b4d8 	.word	0x0801b4d8
 80081d0:	080180b8 	.word	0x080180b8
 80081d4:	08017100 	.word	0x08017100
 80081d8:	0800e710 	.word	0x0800e710
 80081dc:	08018010 	.word	0x08018010
 80081e0:	08015080 	.word	0x08015080
 80081e4:	08018038 	.word	0x08018038
 80081e8:	0801bcd8 	.word	0x0801bcd8
 80081ec:	08018518 	.word	0x08018518
 80081f0:	0801c058 	.word	0x0801c058
 80081f4:	0801d9c8 	.word	0x0801d9c8
 80081f8:	08018118 	.word	0x08018118
 80081fc:	0801d058 	.word	0x0801d058

08008200 <arm_rfft_fast_f32>:
 8008200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008204:	8a06      	ldrh	r6, [r0, #16]
 8008206:	0876      	lsrs	r6, r6, #1
 8008208:	4607      	mov	r7, r0
 800820a:	4615      	mov	r5, r2
 800820c:	8006      	strh	r6, [r0, #0]
 800820e:	460c      	mov	r4, r1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d15c      	bne.n	80082ce <arm_rfft_fast_f32+0xce>
 8008214:	461a      	mov	r2, r3
 8008216:	2301      	movs	r3, #1
 8008218:	f000 fbe6 	bl	80089e8 <arm_cfft_f32>
 800821c:	edd4 7a00 	vldr	s15, [r4]
 8008220:	ed94 7a01 	vldr	s14, [r4, #4]
 8008224:	883e      	ldrh	r6, [r7, #0]
 8008226:	6978      	ldr	r0, [r7, #20]
 8008228:	ee37 7a07 	vadd.f32	s14, s14, s14
 800822c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008230:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008234:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800823c:	3e01      	subs	r6, #1
 800823e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8008242:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008246:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800824a:	ed85 7a00 	vstr	s14, [r5]
 800824e:	edc5 7a01 	vstr	s15, [r5, #4]
 8008252:	3010      	adds	r0, #16
 8008254:	f105 0210 	add.w	r2, r5, #16
 8008258:	3b08      	subs	r3, #8
 800825a:	f104 0110 	add.w	r1, r4, #16
 800825e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8008262:	ed93 5a02 	vldr	s10, [r3, #8]
 8008266:	ed11 7a01 	vldr	s14, [r1, #-4]
 800826a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800826e:	edd3 5a03 	vldr	s11, [r3, #12]
 8008272:	ed50 6a01 	vldr	s13, [r0, #-4]
 8008276:	ee75 7a64 	vsub.f32	s15, s10, s9
 800827a:	ee35 4a87 	vadd.f32	s8, s11, s14
 800827e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008282:	ee77 5a65 	vsub.f32	s11, s14, s11
 8008286:	ee66 4a27 	vmul.f32	s9, s12, s15
 800828a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800828e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8008292:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008296:	ee66 6a84 	vmul.f32	s13, s13, s8
 800829a:	ee77 7a25 	vadd.f32	s15, s14, s11
 800829e:	ee76 6a85 	vadd.f32	s13, s13, s10
 80082a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80082a6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80082aa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80082ae:	3e01      	subs	r6, #1
 80082b0:	ed42 6a02 	vstr	s13, [r2, #-8]
 80082b4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80082b8:	f1a3 0308 	sub.w	r3, r3, #8
 80082bc:	f101 0108 	add.w	r1, r1, #8
 80082c0:	f100 0008 	add.w	r0, r0, #8
 80082c4:	f102 0208 	add.w	r2, r2, #8
 80082c8:	d1c9      	bne.n	800825e <arm_rfft_fast_f32+0x5e>
 80082ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ce:	edd1 7a00 	vldr	s15, [r1]
 80082d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80082d6:	6941      	ldr	r1, [r0, #20]
 80082d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80082dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082e0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80082e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80082e8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80082ec:	3e01      	subs	r6, #1
 80082ee:	ed82 7a00 	vstr	s14, [r2]
 80082f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80082f6:	00f0      	lsls	r0, r6, #3
 80082f8:	b3ee      	cbz	r6, 8008376 <arm_rfft_fast_f32+0x176>
 80082fa:	3808      	subs	r0, #8
 80082fc:	f101 0e10 	add.w	lr, r1, #16
 8008300:	4420      	add	r0, r4
 8008302:	f104 0110 	add.w	r1, r4, #16
 8008306:	f102 0c10 	add.w	ip, r2, #16
 800830a:	ed90 7a02 	vldr	s14, [r0, #8]
 800830e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008312:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008316:	ed90 4a03 	vldr	s8, [r0, #12]
 800831a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800831e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8008322:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008326:	ee74 4a05 	vadd.f32	s9, s8, s10
 800832a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800832e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8008332:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008336:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800833a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800833e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008342:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008346:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800834a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800834e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8008352:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008356:	ee27 7a23 	vmul.f32	s14, s14, s7
 800835a:	3e01      	subs	r6, #1
 800835c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8008360:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8008364:	f1a0 0008 	sub.w	r0, r0, #8
 8008368:	f101 0108 	add.w	r1, r1, #8
 800836c:	f10e 0e08 	add.w	lr, lr, #8
 8008370:	f10c 0c08 	add.w	ip, ip, #8
 8008374:	d1c9      	bne.n	800830a <arm_rfft_fast_f32+0x10a>
 8008376:	4638      	mov	r0, r7
 8008378:	4629      	mov	r1, r5
 800837a:	461a      	mov	r2, r3
 800837c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	2301      	movs	r3, #1
 8008382:	f000 bb31 	b.w	80089e8 <arm_cfft_f32>
 8008386:	bf00      	nop

08008388 <arm_cfft_radix8by2_f32>:
 8008388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838c:	ed2d 8b08 	vpush	{d8-d11}
 8008390:	f8b0 e000 	ldrh.w	lr, [r0]
 8008394:	6842      	ldr	r2, [r0, #4]
 8008396:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800839a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800839e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80083a2:	4607      	mov	r7, r0
 80083a4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80083a8:	f000 80af 	beq.w	800850a <arm_cfft_radix8by2_f32+0x182>
 80083ac:	3310      	adds	r3, #16
 80083ae:	18ce      	adds	r6, r1, r3
 80083b0:	3210      	adds	r2, #16
 80083b2:	4443      	add	r3, r8
 80083b4:	f101 0510 	add.w	r5, r1, #16
 80083b8:	f108 0410 	add.w	r4, r8, #16
 80083bc:	ed54 1a04 	vldr	s3, [r4, #-16]
 80083c0:	ed13 4a04 	vldr	s8, [r3, #-16]
 80083c4:	ed53 3a03 	vldr	s7, [r3, #-12]
 80083c8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80083cc:	ed13 5a01 	vldr	s10, [r3, #-4]
 80083d0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80083d4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80083d8:	ed16 2a04 	vldr	s4, [r6, #-16]
 80083dc:	ed56 2a03 	vldr	s5, [r6, #-12]
 80083e0:	ed15 6a03 	vldr	s12, [r5, #-12]
 80083e4:	ed15 7a01 	vldr	s14, [r5, #-4]
 80083e8:	ed15 3a04 	vldr	s6, [r5, #-16]
 80083ec:	ed54 7a01 	vldr	s15, [r4, #-4]
 80083f0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80083f4:	ed16 1a01 	vldr	s2, [r6, #-4]
 80083f8:	ed55 4a02 	vldr	s9, [r5, #-8]
 80083fc:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008400:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008404:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008408:	ee72 9a04 	vadd.f32	s19, s4, s8
 800840c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008410:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008414:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008418:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800841c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008420:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008424:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008428:	ed05 aa01 	vstr	s20, [r5, #-4]
 800842c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008430:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008434:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008438:	ed46 8a02 	vstr	s17, [r6, #-8]
 800843c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008440:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008444:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008448:	ed52 2a04 	vldr	s5, [r2, #-16]
 800844c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008450:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008454:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008458:	ee24 2a06 	vmul.f32	s4, s8, s12
 800845c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008460:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008464:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008468:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800846c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008470:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008474:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008478:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800847c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008480:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008484:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008488:	ed44 2a04 	vstr	s5, [r4, #-16]
 800848c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008490:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008498:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800849c:	ed12 7a01 	vldr	s14, [r2, #-4]
 80084a0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80084a4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80084a8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80084ac:	ee67 3a87 	vmul.f32	s7, s15, s14
 80084b0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80084b4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80084b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80084bc:	ee64 4a87 	vmul.f32	s9, s9, s14
 80084c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80084c4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80084c8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80084cc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80084d0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80084d4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80084d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80084dc:	f1be 0e01 	subs.w	lr, lr, #1
 80084e0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80084e4:	f105 0510 	add.w	r5, r5, #16
 80084e8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80084ec:	f106 0610 	add.w	r6, r6, #16
 80084f0:	ed03 6a02 	vstr	s12, [r3, #-8]
 80084f4:	ed03 7a01 	vstr	s14, [r3, #-4]
 80084f8:	f102 0210 	add.w	r2, r2, #16
 80084fc:	f104 0410 	add.w	r4, r4, #16
 8008500:	f103 0310 	add.w	r3, r3, #16
 8008504:	f47f af5a 	bne.w	80083bc <arm_cfft_radix8by2_f32+0x34>
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	fa1f f48c 	uxth.w	r4, ip
 800850e:	4608      	mov	r0, r1
 8008510:	2302      	movs	r3, #2
 8008512:	4621      	mov	r1, r4
 8008514:	f000 fae2 	bl	8008adc <arm_radix8_butterfly_f32>
 8008518:	ecbd 8b08 	vpop	{d8-d11}
 800851c:	4640      	mov	r0, r8
 800851e:	4621      	mov	r1, r4
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	2302      	movs	r3, #2
 8008524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	f000 bad8 	b.w	8008adc <arm_radix8_butterfly_f32>

0800852c <arm_cfft_radix8by4_f32>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	ed2d 8b0a 	vpush	{d8-d12}
 8008534:	8802      	ldrh	r2, [r0, #0]
 8008536:	ed91 6a00 	vldr	s12, [r1]
 800853a:	b08f      	sub	sp, #60	; 0x3c
 800853c:	460f      	mov	r7, r1
 800853e:	0852      	lsrs	r2, r2, #1
 8008540:	0093      	lsls	r3, r2, #2
 8008542:	900c      	str	r0, [sp, #48]	; 0x30
 8008544:	9103      	str	r1, [sp, #12]
 8008546:	6841      	ldr	r1, [r0, #4]
 8008548:	ed97 7a01 	vldr	s14, [r7, #4]
 800854c:	4638      	mov	r0, r7
 800854e:	4418      	add	r0, r3
 8008550:	4606      	mov	r6, r0
 8008552:	9009      	str	r0, [sp, #36]	; 0x24
 8008554:	4418      	add	r0, r3
 8008556:	edd0 6a00 	vldr	s13, [r0]
 800855a:	edd6 3a00 	vldr	s7, [r6]
 800855e:	edd6 2a01 	vldr	s5, [r6, #4]
 8008562:	edd0 7a01 	vldr	s15, [r0, #4]
 8008566:	900a      	str	r0, [sp, #40]	; 0x28
 8008568:	ee76 5a26 	vadd.f32	s11, s12, s13
 800856c:	4604      	mov	r4, r0
 800856e:	4625      	mov	r5, r4
 8008570:	441c      	add	r4, r3
 8008572:	ed94 4a00 	vldr	s8, [r4]
 8008576:	ed94 5a01 	vldr	s10, [r4, #4]
 800857a:	9401      	str	r4, [sp, #4]
 800857c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8008580:	4630      	mov	r0, r6
 8008582:	ee74 4a24 	vadd.f32	s9, s8, s9
 8008586:	463e      	mov	r6, r7
 8008588:	ee14 ea90 	vmov	lr, s9
 800858c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008590:	f846 eb08 	str.w	lr, [r6], #8
 8008594:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008598:	edd0 4a01 	vldr	s9, [r0, #4]
 800859c:	9604      	str	r6, [sp, #16]
 800859e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a2:	9e01      	ldr	r6, [sp, #4]
 80085a4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80085a8:	ed96 2a01 	vldr	s4, [r6, #4]
 80085ac:	ee36 7a24 	vadd.f32	s14, s12, s9
 80085b0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80085b4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80085b8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80085bc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80085c0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80085c4:	ee73 3a45 	vsub.f32	s7, s6, s10
 80085c8:	4604      	mov	r4, r0
 80085ca:	ee36 6a45 	vsub.f32	s12, s12, s10
 80085ce:	ee75 6a26 	vadd.f32	s13, s10, s13
 80085d2:	46a3      	mov	fp, r4
 80085d4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80085d8:	ee34 5a84 	vadd.f32	s10, s9, s8
 80085dc:	ee13 8a90 	vmov	r8, s7
 80085e0:	46a4      	mov	ip, r4
 80085e2:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80085e6:	ed87 7a01 	vstr	s14, [r7, #4]
 80085ea:	f84b 8b08 	str.w	r8, [fp], #8
 80085ee:	f1ac 0704 	sub.w	r7, ip, #4
 80085f2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80085f6:	f101 0c08 	add.w	ip, r1, #8
 80085fa:	462c      	mov	r4, r5
 80085fc:	f8cd c014 	str.w	ip, [sp, #20]
 8008600:	ee15 ca90 	vmov	ip, s11
 8008604:	f844 cb08 	str.w	ip, [r4], #8
 8008608:	9407      	str	r4, [sp, #28]
 800860a:	f101 0410 	add.w	r4, r1, #16
 800860e:	ed85 6a01 	vstr	s12, [r5, #4]
 8008612:	0852      	lsrs	r2, r2, #1
 8008614:	9402      	str	r4, [sp, #8]
 8008616:	462c      	mov	r4, r5
 8008618:	f101 0518 	add.w	r5, r1, #24
 800861c:	920b      	str	r2, [sp, #44]	; 0x2c
 800861e:	46b2      	mov	sl, r6
 8008620:	9506      	str	r5, [sp, #24]
 8008622:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008626:	3a02      	subs	r2, #2
 8008628:	ee16 5a90 	vmov	r5, s13
 800862c:	46b6      	mov	lr, r6
 800862e:	4630      	mov	r0, r6
 8008630:	0852      	lsrs	r2, r2, #1
 8008632:	f84a 5b08 	str.w	r5, [sl], #8
 8008636:	f1a0 0604 	sub.w	r6, r0, #4
 800863a:	edce 7a01 	vstr	s15, [lr, #4]
 800863e:	9208      	str	r2, [sp, #32]
 8008640:	f000 8130 	beq.w	80088a4 <arm_cfft_radix8by4_f32+0x378>
 8008644:	4691      	mov	r9, r2
 8008646:	9a03      	ldr	r2, [sp, #12]
 8008648:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800864c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008650:	3b08      	subs	r3, #8
 8008652:	f102 0510 	add.w	r5, r2, #16
 8008656:	f101 0c20 	add.w	ip, r1, #32
 800865a:	f1a4 020c 	sub.w	r2, r4, #12
 800865e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008662:	4433      	add	r3, r6
 8008664:	3410      	adds	r4, #16
 8008666:	4650      	mov	r0, sl
 8008668:	4659      	mov	r1, fp
 800866a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800866e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008672:	ed91 7a00 	vldr	s14, [r1]
 8008676:	edd0 7a00 	vldr	s15, [r0]
 800867a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800867e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008682:	edd0 6a01 	vldr	s13, [r0, #4]
 8008686:	ed91 6a01 	vldr	s12, [r1, #4]
 800868a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800868e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008692:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008696:	ee74 5a65 	vsub.f32	s11, s8, s11
 800869a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800869e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80086a2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80086a6:	edd1 4a01 	vldr	s9, [r1, #4]
 80086aa:	ed90 4a01 	vldr	s8, [r0, #4]
 80086ae:	ee70 4a24 	vadd.f32	s9, s0, s9
 80086b2:	ee76 aa05 	vadd.f32	s21, s12, s10
 80086b6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80086ba:	ee35 aac7 	vsub.f32	s20, s11, s14
 80086be:	ed45 4a01 	vstr	s9, [r5, #-4]
 80086c2:	edd6 1a00 	vldr	s3, [r6]
 80086c6:	edd7 0a00 	vldr	s1, [r7]
 80086ca:	ed92 4a02 	vldr	s8, [r2, #8]
 80086ce:	edd3 3a02 	vldr	s7, [r3, #8]
 80086d2:	ed93 2a01 	vldr	s4, [r3, #4]
 80086d6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80086da:	edd2 2a01 	vldr	s5, [r2, #4]
 80086de:	ed57 9a01 	vldr	s19, [r7, #-4]
 80086e2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80086e6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80086ea:	ee74 8a84 	vadd.f32	s17, s9, s8
 80086ee:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80086f2:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80086f6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80086fa:	ee18 aa90 	vmov	sl, s17
 80086fe:	f847 a908 	str.w	sl, [r7], #-8
 8008702:	edd2 8a01 	vldr	s17, [r2, #4]
 8008706:	ed93 9a01 	vldr	s18, [r3, #4]
 800870a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800870e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008712:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008716:	ee74 0a63 	vsub.f32	s1, s8, s7
 800871a:	edc7 8a01 	vstr	s17, [r7, #4]
 800871e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008722:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008726:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800872a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800872e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008732:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008736:	ee30 9a81 	vadd.f32	s18, s1, s2
 800873a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800873e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008742:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008746:	ee69 baa8 	vmul.f32	s23, s19, s17
 800874a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800874e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008752:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008756:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800875a:	ee1c aa10 	vmov	sl, s24
 800875e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008762:	f841 ab08 	str.w	sl, [r1], #8
 8008766:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800876a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800876e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008772:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008776:	ed01 aa01 	vstr	s20, [r1, #-4]
 800877a:	edc2 8a01 	vstr	s17, [r2, #4]
 800877e:	ed82 ba02 	vstr	s22, [r2, #8]
 8008782:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008786:	ee74 3a63 	vsub.f32	s7, s8, s7
 800878a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800878e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008792:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008796:	ee33 3a42 	vsub.f32	s6, s6, s4
 800879a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800879e:	ee30 0a66 	vsub.f32	s0, s0, s13
 80087a2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80087a6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80087aa:	ee28 aa24 	vmul.f32	s20, s16, s9
 80087ae:	ee60 9a04 	vmul.f32	s19, s0, s8
 80087b2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80087b6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80087ba:	ee63 3a84 	vmul.f32	s7, s7, s8
 80087be:	ee39 4a68 	vsub.f32	s8, s18, s17
 80087c2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80087c6:	ee14 aa10 	vmov	sl, s8
 80087ca:	ee30 0a48 	vsub.f32	s0, s0, s16
 80087ce:	ee63 4a24 	vmul.f32	s9, s6, s9
 80087d2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80087d6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80087da:	ed04 0a01 	vstr	s0, [r4, #-4]
 80087de:	f846 a908 	str.w	sl, [r6], #-8
 80087e2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80087e6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80087ea:	edc6 3a01 	vstr	s7, [r6, #4]
 80087ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 80087f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087f6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80087fa:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80087fe:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008802:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008806:	ee72 2a62 	vsub.f32	s5, s4, s5
 800880a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800880e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008812:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008816:	ee62 0a86 	vmul.f32	s1, s5, s12
 800881a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800881e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008822:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008826:	ee62 2a87 	vmul.f32	s5, s5, s14
 800882a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800882e:	ee15 aa90 	vmov	sl, s11
 8008832:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008836:	f840 ab08 	str.w	sl, [r0], #8
 800883a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800883e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008842:	f1b9 0901 	subs.w	r9, r9, #1
 8008846:	ed40 7a01 	vstr	s15, [r0, #-4]
 800884a:	f105 0508 	add.w	r5, r5, #8
 800884e:	ed83 1a02 	vstr	s2, [r3, #8]
 8008852:	edc3 2a01 	vstr	s5, [r3, #4]
 8008856:	f108 0808 	add.w	r8, r8, #8
 800885a:	f1a2 0208 	sub.w	r2, r2, #8
 800885e:	f10c 0c10 	add.w	ip, ip, #16
 8008862:	f104 0408 	add.w	r4, r4, #8
 8008866:	f10e 0e18 	add.w	lr, lr, #24
 800886a:	f1a3 0308 	sub.w	r3, r3, #8
 800886e:	f47f aefc 	bne.w	800866a <arm_cfft_radix8by4_f32+0x13e>
 8008872:	9908      	ldr	r1, [sp, #32]
 8008874:	9802      	ldr	r0, [sp, #8]
 8008876:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800887a:	00cb      	lsls	r3, r1, #3
 800887c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008880:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008884:	9102      	str	r1, [sp, #8]
 8008886:	9904      	ldr	r1, [sp, #16]
 8008888:	4419      	add	r1, r3
 800888a:	9104      	str	r1, [sp, #16]
 800888c:	9905      	ldr	r1, [sp, #20]
 800888e:	4419      	add	r1, r3
 8008890:	9105      	str	r1, [sp, #20]
 8008892:	9907      	ldr	r1, [sp, #28]
 8008894:	449b      	add	fp, r3
 8008896:	4419      	add	r1, r3
 8008898:	449a      	add	sl, r3
 800889a:	9b06      	ldr	r3, [sp, #24]
 800889c:	9107      	str	r1, [sp, #28]
 800889e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a2:	9306      	str	r3, [sp, #24]
 80088a4:	9a04      	ldr	r2, [sp, #16]
 80088a6:	9807      	ldr	r0, [sp, #28]
 80088a8:	edd2 3a00 	vldr	s7, [r2]
 80088ac:	ed90 4a00 	vldr	s8, [r0]
 80088b0:	eddb 7a00 	vldr	s15, [fp]
 80088b4:	ed9a 3a00 	vldr	s6, [sl]
 80088b8:	edd2 4a01 	vldr	s9, [r2, #4]
 80088bc:	ed90 7a01 	vldr	s14, [r0, #4]
 80088c0:	ed9b 2a01 	vldr	s4, [fp, #4]
 80088c4:	edda 5a01 	vldr	s11, [sl, #4]
 80088c8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80088cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088ce:	ee73 6a84 	vadd.f32	s13, s7, s8
 80088d2:	ee34 6a87 	vadd.f32	s12, s9, s14
 80088d6:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80088da:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80088de:	ee33 5a05 	vadd.f32	s10, s6, s10
 80088e2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80088e6:	ed82 5a00 	vstr	s10, [r2]
 80088ea:	ed9b 5a01 	vldr	s10, [fp, #4]
 80088ee:	edda 4a01 	vldr	s9, [sl, #4]
 80088f2:	ee36 5a05 	vadd.f32	s10, s12, s10
 80088f6:	ee72 3a04 	vadd.f32	s7, s4, s8
 80088fa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80088fe:	ee77 4a67 	vsub.f32	s9, s14, s15
 8008902:	ed82 5a01 	vstr	s10, [r2, #4]
 8008906:	9a05      	ldr	r2, [sp, #20]
 8008908:	ee34 5a83 	vadd.f32	s10, s9, s6
 800890c:	edd2 1a00 	vldr	s3, [r2]
 8008910:	edd2 2a01 	vldr	s5, [r2, #4]
 8008914:	9a02      	ldr	r2, [sp, #8]
 8008916:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800891a:	ee36 6a42 	vsub.f32	s12, s12, s4
 800891e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8008922:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008926:	ee65 2a22 	vmul.f32	s5, s10, s5
 800892a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800892e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008932:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008936:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800893a:	edcb 2a00 	vstr	s5, [fp]
 800893e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008942:	edd2 3a01 	vldr	s7, [r2, #4]
 8008946:	ed92 5a00 	vldr	s10, [r2]
 800894a:	9a06      	ldr	r2, [sp, #24]
 800894c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008950:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008954:	ee66 4a85 	vmul.f32	s9, s13, s10
 8008958:	ee26 5a05 	vmul.f32	s10, s12, s10
 800895c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008960:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008964:	ee75 6a66 	vsub.f32	s13, s10, s13
 8008968:	ee34 6a86 	vadd.f32	s12, s9, s12
 800896c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008974:	edc0 6a01 	vstr	s13, [r0, #4]
 8008978:	ed80 6a00 	vstr	s12, [r0]
 800897c:	ed92 6a01 	vldr	s12, [r2, #4]
 8008980:	9803      	ldr	r0, [sp, #12]
 8008982:	ee77 7a43 	vsub.f32	s15, s14, s6
 8008986:	ee75 5a84 	vadd.f32	s11, s11, s8
 800898a:	ed92 7a00 	vldr	s14, [r2]
 800898e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8008992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008996:	ee65 5a86 	vmul.f32	s11, s11, s12
 800899a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800899e:	ee77 5a65 	vsub.f32	s11, s14, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	edca 5a01 	vstr	s11, [sl, #4]
 80089aa:	edca 7a00 	vstr	s15, [sl]
 80089ae:	6872      	ldr	r2, [r6, #4]
 80089b0:	4621      	mov	r1, r4
 80089b2:	2304      	movs	r3, #4
 80089b4:	f000 f892 	bl	8008adc <arm_radix8_butterfly_f32>
 80089b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ba:	6872      	ldr	r2, [r6, #4]
 80089bc:	4621      	mov	r1, r4
 80089be:	2304      	movs	r3, #4
 80089c0:	f000 f88c 	bl	8008adc <arm_radix8_butterfly_f32>
 80089c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089c6:	6872      	ldr	r2, [r6, #4]
 80089c8:	4621      	mov	r1, r4
 80089ca:	2304      	movs	r3, #4
 80089cc:	f000 f886 	bl	8008adc <arm_radix8_butterfly_f32>
 80089d0:	9801      	ldr	r0, [sp, #4]
 80089d2:	6872      	ldr	r2, [r6, #4]
 80089d4:	4621      	mov	r1, r4
 80089d6:	2304      	movs	r3, #4
 80089d8:	b00f      	add	sp, #60	; 0x3c
 80089da:	ecbd 8b0a 	vpop	{d8-d12}
 80089de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e2:	f000 b87b 	b.w	8008adc <arm_radix8_butterfly_f32>
 80089e6:	bf00      	nop

080089e8 <arm_cfft_f32>:
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	2a01      	cmp	r2, #1
 80089ee:	4606      	mov	r6, r0
 80089f0:	4617      	mov	r7, r2
 80089f2:	460c      	mov	r4, r1
 80089f4:	4698      	mov	r8, r3
 80089f6:	8805      	ldrh	r5, [r0, #0]
 80089f8:	d054      	beq.n	8008aa4 <arm_cfft_f32+0xbc>
 80089fa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80089fe:	d04c      	beq.n	8008a9a <arm_cfft_f32+0xb2>
 8008a00:	d916      	bls.n	8008a30 <arm_cfft_f32+0x48>
 8008a02:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008a06:	d01a      	beq.n	8008a3e <arm_cfft_f32+0x56>
 8008a08:	d95c      	bls.n	8008ac4 <arm_cfft_f32+0xdc>
 8008a0a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008a0e:	d044      	beq.n	8008a9a <arm_cfft_f32+0xb2>
 8008a10:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008a14:	d105      	bne.n	8008a22 <arm_cfft_f32+0x3a>
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	6872      	ldr	r2, [r6, #4]
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f000 f85d 	bl	8008adc <arm_radix8_butterfly_f32>
 8008a22:	f1b8 0f00 	cmp.w	r8, #0
 8008a26:	d111      	bne.n	8008a4c <arm_cfft_f32+0x64>
 8008a28:	2f01      	cmp	r7, #1
 8008a2a:	d016      	beq.n	8008a5a <arm_cfft_f32+0x72>
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	2d20      	cmp	r5, #32
 8008a32:	d032      	beq.n	8008a9a <arm_cfft_f32+0xb2>
 8008a34:	d94a      	bls.n	8008acc <arm_cfft_f32+0xe4>
 8008a36:	2d40      	cmp	r5, #64	; 0x40
 8008a38:	d0ed      	beq.n	8008a16 <arm_cfft_f32+0x2e>
 8008a3a:	2d80      	cmp	r5, #128	; 0x80
 8008a3c:	d1f1      	bne.n	8008a22 <arm_cfft_f32+0x3a>
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7ff fca1 	bl	8008388 <arm_cfft_radix8by2_f32>
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	d0ed      	beq.n	8008a28 <arm_cfft_f32+0x40>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	89b1      	ldrh	r1, [r6, #12]
 8008a50:	68b2      	ldr	r2, [r6, #8]
 8008a52:	f7f7 fbc5 	bl	80001e0 <arm_bitreversal_32>
 8008a56:	2f01      	cmp	r7, #1
 8008a58:	d1e8      	bne.n	8008a2c <arm_cfft_f32+0x44>
 8008a5a:	ee07 5a90 	vmov	s15, r5
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008a66:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	d0de      	beq.n	8008a2c <arm_cfft_f32+0x44>
 8008a6e:	f104 0108 	add.w	r1, r4, #8
 8008a72:	2300      	movs	r3, #0
 8008a74:	3301      	adds	r3, #1
 8008a76:	429d      	cmp	r5, r3
 8008a78:	f101 0108 	add.w	r1, r1, #8
 8008a7c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008a80:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008a84:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008a88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008a8c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008a90:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008a94:	d1ee      	bne.n	8008a74 <arm_cfft_f32+0x8c>
 8008a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	f7ff fd45 	bl	800852c <arm_cfft_radix8by4_f32>
 8008aa2:	e7be      	b.n	8008a22 <arm_cfft_f32+0x3a>
 8008aa4:	b1ad      	cbz	r5, 8008ad2 <arm_cfft_f32+0xea>
 8008aa6:	f101 030c 	add.w	r3, r1, #12
 8008aaa:	2200      	movs	r2, #0
 8008aac:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	eef1 7a67 	vneg.f32	s15, s15
 8008ab6:	4295      	cmp	r5, r2
 8008ab8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008abc:	f103 0308 	add.w	r3, r3, #8
 8008ac0:	d1f4      	bne.n	8008aac <arm_cfft_f32+0xc4>
 8008ac2:	e79a      	b.n	80089fa <arm_cfft_f32+0x12>
 8008ac4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008ac8:	d0a5      	beq.n	8008a16 <arm_cfft_f32+0x2e>
 8008aca:	e7aa      	b.n	8008a22 <arm_cfft_f32+0x3a>
 8008acc:	2d10      	cmp	r5, #16
 8008ace:	d0b6      	beq.n	8008a3e <arm_cfft_f32+0x56>
 8008ad0:	e7a7      	b.n	8008a22 <arm_cfft_f32+0x3a>
 8008ad2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008ad6:	d894      	bhi.n	8008a02 <arm_cfft_f32+0x1a>
 8008ad8:	e7aa      	b.n	8008a30 <arm_cfft_f32+0x48>
 8008ada:	bf00      	nop

08008adc <arm_radix8_butterfly_f32>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	ed2d 8b10 	vpush	{d8-d15}
 8008ae4:	b09d      	sub	sp, #116	; 0x74
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	ed9f bac8 	vldr	s22, [pc, #800]	; 8008e0c <arm_radix8_butterfly_f32+0x330>
 8008aec:	921a      	str	r2, [sp, #104]	; 0x68
 8008aee:	1d03      	adds	r3, r0, #4
 8008af0:	4682      	mov	sl, r0
 8008af2:	4689      	mov	r9, r1
 8008af4:	468b      	mov	fp, r1
 8008af6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008af8:	9400      	str	r4, [sp, #0]
 8008afa:	469e      	mov	lr, r3
 8008afc:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008b00:	005a      	lsls	r2, r3, #1
 8008b02:	18d6      	adds	r6, r2, r3
 8008b04:	18f5      	adds	r5, r6, r3
 8008b06:	9203      	str	r2, [sp, #12]
 8008b08:	195a      	adds	r2, r3, r5
 8008b0a:	18d0      	adds	r0, r2, r3
 8008b0c:	00df      	lsls	r7, r3, #3
 8008b0e:	1819      	adds	r1, r3, r0
 8008b10:	463c      	mov	r4, r7
 8008b12:	9701      	str	r7, [sp, #4]
 8008b14:	4457      	add	r7, sl
 8008b16:	930c      	str	r3, [sp, #48]	; 0x30
 8008b18:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8008b22:	eb07 0c04 	add.w	ip, r7, r4
 8008b26:	9c00      	ldr	r4, [sp, #0]
 8008b28:	9302      	str	r3, [sp, #8]
 8008b2a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008b2e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8008b32:	3204      	adds	r2, #4
 8008b34:	3104      	adds	r1, #4
 8008b36:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008b3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	eddc 7a00 	vldr	s15, [ip]
 8008b46:	edd7 6a00 	vldr	s13, [r7]
 8008b4a:	edd6 3a00 	vldr	s7, [r6]
 8008b4e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8008b52:	edd5 4a00 	vldr	s9, [r5]
 8008b56:	ed90 2a00 	vldr	s4, [r0]
 8008b5a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008b5e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008b62:	ee77 8a82 	vadd.f32	s17, s15, s4
 8008b66:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008b6a:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008b6e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8008b72:	ee31 6a84 	vadd.f32	s12, s3, s8
 8008b76:	ee33 5a28 	vadd.f32	s10, s6, s17
 8008b7a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008b7e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8008b82:	ee35 5a46 	vsub.f32	s10, s10, s12
 8008b86:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8008b8a:	ed85 5a00 	vstr	s10, [r5]
 8008b8e:	ed96 1a01 	vldr	s2, [r6, #4]
 8008b92:	edd7 5a01 	vldr	s11, [r7, #4]
 8008b96:	ed92 aa00 	vldr	s20, [r2]
 8008b9a:	ed91 6a00 	vldr	s12, [r1]
 8008b9e:	ed9e 9a00 	vldr	s18, [lr]
 8008ba2:	ed95 5a01 	vldr	s10, [r5, #4]
 8008ba6:	eddc 6a01 	vldr	s13, [ip, #4]
 8008baa:	edd0 9a01 	vldr	s19, [r0, #4]
 8008bae:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8008bb2:	ee71 2a46 	vsub.f32	s5, s2, s12
 8008bb6:	ee75 3aca 	vsub.f32	s7, s11, s20
 8008bba:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008bbe:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8008bc2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008bc6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8008bca:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8008bce:	ee79 3a05 	vadd.f32	s7, s18, s10
 8008bd2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008bd6:	ee39 5a45 	vsub.f32	s10, s18, s10
 8008bda:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8008bde:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008be2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8008be6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008bea:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008bee:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008bf2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8008bf6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008bfa:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008bfe:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008c02:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008c06:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008c0a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008c0e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8008c12:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8008c16:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008c1a:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008c1e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8008c22:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008c26:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008c2a:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008c2e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008c32:	ee33 8a06 	vadd.f32	s16, s6, s12
 8008c36:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008c3a:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008c3e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008c42:	ee74 0a61 	vsub.f32	s1, s8, s3
 8008c46:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008c4a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008c4e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8008c52:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008c56:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008c5a:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008c5e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008c62:	ee74 4a85 	vadd.f32	s9, s9, s10
 8008c66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c6a:	44d8      	add	r8, fp
 8008c6c:	45c1      	cmp	r9, r8
 8008c6e:	ed8e 9a00 	vstr	s18, [lr]
 8008c72:	ed85 1a01 	vstr	s2, [r5, #4]
 8008c76:	449e      	add	lr, r3
 8008c78:	ed8c 8a00 	vstr	s16, [ip]
 8008c7c:	441d      	add	r5, r3
 8008c7e:	ed80 6a00 	vstr	s12, [r0]
 8008c82:	edcc 0a01 	vstr	s1, [ip, #4]
 8008c86:	ed80 4a01 	vstr	s8, [r0, #4]
 8008c8a:	449c      	add	ip, r3
 8008c8c:	ed87 2a00 	vstr	s4, [r7]
 8008c90:	4418      	add	r0, r3
 8008c92:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008c96:	ed42 2a01 	vstr	s5, [r2, #-4]
 8008c9a:	ed86 7a00 	vstr	s14, [r6]
 8008c9e:	ed87 3a01 	vstr	s6, [r7, #4]
 8008ca2:	edc1 4a00 	vstr	s9, [r1]
 8008ca6:	441f      	add	r7, r3
 8008ca8:	edc2 5a00 	vstr	s11, [r2]
 8008cac:	4419      	add	r1, r3
 8008cae:	edc6 6a01 	vstr	s13, [r6, #4]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	441e      	add	r6, r3
 8008cb6:	f63f af44 	bhi.w	8008b42 <arm_radix8_butterfly_f32+0x66>
 8008cba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cbc:	2907      	cmp	r1, #7
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f240 81e9 	bls.w	8009096 <arm_radix8_butterfly_f32+0x5ba>
 8008cc4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8008cc8:	193e      	adds	r6, r7, r4
 8008cca:	1935      	adds	r5, r6, r4
 8008ccc:	9c03      	ldr	r4, [sp, #12]
 8008cce:	9000      	str	r0, [sp, #0]
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	1828      	adds	r0, r5, r0
 8008cdc:	eb00 0e01 	add.w	lr, r0, r1
 8008ce0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ce2:	440a      	add	r2, r1
 8008ce4:	eb04 0c01 	add.w	ip, r4, r1
 8008ce8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8008cec:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8008cf0:	9a00      	ldr	r2, [sp, #0]
 8008cf2:	940f      	str	r4, [sp, #60]	; 0x3c
 8008cf4:	00ed      	lsls	r5, r5, #3
 8008cf6:	9511      	str	r5, [sp, #68]	; 0x44
 8008cf8:	00d5      	lsls	r5, r2, #3
 8008cfa:	950d      	str	r5, [sp, #52]	; 0x34
 8008cfc:	9d01      	ldr	r5, [sp, #4]
 8008cfe:	3508      	adds	r5, #8
 8008d00:	9516      	str	r5, [sp, #88]	; 0x58
 8008d02:	9d02      	ldr	r5, [sp, #8]
 8008d04:	3508      	adds	r5, #8
 8008d06:	0114      	lsls	r4, r2, #4
 8008d08:	9517      	str	r5, [sp, #92]	; 0x5c
 8008d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d0c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008d0e:	940e      	str	r4, [sp, #56]	; 0x38
 8008d10:	00c0      	lsls	r0, r0, #3
 8008d12:	9010      	str	r0, [sp, #64]	; 0x40
 8008d14:	18aa      	adds	r2, r5, r2
 8008d16:	9207      	str	r2, [sp, #28]
 8008d18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008d1c:	18aa      	adds	r2, r5, r2
 8008d1e:	9208      	str	r2, [sp, #32]
 8008d20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d22:	18aa      	adds	r2, r5, r2
 8008d24:	9209      	str	r2, [sp, #36]	; 0x24
 8008d26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008d2a:	f10e 0204 	add.w	r2, lr, #4
 8008d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8008d30:	00c9      	lsls	r1, r1, #3
 8008d32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d34:	310c      	adds	r1, #12
 8008d36:	00f6      	lsls	r6, r6, #3
 8008d38:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8008d3c:	9114      	str	r1, [sp, #80]	; 0x50
 8008d3e:	18a9      	adds	r1, r5, r2
 8008d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d42:	9612      	str	r6, [sp, #72]	; 0x48
 8008d44:	00ff      	lsls	r7, r7, #3
 8008d46:	19ae      	adds	r6, r5, r6
 8008d48:	3008      	adds	r0, #8
 8008d4a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008d4e:	9606      	str	r6, [sp, #24]
 8008d50:	9019      	str	r0, [sp, #100]	; 0x64
 8008d52:	18aa      	adds	r2, r5, r2
 8008d54:	0164      	lsls	r4, r4, #5
 8008d56:	19ee      	adds	r6, r5, r7
 8008d58:	f10c 000c 	add.w	r0, ip, #12
 8008d5c:	9713      	str	r7, [sp, #76]	; 0x4c
 8008d5e:	9604      	str	r6, [sp, #16]
 8008d60:	9015      	str	r0, [sp, #84]	; 0x54
 8008d62:	9103      	str	r1, [sp, #12]
 8008d64:	9205      	str	r2, [sp, #20]
 8008d66:	f104 0208 	add.w	r2, r4, #8
 8008d6a:	9218      	str	r2, [sp, #96]	; 0x60
 8008d6c:	f04f 0801 	mov.w	r8, #1
 8008d70:	2200      	movs	r2, #0
 8008d72:	f102 0108 	add.w	r1, r2, #8
 8008d76:	460f      	mov	r7, r1
 8008d78:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d7c:	188e      	adds	r6, r1, r2
 8008d7e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d80:	188d      	adds	r5, r1, r2
 8008d82:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008d84:	188c      	adds	r4, r1, r2
 8008d86:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008d88:	1888      	adds	r0, r1, r2
 8008d8a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008d8c:	eb01 0c02 	add.w	ip, r1, r2
 8008d90:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008d92:	440a      	add	r2, r1
 8008d94:	9903      	ldr	r1, [sp, #12]
 8008d96:	edd1 fa00 	vldr	s31, [r1]
 8008d9a:	9905      	ldr	r1, [sp, #20]
 8008d9c:	ed91 fa00 	vldr	s30, [r1]
 8008da0:	9904      	ldr	r1, [sp, #16]
 8008da2:	edd1 ea00 	vldr	s29, [r1]
 8008da6:	9906      	ldr	r1, [sp, #24]
 8008da8:	ed91 ea00 	vldr	s28, [r1]
 8008dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dae:	edd1 da00 	vldr	s27, [r1]
 8008db2:	9908      	ldr	r1, [sp, #32]
 8008db4:	ed91 da00 	vldr	s26, [r1]
 8008db8:	9907      	ldr	r1, [sp, #28]
 8008dba:	edd1 ca00 	vldr	s25, [r1]
 8008dbe:	9903      	ldr	r1, [sp, #12]
 8008dc0:	ed91 ca01 	vldr	s24, [r1, #4]
 8008dc4:	9905      	ldr	r1, [sp, #20]
 8008dc6:	edd1 ba01 	vldr	s23, [r1, #4]
 8008dca:	9904      	ldr	r1, [sp, #16]
 8008dcc:	edd1 aa01 	vldr	s21, [r1, #4]
 8008dd0:	9906      	ldr	r1, [sp, #24]
 8008dd2:	ed91 aa01 	vldr	s20, [r1, #4]
 8008dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dd8:	edd1 7a01 	vldr	s15, [r1, #4]
 8008ddc:	9908      	ldr	r1, [sp, #32]
 8008dde:	edcd 7a00 	vstr	s15, [sp]
 8008de2:	edd1 7a01 	vldr	s15, [r1, #4]
 8008de6:	9907      	ldr	r1, [sp, #28]
 8008de8:	edcd 7a01 	vstr	s15, [sp, #4]
 8008dec:	edd1 7a01 	vldr	s15, [r1, #4]
 8008df0:	eb0a 0e07 	add.w	lr, sl, r7
 8008df4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008df6:	edcd 7a02 	vstr	s15, [sp, #8]
 8008dfa:	eb0c 010a 	add.w	r1, ip, sl
 8008dfe:	4456      	add	r6, sl
 8008e00:	4455      	add	r5, sl
 8008e02:	4454      	add	r4, sl
 8008e04:	4450      	add	r0, sl
 8008e06:	4452      	add	r2, sl
 8008e08:	46c4      	mov	ip, r8
 8008e0a:	e001      	b.n	8008e10 <arm_radix8_butterfly_f32+0x334>
 8008e0c:	3f3504f3 	.word	0x3f3504f3
 8008e10:	ed96 5a00 	vldr	s10, [r6]
 8008e14:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008e18:	ed11 6a01 	vldr	s12, [r1, #-4]
 8008e1c:	edd0 7a00 	vldr	s15, [r0]
 8008e20:	ed17 7a01 	vldr	s14, [r7, #-4]
 8008e24:	edde 3a00 	vldr	s7, [lr]
 8008e28:	ed94 3a00 	vldr	s6, [r4]
 8008e2c:	ed95 2a00 	vldr	s4, [r5]
 8008e30:	ed9e 0a01 	vldr	s0, [lr, #4]
 8008e34:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008e38:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008e3c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008e40:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008e44:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008e48:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008e4c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008e50:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e58:	ed8e 6a00 	vstr	s12, [lr]
 8008e5c:	edd0 8a01 	vldr	s17, [r0, #4]
 8008e60:	ed95 9a01 	vldr	s18, [r5, #4]
 8008e64:	edd1 2a00 	vldr	s5, [r1]
 8008e68:	ed97 7a00 	vldr	s14, [r7]
 8008e6c:	edd4 0a01 	vldr	s1, [r4, #4]
 8008e70:	ed96 6a01 	vldr	s12, [r6, #4]
 8008e74:	edd2 5a00 	vldr	s11, [r2]
 8008e78:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008e7c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008e80:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008e84:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008e88:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008e8c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008e90:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008e94:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008e98:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008e9c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008ea0:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008ea4:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008ea8:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008eac:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008eb0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008eb4:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008eb8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008ebc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008ec0:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008ec4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008ec8:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008ecc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008ed0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008ed4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008ed8:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008edc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008ee0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008ee4:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008ee8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008eec:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008ef0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008ef4:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008ef8:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008efc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008f00:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008f04:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008f08:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008f0c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008f10:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008f14:	ee72 4a24 	vadd.f32	s9, s4, s9
 8008f18:	ee30 4a60 	vsub.f32	s8, s0, s1
 8008f1c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008f20:	ee30 0a20 	vadd.f32	s0, s0, s1
 8008f24:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008f28:	ee36 6a03 	vadd.f32	s12, s12, s6
 8008f2c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008f30:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8008f34:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008f38:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8008f3c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008f40:	ee39 1a01 	vadd.f32	s2, s18, s2
 8008f44:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008f48:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8008f4c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008f50:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8008f54:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008f58:	ee35 3a03 	vadd.f32	s6, s10, s6
 8008f5c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008f60:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8008f64:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008f68:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008f6c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8008f70:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008f74:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008f78:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008f7c:	ed86 3a00 	vstr	s6, [r6]
 8008f80:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008f84:	ee32 2a05 	vadd.f32	s4, s4, s10
 8008f88:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008f8c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008f90:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008f94:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008f98:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008f9c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008fa0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008fa4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008fa8:	ed9d 4a00 	vldr	s8, [sp]
 8008fac:	edc6 6a01 	vstr	s13, [r6, #4]
 8008fb0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008fb4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008fb8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008fbc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008fc0:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008fc4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008fc8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8008fcc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008fd0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008fd4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8008fd8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008fdc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008fe0:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008fe4:	ee30 0a68 	vsub.f32	s0, s0, s17
 8008fe8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008fec:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008ff0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008ff4:	44dc      	add	ip, fp
 8008ff6:	45e1      	cmp	r9, ip
 8008ff8:	ed84 9a00 	vstr	s18, [r4]
 8008ffc:	edc4 3a01 	vstr	s7, [r4, #4]
 8009000:	449e      	add	lr, r3
 8009002:	ed02 7a01 	vstr	s14, [r2, #-4]
 8009006:	edc2 2a00 	vstr	s5, [r2]
 800900a:	441e      	add	r6, r3
 800900c:	ed85 2a00 	vstr	s4, [r5]
 8009010:	ed85 8a01 	vstr	s16, [r5, #4]
 8009014:	441c      	add	r4, r3
 8009016:	ed47 1a01 	vstr	s3, [r7, #-4]
 800901a:	ed87 0a00 	vstr	s0, [r7]
 800901e:	441a      	add	r2, r3
 8009020:	ed41 4a01 	vstr	s9, [r1, #-4]
 8009024:	edc1 9a00 	vstr	s19, [r1]
 8009028:	441d      	add	r5, r3
 800902a:	edc0 0a00 	vstr	s1, [r0]
 800902e:	441f      	add	r7, r3
 8009030:	ed80 6a01 	vstr	s12, [r0, #4]
 8009034:	4419      	add	r1, r3
 8009036:	4418      	add	r0, r3
 8009038:	f63f aeea 	bhi.w	8008e10 <arm_radix8_butterfly_f32+0x334>
 800903c:	9a03      	ldr	r2, [sp, #12]
 800903e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009040:	440a      	add	r2, r1
 8009042:	9203      	str	r2, [sp, #12]
 8009044:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009046:	9a05      	ldr	r2, [sp, #20]
 8009048:	440a      	add	r2, r1
 800904a:	9205      	str	r2, [sp, #20]
 800904c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800904e:	9a04      	ldr	r2, [sp, #16]
 8009050:	440a      	add	r2, r1
 8009052:	9204      	str	r2, [sp, #16]
 8009054:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009056:	9a06      	ldr	r2, [sp, #24]
 8009058:	440a      	add	r2, r1
 800905a:	9206      	str	r2, [sp, #24]
 800905c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800905e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009060:	440a      	add	r2, r1
 8009062:	9209      	str	r2, [sp, #36]	; 0x24
 8009064:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009066:	9a08      	ldr	r2, [sp, #32]
 8009068:	440a      	add	r2, r1
 800906a:	9208      	str	r2, [sp, #32]
 800906c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800906e:	9a07      	ldr	r2, [sp, #28]
 8009070:	440a      	add	r2, r1
 8009072:	9207      	str	r2, [sp, #28]
 8009074:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009078:	f108 0801 	add.w	r8, r8, #1
 800907c:	3208      	adds	r2, #8
 800907e:	4588      	cmp	r8, r1
 8009080:	920a      	str	r2, [sp, #40]	; 0x28
 8009082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009084:	f47f ae75 	bne.w	8008d72 <arm_radix8_butterfly_f32+0x296>
 8009088:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	46c3      	mov	fp, r8
 8009090:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8009094:	e532      	b.n	8008afc <arm_radix8_butterfly_f32+0x20>
 8009096:	b01d      	add	sp, #116	; 0x74
 8009098:	ecbd 8b10 	vpop	{d8-d15}
 800909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090a0 <__errno>:
 80090a0:	4b01      	ldr	r3, [pc, #4]	; (80090a8 <__errno+0x8>)
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000038 	.word	0x20000038

080090ac <__libc_init_array>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	4d0d      	ldr	r5, [pc, #52]	; (80090e4 <__libc_init_array+0x38>)
 80090b0:	4c0d      	ldr	r4, [pc, #52]	; (80090e8 <__libc_init_array+0x3c>)
 80090b2:	1b64      	subs	r4, r4, r5
 80090b4:	10a4      	asrs	r4, r4, #2
 80090b6:	2600      	movs	r6, #0
 80090b8:	42a6      	cmp	r6, r4
 80090ba:	d109      	bne.n	80090d0 <__libc_init_array+0x24>
 80090bc:	4d0b      	ldr	r5, [pc, #44]	; (80090ec <__libc_init_array+0x40>)
 80090be:	4c0c      	ldr	r4, [pc, #48]	; (80090f0 <__libc_init_array+0x44>)
 80090c0:	f001 f95a 	bl	800a378 <_init>
 80090c4:	1b64      	subs	r4, r4, r5
 80090c6:	10a4      	asrs	r4, r4, #2
 80090c8:	2600      	movs	r6, #0
 80090ca:	42a6      	cmp	r6, r4
 80090cc:	d105      	bne.n	80090da <__libc_init_array+0x2e>
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d4:	4798      	blx	r3
 80090d6:	3601      	adds	r6, #1
 80090d8:	e7ee      	b.n	80090b8 <__libc_init_array+0xc>
 80090da:	f855 3b04 	ldr.w	r3, [r5], #4
 80090de:	4798      	blx	r3
 80090e0:	3601      	adds	r6, #1
 80090e2:	e7f2      	b.n	80090ca <__libc_init_array+0x1e>
 80090e4:	0801dc08 	.word	0x0801dc08
 80090e8:	0801dc08 	.word	0x0801dc08
 80090ec:	0801dc08 	.word	0x0801dc08
 80090f0:	0801dc0c 	.word	0x0801dc0c

080090f4 <memcpy>:
 80090f4:	440a      	add	r2, r1
 80090f6:	4291      	cmp	r1, r2
 80090f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090fc:	d100      	bne.n	8009100 <memcpy+0xc>
 80090fe:	4770      	bx	lr
 8009100:	b510      	push	{r4, lr}
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800910a:	4291      	cmp	r1, r2
 800910c:	d1f9      	bne.n	8009102 <memcpy+0xe>
 800910e:	bd10      	pop	{r4, pc}

08009110 <memset>:
 8009110:	4402      	add	r2, r0
 8009112:	4603      	mov	r3, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	d100      	bne.n	800911a <memset+0xa>
 8009118:	4770      	bx	lr
 800911a:	f803 1b01 	strb.w	r1, [r3], #1
 800911e:	e7f9      	b.n	8009114 <memset+0x4>

08009120 <iprintf>:
 8009120:	b40f      	push	{r0, r1, r2, r3}
 8009122:	4b0a      	ldr	r3, [pc, #40]	; (800914c <iprintf+0x2c>)
 8009124:	b513      	push	{r0, r1, r4, lr}
 8009126:	681c      	ldr	r4, [r3, #0]
 8009128:	b124      	cbz	r4, 8009134 <iprintf+0x14>
 800912a:	69a3      	ldr	r3, [r4, #24]
 800912c:	b913      	cbnz	r3, 8009134 <iprintf+0x14>
 800912e:	4620      	mov	r0, r4
 8009130:	f000 f866 	bl	8009200 <__sinit>
 8009134:	ab05      	add	r3, sp, #20
 8009136:	9a04      	ldr	r2, [sp, #16]
 8009138:	68a1      	ldr	r1, [r4, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	4620      	mov	r0, r4
 800913e:	f000 f9bd 	bl	80094bc <_vfiprintf_r>
 8009142:	b002      	add	sp, #8
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	b004      	add	sp, #16
 800914a:	4770      	bx	lr
 800914c:	20000038 	.word	0x20000038

08009150 <std>:
 8009150:	2300      	movs	r3, #0
 8009152:	b510      	push	{r4, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	e9c0 3300 	strd	r3, r3, [r0]
 800915a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800915e:	6083      	str	r3, [r0, #8]
 8009160:	8181      	strh	r1, [r0, #12]
 8009162:	6643      	str	r3, [r0, #100]	; 0x64
 8009164:	81c2      	strh	r2, [r0, #14]
 8009166:	6183      	str	r3, [r0, #24]
 8009168:	4619      	mov	r1, r3
 800916a:	2208      	movs	r2, #8
 800916c:	305c      	adds	r0, #92	; 0x5c
 800916e:	f7ff ffcf 	bl	8009110 <memset>
 8009172:	4b05      	ldr	r3, [pc, #20]	; (8009188 <std+0x38>)
 8009174:	6263      	str	r3, [r4, #36]	; 0x24
 8009176:	4b05      	ldr	r3, [pc, #20]	; (800918c <std+0x3c>)
 8009178:	62a3      	str	r3, [r4, #40]	; 0x28
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <std+0x40>)
 800917c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <std+0x44>)
 8009180:	6224      	str	r4, [r4, #32]
 8009182:	6323      	str	r3, [r4, #48]	; 0x30
 8009184:	bd10      	pop	{r4, pc}
 8009186:	bf00      	nop
 8009188:	08009a65 	.word	0x08009a65
 800918c:	08009a87 	.word	0x08009a87
 8009190:	08009abf 	.word	0x08009abf
 8009194:	08009ae3 	.word	0x08009ae3

08009198 <_cleanup_r>:
 8009198:	4901      	ldr	r1, [pc, #4]	; (80091a0 <_cleanup_r+0x8>)
 800919a:	f000 b8af 	b.w	80092fc <_fwalk_reent>
 800919e:	bf00      	nop
 80091a0:	08009dbd 	.word	0x08009dbd

080091a4 <__sfmoreglue>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	2268      	movs	r2, #104	; 0x68
 80091a8:	1e4d      	subs	r5, r1, #1
 80091aa:	4355      	muls	r5, r2
 80091ac:	460e      	mov	r6, r1
 80091ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091b2:	f000 f8e5 	bl	8009380 <_malloc_r>
 80091b6:	4604      	mov	r4, r0
 80091b8:	b140      	cbz	r0, 80091cc <__sfmoreglue+0x28>
 80091ba:	2100      	movs	r1, #0
 80091bc:	e9c0 1600 	strd	r1, r6, [r0]
 80091c0:	300c      	adds	r0, #12
 80091c2:	60a0      	str	r0, [r4, #8]
 80091c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091c8:	f7ff ffa2 	bl	8009110 <memset>
 80091cc:	4620      	mov	r0, r4
 80091ce:	bd70      	pop	{r4, r5, r6, pc}

080091d0 <__sfp_lock_acquire>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__sfp_lock_acquire+0x8>)
 80091d2:	f000 b8b3 	b.w	800933c <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	20005191 	.word	0x20005191

080091dc <__sfp_lock_release>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__sfp_lock_release+0x8>)
 80091de:	f000 b8ae 	b.w	800933e <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	20005191 	.word	0x20005191

080091e8 <__sinit_lock_acquire>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__sinit_lock_acquire+0x8>)
 80091ea:	f000 b8a7 	b.w	800933c <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	20005192 	.word	0x20005192

080091f4 <__sinit_lock_release>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__sinit_lock_release+0x8>)
 80091f6:	f000 b8a2 	b.w	800933e <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	20005192 	.word	0x20005192

08009200 <__sinit>:
 8009200:	b510      	push	{r4, lr}
 8009202:	4604      	mov	r4, r0
 8009204:	f7ff fff0 	bl	80091e8 <__sinit_lock_acquire>
 8009208:	69a3      	ldr	r3, [r4, #24]
 800920a:	b11b      	cbz	r3, 8009214 <__sinit+0x14>
 800920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009210:	f7ff bff0 	b.w	80091f4 <__sinit_lock_release>
 8009214:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009218:	6523      	str	r3, [r4, #80]	; 0x50
 800921a:	4b13      	ldr	r3, [pc, #76]	; (8009268 <__sinit+0x68>)
 800921c:	4a13      	ldr	r2, [pc, #76]	; (800926c <__sinit+0x6c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	62a2      	str	r2, [r4, #40]	; 0x28
 8009222:	42a3      	cmp	r3, r4
 8009224:	bf04      	itt	eq
 8009226:	2301      	moveq	r3, #1
 8009228:	61a3      	streq	r3, [r4, #24]
 800922a:	4620      	mov	r0, r4
 800922c:	f000 f820 	bl	8009270 <__sfp>
 8009230:	6060      	str	r0, [r4, #4]
 8009232:	4620      	mov	r0, r4
 8009234:	f000 f81c 	bl	8009270 <__sfp>
 8009238:	60a0      	str	r0, [r4, #8]
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f818 	bl	8009270 <__sfp>
 8009240:	2200      	movs	r2, #0
 8009242:	60e0      	str	r0, [r4, #12]
 8009244:	2104      	movs	r1, #4
 8009246:	6860      	ldr	r0, [r4, #4]
 8009248:	f7ff ff82 	bl	8009150 <std>
 800924c:	68a0      	ldr	r0, [r4, #8]
 800924e:	2201      	movs	r2, #1
 8009250:	2109      	movs	r1, #9
 8009252:	f7ff ff7d 	bl	8009150 <std>
 8009256:	68e0      	ldr	r0, [r4, #12]
 8009258:	2202      	movs	r2, #2
 800925a:	2112      	movs	r1, #18
 800925c:	f7ff ff78 	bl	8009150 <std>
 8009260:	2301      	movs	r3, #1
 8009262:	61a3      	str	r3, [r4, #24]
 8009264:	e7d2      	b.n	800920c <__sinit+0xc>
 8009266:	bf00      	nop
 8009268:	0801db68 	.word	0x0801db68
 800926c:	08009199 	.word	0x08009199

08009270 <__sfp>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	4607      	mov	r7, r0
 8009274:	f7ff ffac 	bl	80091d0 <__sfp_lock_acquire>
 8009278:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <__sfp+0x84>)
 800927a:	681e      	ldr	r6, [r3, #0]
 800927c:	69b3      	ldr	r3, [r6, #24]
 800927e:	b913      	cbnz	r3, 8009286 <__sfp+0x16>
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff ffbd 	bl	8009200 <__sinit>
 8009286:	3648      	adds	r6, #72	; 0x48
 8009288:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800928c:	3b01      	subs	r3, #1
 800928e:	d503      	bpl.n	8009298 <__sfp+0x28>
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	b30b      	cbz	r3, 80092d8 <__sfp+0x68>
 8009294:	6836      	ldr	r6, [r6, #0]
 8009296:	e7f7      	b.n	8009288 <__sfp+0x18>
 8009298:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800929c:	b9d5      	cbnz	r5, 80092d4 <__sfp+0x64>
 800929e:	4b16      	ldr	r3, [pc, #88]	; (80092f8 <__sfp+0x88>)
 80092a0:	60e3      	str	r3, [r4, #12]
 80092a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092a6:	6665      	str	r5, [r4, #100]	; 0x64
 80092a8:	f000 f847 	bl	800933a <__retarget_lock_init_recursive>
 80092ac:	f7ff ff96 	bl	80091dc <__sfp_lock_release>
 80092b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	61a5      	str	r5, [r4, #24]
 80092bc:	2208      	movs	r2, #8
 80092be:	4629      	mov	r1, r5
 80092c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092c4:	f7ff ff24 	bl	8009110 <memset>
 80092c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092d0:	4620      	mov	r0, r4
 80092d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d4:	3468      	adds	r4, #104	; 0x68
 80092d6:	e7d9      	b.n	800928c <__sfp+0x1c>
 80092d8:	2104      	movs	r1, #4
 80092da:	4638      	mov	r0, r7
 80092dc:	f7ff ff62 	bl	80091a4 <__sfmoreglue>
 80092e0:	4604      	mov	r4, r0
 80092e2:	6030      	str	r0, [r6, #0]
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d1d5      	bne.n	8009294 <__sfp+0x24>
 80092e8:	f7ff ff78 	bl	80091dc <__sfp_lock_release>
 80092ec:	230c      	movs	r3, #12
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	e7ee      	b.n	80092d0 <__sfp+0x60>
 80092f2:	bf00      	nop
 80092f4:	0801db68 	.word	0x0801db68
 80092f8:	ffff0001 	.word	0xffff0001

080092fc <_fwalk_reent>:
 80092fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009300:	4606      	mov	r6, r0
 8009302:	4688      	mov	r8, r1
 8009304:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009308:	2700      	movs	r7, #0
 800930a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800930e:	f1b9 0901 	subs.w	r9, r9, #1
 8009312:	d505      	bpl.n	8009320 <_fwalk_reent+0x24>
 8009314:	6824      	ldr	r4, [r4, #0]
 8009316:	2c00      	cmp	r4, #0
 8009318:	d1f7      	bne.n	800930a <_fwalk_reent+0xe>
 800931a:	4638      	mov	r0, r7
 800931c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009320:	89ab      	ldrh	r3, [r5, #12]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d907      	bls.n	8009336 <_fwalk_reent+0x3a>
 8009326:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800932a:	3301      	adds	r3, #1
 800932c:	d003      	beq.n	8009336 <_fwalk_reent+0x3a>
 800932e:	4629      	mov	r1, r5
 8009330:	4630      	mov	r0, r6
 8009332:	47c0      	blx	r8
 8009334:	4307      	orrs	r7, r0
 8009336:	3568      	adds	r5, #104	; 0x68
 8009338:	e7e9      	b.n	800930e <_fwalk_reent+0x12>

0800933a <__retarget_lock_init_recursive>:
 800933a:	4770      	bx	lr

0800933c <__retarget_lock_acquire_recursive>:
 800933c:	4770      	bx	lr

0800933e <__retarget_lock_release_recursive>:
 800933e:	4770      	bx	lr

08009340 <sbrk_aligned>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	4e0e      	ldr	r6, [pc, #56]	; (800937c <sbrk_aligned+0x3c>)
 8009344:	460c      	mov	r4, r1
 8009346:	6831      	ldr	r1, [r6, #0]
 8009348:	4605      	mov	r5, r0
 800934a:	b911      	cbnz	r1, 8009352 <sbrk_aligned+0x12>
 800934c:	f000 fb7a 	bl	8009a44 <_sbrk_r>
 8009350:	6030      	str	r0, [r6, #0]
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f000 fb75 	bl	8009a44 <_sbrk_r>
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	d00a      	beq.n	8009374 <sbrk_aligned+0x34>
 800935e:	1cc4      	adds	r4, r0, #3
 8009360:	f024 0403 	bic.w	r4, r4, #3
 8009364:	42a0      	cmp	r0, r4
 8009366:	d007      	beq.n	8009378 <sbrk_aligned+0x38>
 8009368:	1a21      	subs	r1, r4, r0
 800936a:	4628      	mov	r0, r5
 800936c:	f000 fb6a 	bl	8009a44 <_sbrk_r>
 8009370:	3001      	adds	r0, #1
 8009372:	d101      	bne.n	8009378 <sbrk_aligned+0x38>
 8009374:	f04f 34ff 	mov.w	r4, #4294967295
 8009378:	4620      	mov	r0, r4
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	20005198 	.word	0x20005198

08009380 <_malloc_r>:
 8009380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009384:	1ccd      	adds	r5, r1, #3
 8009386:	f025 0503 	bic.w	r5, r5, #3
 800938a:	3508      	adds	r5, #8
 800938c:	2d0c      	cmp	r5, #12
 800938e:	bf38      	it	cc
 8009390:	250c      	movcc	r5, #12
 8009392:	2d00      	cmp	r5, #0
 8009394:	4607      	mov	r7, r0
 8009396:	db01      	blt.n	800939c <_malloc_r+0x1c>
 8009398:	42a9      	cmp	r1, r5
 800939a:	d905      	bls.n	80093a8 <_malloc_r+0x28>
 800939c:	230c      	movs	r3, #12
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	2600      	movs	r6, #0
 80093a2:	4630      	mov	r0, r6
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a8:	4e2e      	ldr	r6, [pc, #184]	; (8009464 <_malloc_r+0xe4>)
 80093aa:	f000 fdbb 	bl	8009f24 <__malloc_lock>
 80093ae:	6833      	ldr	r3, [r6, #0]
 80093b0:	461c      	mov	r4, r3
 80093b2:	bb34      	cbnz	r4, 8009402 <_malloc_r+0x82>
 80093b4:	4629      	mov	r1, r5
 80093b6:	4638      	mov	r0, r7
 80093b8:	f7ff ffc2 	bl	8009340 <sbrk_aligned>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	4604      	mov	r4, r0
 80093c0:	d14d      	bne.n	800945e <_malloc_r+0xde>
 80093c2:	6834      	ldr	r4, [r6, #0]
 80093c4:	4626      	mov	r6, r4
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	d140      	bne.n	800944c <_malloc_r+0xcc>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	4631      	mov	r1, r6
 80093ce:	4638      	mov	r0, r7
 80093d0:	eb04 0803 	add.w	r8, r4, r3
 80093d4:	f000 fb36 	bl	8009a44 <_sbrk_r>
 80093d8:	4580      	cmp	r8, r0
 80093da:	d13a      	bne.n	8009452 <_malloc_r+0xd2>
 80093dc:	6821      	ldr	r1, [r4, #0]
 80093de:	3503      	adds	r5, #3
 80093e0:	1a6d      	subs	r5, r5, r1
 80093e2:	f025 0503 	bic.w	r5, r5, #3
 80093e6:	3508      	adds	r5, #8
 80093e8:	2d0c      	cmp	r5, #12
 80093ea:	bf38      	it	cc
 80093ec:	250c      	movcc	r5, #12
 80093ee:	4629      	mov	r1, r5
 80093f0:	4638      	mov	r0, r7
 80093f2:	f7ff ffa5 	bl	8009340 <sbrk_aligned>
 80093f6:	3001      	adds	r0, #1
 80093f8:	d02b      	beq.n	8009452 <_malloc_r+0xd2>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	442b      	add	r3, r5
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	e00e      	b.n	8009420 <_malloc_r+0xa0>
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	1b52      	subs	r2, r2, r5
 8009406:	d41e      	bmi.n	8009446 <_malloc_r+0xc6>
 8009408:	2a0b      	cmp	r2, #11
 800940a:	d916      	bls.n	800943a <_malloc_r+0xba>
 800940c:	1961      	adds	r1, r4, r5
 800940e:	42a3      	cmp	r3, r4
 8009410:	6025      	str	r5, [r4, #0]
 8009412:	bf18      	it	ne
 8009414:	6059      	strne	r1, [r3, #4]
 8009416:	6863      	ldr	r3, [r4, #4]
 8009418:	bf08      	it	eq
 800941a:	6031      	streq	r1, [r6, #0]
 800941c:	5162      	str	r2, [r4, r5]
 800941e:	604b      	str	r3, [r1, #4]
 8009420:	4638      	mov	r0, r7
 8009422:	f104 060b 	add.w	r6, r4, #11
 8009426:	f000 fd83 	bl	8009f30 <__malloc_unlock>
 800942a:	f026 0607 	bic.w	r6, r6, #7
 800942e:	1d23      	adds	r3, r4, #4
 8009430:	1af2      	subs	r2, r6, r3
 8009432:	d0b6      	beq.n	80093a2 <_malloc_r+0x22>
 8009434:	1b9b      	subs	r3, r3, r6
 8009436:	50a3      	str	r3, [r4, r2]
 8009438:	e7b3      	b.n	80093a2 <_malloc_r+0x22>
 800943a:	6862      	ldr	r2, [r4, #4]
 800943c:	42a3      	cmp	r3, r4
 800943e:	bf0c      	ite	eq
 8009440:	6032      	streq	r2, [r6, #0]
 8009442:	605a      	strne	r2, [r3, #4]
 8009444:	e7ec      	b.n	8009420 <_malloc_r+0xa0>
 8009446:	4623      	mov	r3, r4
 8009448:	6864      	ldr	r4, [r4, #4]
 800944a:	e7b2      	b.n	80093b2 <_malloc_r+0x32>
 800944c:	4634      	mov	r4, r6
 800944e:	6876      	ldr	r6, [r6, #4]
 8009450:	e7b9      	b.n	80093c6 <_malloc_r+0x46>
 8009452:	230c      	movs	r3, #12
 8009454:	603b      	str	r3, [r7, #0]
 8009456:	4638      	mov	r0, r7
 8009458:	f000 fd6a 	bl	8009f30 <__malloc_unlock>
 800945c:	e7a1      	b.n	80093a2 <_malloc_r+0x22>
 800945e:	6025      	str	r5, [r4, #0]
 8009460:	e7de      	b.n	8009420 <_malloc_r+0xa0>
 8009462:	bf00      	nop
 8009464:	20005194 	.word	0x20005194

08009468 <__sfputc_r>:
 8009468:	6893      	ldr	r3, [r2, #8]
 800946a:	3b01      	subs	r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	b410      	push	{r4}
 8009470:	6093      	str	r3, [r2, #8]
 8009472:	da08      	bge.n	8009486 <__sfputc_r+0x1e>
 8009474:	6994      	ldr	r4, [r2, #24]
 8009476:	42a3      	cmp	r3, r4
 8009478:	db01      	blt.n	800947e <__sfputc_r+0x16>
 800947a:	290a      	cmp	r1, #10
 800947c:	d103      	bne.n	8009486 <__sfputc_r+0x1e>
 800947e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009482:	f000 bb33 	b.w	8009aec <__swbuf_r>
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	1c58      	adds	r0, r3, #1
 800948a:	6010      	str	r0, [r2, #0]
 800948c:	7019      	strb	r1, [r3, #0]
 800948e:	4608      	mov	r0, r1
 8009490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009494:	4770      	bx	lr

08009496 <__sfputs_r>:
 8009496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009498:	4606      	mov	r6, r0
 800949a:	460f      	mov	r7, r1
 800949c:	4614      	mov	r4, r2
 800949e:	18d5      	adds	r5, r2, r3
 80094a0:	42ac      	cmp	r4, r5
 80094a2:	d101      	bne.n	80094a8 <__sfputs_r+0x12>
 80094a4:	2000      	movs	r0, #0
 80094a6:	e007      	b.n	80094b8 <__sfputs_r+0x22>
 80094a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ac:	463a      	mov	r2, r7
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff ffda 	bl	8009468 <__sfputc_r>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d1f3      	bne.n	80094a0 <__sfputs_r+0xa>
 80094b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094bc <_vfiprintf_r>:
 80094bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	460d      	mov	r5, r1
 80094c2:	b09d      	sub	sp, #116	; 0x74
 80094c4:	4614      	mov	r4, r2
 80094c6:	4698      	mov	r8, r3
 80094c8:	4606      	mov	r6, r0
 80094ca:	b118      	cbz	r0, 80094d4 <_vfiprintf_r+0x18>
 80094cc:	6983      	ldr	r3, [r0, #24]
 80094ce:	b90b      	cbnz	r3, 80094d4 <_vfiprintf_r+0x18>
 80094d0:	f7ff fe96 	bl	8009200 <__sinit>
 80094d4:	4b89      	ldr	r3, [pc, #548]	; (80096fc <_vfiprintf_r+0x240>)
 80094d6:	429d      	cmp	r5, r3
 80094d8:	d11b      	bne.n	8009512 <_vfiprintf_r+0x56>
 80094da:	6875      	ldr	r5, [r6, #4]
 80094dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094de:	07d9      	lsls	r1, r3, #31
 80094e0:	d405      	bmi.n	80094ee <_vfiprintf_r+0x32>
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	059a      	lsls	r2, r3, #22
 80094e6:	d402      	bmi.n	80094ee <_vfiprintf_r+0x32>
 80094e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ea:	f7ff ff27 	bl	800933c <__retarget_lock_acquire_recursive>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	071b      	lsls	r3, r3, #28
 80094f2:	d501      	bpl.n	80094f8 <_vfiprintf_r+0x3c>
 80094f4:	692b      	ldr	r3, [r5, #16]
 80094f6:	b9eb      	cbnz	r3, 8009534 <_vfiprintf_r+0x78>
 80094f8:	4629      	mov	r1, r5
 80094fa:	4630      	mov	r0, r6
 80094fc:	f000 fb5a 	bl	8009bb4 <__swsetup_r>
 8009500:	b1c0      	cbz	r0, 8009534 <_vfiprintf_r+0x78>
 8009502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009504:	07dc      	lsls	r4, r3, #31
 8009506:	d50e      	bpl.n	8009526 <_vfiprintf_r+0x6a>
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	b01d      	add	sp, #116	; 0x74
 800950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009512:	4b7b      	ldr	r3, [pc, #492]	; (8009700 <_vfiprintf_r+0x244>)
 8009514:	429d      	cmp	r5, r3
 8009516:	d101      	bne.n	800951c <_vfiprintf_r+0x60>
 8009518:	68b5      	ldr	r5, [r6, #8]
 800951a:	e7df      	b.n	80094dc <_vfiprintf_r+0x20>
 800951c:	4b79      	ldr	r3, [pc, #484]	; (8009704 <_vfiprintf_r+0x248>)
 800951e:	429d      	cmp	r5, r3
 8009520:	bf08      	it	eq
 8009522:	68f5      	ldreq	r5, [r6, #12]
 8009524:	e7da      	b.n	80094dc <_vfiprintf_r+0x20>
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	0598      	lsls	r0, r3, #22
 800952a:	d4ed      	bmi.n	8009508 <_vfiprintf_r+0x4c>
 800952c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800952e:	f7ff ff06 	bl	800933e <__retarget_lock_release_recursive>
 8009532:	e7e9      	b.n	8009508 <_vfiprintf_r+0x4c>
 8009534:	2300      	movs	r3, #0
 8009536:	9309      	str	r3, [sp, #36]	; 0x24
 8009538:	2320      	movs	r3, #32
 800953a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800953e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009542:	2330      	movs	r3, #48	; 0x30
 8009544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009708 <_vfiprintf_r+0x24c>
 8009548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800954c:	f04f 0901 	mov.w	r9, #1
 8009550:	4623      	mov	r3, r4
 8009552:	469a      	mov	sl, r3
 8009554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009558:	b10a      	cbz	r2, 800955e <_vfiprintf_r+0xa2>
 800955a:	2a25      	cmp	r2, #37	; 0x25
 800955c:	d1f9      	bne.n	8009552 <_vfiprintf_r+0x96>
 800955e:	ebba 0b04 	subs.w	fp, sl, r4
 8009562:	d00b      	beq.n	800957c <_vfiprintf_r+0xc0>
 8009564:	465b      	mov	r3, fp
 8009566:	4622      	mov	r2, r4
 8009568:	4629      	mov	r1, r5
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff ff93 	bl	8009496 <__sfputs_r>
 8009570:	3001      	adds	r0, #1
 8009572:	f000 80aa 	beq.w	80096ca <_vfiprintf_r+0x20e>
 8009576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009578:	445a      	add	r2, fp
 800957a:	9209      	str	r2, [sp, #36]	; 0x24
 800957c:	f89a 3000 	ldrb.w	r3, [sl]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 80a2 	beq.w	80096ca <_vfiprintf_r+0x20e>
 8009586:	2300      	movs	r3, #0
 8009588:	f04f 32ff 	mov.w	r2, #4294967295
 800958c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009590:	f10a 0a01 	add.w	sl, sl, #1
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800959c:	931a      	str	r3, [sp, #104]	; 0x68
 800959e:	4654      	mov	r4, sl
 80095a0:	2205      	movs	r2, #5
 80095a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a6:	4858      	ldr	r0, [pc, #352]	; (8009708 <_vfiprintf_r+0x24c>)
 80095a8:	f7f6 fe82 	bl	80002b0 <memchr>
 80095ac:	9a04      	ldr	r2, [sp, #16]
 80095ae:	b9d8      	cbnz	r0, 80095e8 <_vfiprintf_r+0x12c>
 80095b0:	06d1      	lsls	r1, r2, #27
 80095b2:	bf44      	itt	mi
 80095b4:	2320      	movmi	r3, #32
 80095b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ba:	0713      	lsls	r3, r2, #28
 80095bc:	bf44      	itt	mi
 80095be:	232b      	movmi	r3, #43	; 0x2b
 80095c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c4:	f89a 3000 	ldrb.w	r3, [sl]
 80095c8:	2b2a      	cmp	r3, #42	; 0x2a
 80095ca:	d015      	beq.n	80095f8 <_vfiprintf_r+0x13c>
 80095cc:	9a07      	ldr	r2, [sp, #28]
 80095ce:	4654      	mov	r4, sl
 80095d0:	2000      	movs	r0, #0
 80095d2:	f04f 0c0a 	mov.w	ip, #10
 80095d6:	4621      	mov	r1, r4
 80095d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095dc:	3b30      	subs	r3, #48	; 0x30
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d94e      	bls.n	8009680 <_vfiprintf_r+0x1c4>
 80095e2:	b1b0      	cbz	r0, 8009612 <_vfiprintf_r+0x156>
 80095e4:	9207      	str	r2, [sp, #28]
 80095e6:	e014      	b.n	8009612 <_vfiprintf_r+0x156>
 80095e8:	eba0 0308 	sub.w	r3, r0, r8
 80095ec:	fa09 f303 	lsl.w	r3, r9, r3
 80095f0:	4313      	orrs	r3, r2
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	46a2      	mov	sl, r4
 80095f6:	e7d2      	b.n	800959e <_vfiprintf_r+0xe2>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	1d19      	adds	r1, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	9103      	str	r1, [sp, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	bfbb      	ittet	lt
 8009604:	425b      	neglt	r3, r3
 8009606:	f042 0202 	orrlt.w	r2, r2, #2
 800960a:	9307      	strge	r3, [sp, #28]
 800960c:	9307      	strlt	r3, [sp, #28]
 800960e:	bfb8      	it	lt
 8009610:	9204      	strlt	r2, [sp, #16]
 8009612:	7823      	ldrb	r3, [r4, #0]
 8009614:	2b2e      	cmp	r3, #46	; 0x2e
 8009616:	d10c      	bne.n	8009632 <_vfiprintf_r+0x176>
 8009618:	7863      	ldrb	r3, [r4, #1]
 800961a:	2b2a      	cmp	r3, #42	; 0x2a
 800961c:	d135      	bne.n	800968a <_vfiprintf_r+0x1ce>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	9203      	str	r2, [sp, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bfb8      	it	lt
 800962a:	f04f 33ff 	movlt.w	r3, #4294967295
 800962e:	3402      	adds	r4, #2
 8009630:	9305      	str	r3, [sp, #20]
 8009632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009718 <_vfiprintf_r+0x25c>
 8009636:	7821      	ldrb	r1, [r4, #0]
 8009638:	2203      	movs	r2, #3
 800963a:	4650      	mov	r0, sl
 800963c:	f7f6 fe38 	bl	80002b0 <memchr>
 8009640:	b140      	cbz	r0, 8009654 <_vfiprintf_r+0x198>
 8009642:	2340      	movs	r3, #64	; 0x40
 8009644:	eba0 000a 	sub.w	r0, r0, sl
 8009648:	fa03 f000 	lsl.w	r0, r3, r0
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	4303      	orrs	r3, r0
 8009650:	3401      	adds	r4, #1
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009658:	482c      	ldr	r0, [pc, #176]	; (800970c <_vfiprintf_r+0x250>)
 800965a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800965e:	2206      	movs	r2, #6
 8009660:	f7f6 fe26 	bl	80002b0 <memchr>
 8009664:	2800      	cmp	r0, #0
 8009666:	d03f      	beq.n	80096e8 <_vfiprintf_r+0x22c>
 8009668:	4b29      	ldr	r3, [pc, #164]	; (8009710 <_vfiprintf_r+0x254>)
 800966a:	bb1b      	cbnz	r3, 80096b4 <_vfiprintf_r+0x1f8>
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	3307      	adds	r3, #7
 8009670:	f023 0307 	bic.w	r3, r3, #7
 8009674:	3308      	adds	r3, #8
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967a:	443b      	add	r3, r7
 800967c:	9309      	str	r3, [sp, #36]	; 0x24
 800967e:	e767      	b.n	8009550 <_vfiprintf_r+0x94>
 8009680:	fb0c 3202 	mla	r2, ip, r2, r3
 8009684:	460c      	mov	r4, r1
 8009686:	2001      	movs	r0, #1
 8009688:	e7a5      	b.n	80095d6 <_vfiprintf_r+0x11a>
 800968a:	2300      	movs	r3, #0
 800968c:	3401      	adds	r4, #1
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	4619      	mov	r1, r3
 8009692:	f04f 0c0a 	mov.w	ip, #10
 8009696:	4620      	mov	r0, r4
 8009698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800969c:	3a30      	subs	r2, #48	; 0x30
 800969e:	2a09      	cmp	r2, #9
 80096a0:	d903      	bls.n	80096aa <_vfiprintf_r+0x1ee>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0c5      	beq.n	8009632 <_vfiprintf_r+0x176>
 80096a6:	9105      	str	r1, [sp, #20]
 80096a8:	e7c3      	b.n	8009632 <_vfiprintf_r+0x176>
 80096aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ae:	4604      	mov	r4, r0
 80096b0:	2301      	movs	r3, #1
 80096b2:	e7f0      	b.n	8009696 <_vfiprintf_r+0x1da>
 80096b4:	ab03      	add	r3, sp, #12
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	462a      	mov	r2, r5
 80096ba:	4b16      	ldr	r3, [pc, #88]	; (8009714 <_vfiprintf_r+0x258>)
 80096bc:	a904      	add	r1, sp, #16
 80096be:	4630      	mov	r0, r6
 80096c0:	f3af 8000 	nop.w
 80096c4:	4607      	mov	r7, r0
 80096c6:	1c78      	adds	r0, r7, #1
 80096c8:	d1d6      	bne.n	8009678 <_vfiprintf_r+0x1bc>
 80096ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096cc:	07d9      	lsls	r1, r3, #31
 80096ce:	d405      	bmi.n	80096dc <_vfiprintf_r+0x220>
 80096d0:	89ab      	ldrh	r3, [r5, #12]
 80096d2:	059a      	lsls	r2, r3, #22
 80096d4:	d402      	bmi.n	80096dc <_vfiprintf_r+0x220>
 80096d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096d8:	f7ff fe31 	bl	800933e <__retarget_lock_release_recursive>
 80096dc:	89ab      	ldrh	r3, [r5, #12]
 80096de:	065b      	lsls	r3, r3, #25
 80096e0:	f53f af12 	bmi.w	8009508 <_vfiprintf_r+0x4c>
 80096e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e6:	e711      	b.n	800950c <_vfiprintf_r+0x50>
 80096e8:	ab03      	add	r3, sp, #12
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	462a      	mov	r2, r5
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <_vfiprintf_r+0x258>)
 80096f0:	a904      	add	r1, sp, #16
 80096f2:	4630      	mov	r0, r6
 80096f4:	f000 f880 	bl	80097f8 <_printf_i>
 80096f8:	e7e4      	b.n	80096c4 <_vfiprintf_r+0x208>
 80096fa:	bf00      	nop
 80096fc:	0801db8c 	.word	0x0801db8c
 8009700:	0801dbac 	.word	0x0801dbac
 8009704:	0801db6c 	.word	0x0801db6c
 8009708:	0801dbcc 	.word	0x0801dbcc
 800970c:	0801dbd6 	.word	0x0801dbd6
 8009710:	00000000 	.word	0x00000000
 8009714:	08009497 	.word	0x08009497
 8009718:	0801dbd2 	.word	0x0801dbd2

0800971c <_printf_common>:
 800971c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009720:	4616      	mov	r6, r2
 8009722:	4699      	mov	r9, r3
 8009724:	688a      	ldr	r2, [r1, #8]
 8009726:	690b      	ldr	r3, [r1, #16]
 8009728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800972c:	4293      	cmp	r3, r2
 800972e:	bfb8      	it	lt
 8009730:	4613      	movlt	r3, r2
 8009732:	6033      	str	r3, [r6, #0]
 8009734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009738:	4607      	mov	r7, r0
 800973a:	460c      	mov	r4, r1
 800973c:	b10a      	cbz	r2, 8009742 <_printf_common+0x26>
 800973e:	3301      	adds	r3, #1
 8009740:	6033      	str	r3, [r6, #0]
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	0699      	lsls	r1, r3, #26
 8009746:	bf42      	ittt	mi
 8009748:	6833      	ldrmi	r3, [r6, #0]
 800974a:	3302      	addmi	r3, #2
 800974c:	6033      	strmi	r3, [r6, #0]
 800974e:	6825      	ldr	r5, [r4, #0]
 8009750:	f015 0506 	ands.w	r5, r5, #6
 8009754:	d106      	bne.n	8009764 <_printf_common+0x48>
 8009756:	f104 0a19 	add.w	sl, r4, #25
 800975a:	68e3      	ldr	r3, [r4, #12]
 800975c:	6832      	ldr	r2, [r6, #0]
 800975e:	1a9b      	subs	r3, r3, r2
 8009760:	42ab      	cmp	r3, r5
 8009762:	dc26      	bgt.n	80097b2 <_printf_common+0x96>
 8009764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009768:	1e13      	subs	r3, r2, #0
 800976a:	6822      	ldr	r2, [r4, #0]
 800976c:	bf18      	it	ne
 800976e:	2301      	movne	r3, #1
 8009770:	0692      	lsls	r2, r2, #26
 8009772:	d42b      	bmi.n	80097cc <_printf_common+0xb0>
 8009774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009778:	4649      	mov	r1, r9
 800977a:	4638      	mov	r0, r7
 800977c:	47c0      	blx	r8
 800977e:	3001      	adds	r0, #1
 8009780:	d01e      	beq.n	80097c0 <_printf_common+0xa4>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	68e5      	ldr	r5, [r4, #12]
 8009786:	6832      	ldr	r2, [r6, #0]
 8009788:	f003 0306 	and.w	r3, r3, #6
 800978c:	2b04      	cmp	r3, #4
 800978e:	bf08      	it	eq
 8009790:	1aad      	subeq	r5, r5, r2
 8009792:	68a3      	ldr	r3, [r4, #8]
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	bf0c      	ite	eq
 8009798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800979c:	2500      	movne	r5, #0
 800979e:	4293      	cmp	r3, r2
 80097a0:	bfc4      	itt	gt
 80097a2:	1a9b      	subgt	r3, r3, r2
 80097a4:	18ed      	addgt	r5, r5, r3
 80097a6:	2600      	movs	r6, #0
 80097a8:	341a      	adds	r4, #26
 80097aa:	42b5      	cmp	r5, r6
 80097ac:	d11a      	bne.n	80097e4 <_printf_common+0xc8>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e008      	b.n	80097c4 <_printf_common+0xa8>
 80097b2:	2301      	movs	r3, #1
 80097b4:	4652      	mov	r2, sl
 80097b6:	4649      	mov	r1, r9
 80097b8:	4638      	mov	r0, r7
 80097ba:	47c0      	blx	r8
 80097bc:	3001      	adds	r0, #1
 80097be:	d103      	bne.n	80097c8 <_printf_common+0xac>
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c8:	3501      	adds	r5, #1
 80097ca:	e7c6      	b.n	800975a <_printf_common+0x3e>
 80097cc:	18e1      	adds	r1, r4, r3
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	2030      	movs	r0, #48	; 0x30
 80097d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097d6:	4422      	add	r2, r4
 80097d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097e0:	3302      	adds	r3, #2
 80097e2:	e7c7      	b.n	8009774 <_printf_common+0x58>
 80097e4:	2301      	movs	r3, #1
 80097e6:	4622      	mov	r2, r4
 80097e8:	4649      	mov	r1, r9
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c0      	blx	r8
 80097ee:	3001      	adds	r0, #1
 80097f0:	d0e6      	beq.n	80097c0 <_printf_common+0xa4>
 80097f2:	3601      	adds	r6, #1
 80097f4:	e7d9      	b.n	80097aa <_printf_common+0x8e>
	...

080097f8 <_printf_i>:
 80097f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	7e0f      	ldrb	r7, [r1, #24]
 80097fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009800:	2f78      	cmp	r7, #120	; 0x78
 8009802:	4691      	mov	r9, r2
 8009804:	4680      	mov	r8, r0
 8009806:	460c      	mov	r4, r1
 8009808:	469a      	mov	sl, r3
 800980a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800980e:	d807      	bhi.n	8009820 <_printf_i+0x28>
 8009810:	2f62      	cmp	r7, #98	; 0x62
 8009812:	d80a      	bhi.n	800982a <_printf_i+0x32>
 8009814:	2f00      	cmp	r7, #0
 8009816:	f000 80d8 	beq.w	80099ca <_printf_i+0x1d2>
 800981a:	2f58      	cmp	r7, #88	; 0x58
 800981c:	f000 80a3 	beq.w	8009966 <_printf_i+0x16e>
 8009820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009828:	e03a      	b.n	80098a0 <_printf_i+0xa8>
 800982a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800982e:	2b15      	cmp	r3, #21
 8009830:	d8f6      	bhi.n	8009820 <_printf_i+0x28>
 8009832:	a101      	add	r1, pc, #4	; (adr r1, 8009838 <_printf_i+0x40>)
 8009834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009838:	08009891 	.word	0x08009891
 800983c:	080098a5 	.word	0x080098a5
 8009840:	08009821 	.word	0x08009821
 8009844:	08009821 	.word	0x08009821
 8009848:	08009821 	.word	0x08009821
 800984c:	08009821 	.word	0x08009821
 8009850:	080098a5 	.word	0x080098a5
 8009854:	08009821 	.word	0x08009821
 8009858:	08009821 	.word	0x08009821
 800985c:	08009821 	.word	0x08009821
 8009860:	08009821 	.word	0x08009821
 8009864:	080099b1 	.word	0x080099b1
 8009868:	080098d5 	.word	0x080098d5
 800986c:	08009993 	.word	0x08009993
 8009870:	08009821 	.word	0x08009821
 8009874:	08009821 	.word	0x08009821
 8009878:	080099d3 	.word	0x080099d3
 800987c:	08009821 	.word	0x08009821
 8009880:	080098d5 	.word	0x080098d5
 8009884:	08009821 	.word	0x08009821
 8009888:	08009821 	.word	0x08009821
 800988c:	0800999b 	.word	0x0800999b
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	1d1a      	adds	r2, r3, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	602a      	str	r2, [r5, #0]
 8009898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800989c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0a3      	b.n	80099ec <_printf_i+0x1f4>
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	6829      	ldr	r1, [r5, #0]
 80098a8:	0606      	lsls	r6, r0, #24
 80098aa:	f101 0304 	add.w	r3, r1, #4
 80098ae:	d50a      	bpl.n	80098c6 <_printf_i+0xce>
 80098b0:	680e      	ldr	r6, [r1, #0]
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	2e00      	cmp	r6, #0
 80098b6:	da03      	bge.n	80098c0 <_printf_i+0xc8>
 80098b8:	232d      	movs	r3, #45	; 0x2d
 80098ba:	4276      	negs	r6, r6
 80098bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098c0:	485e      	ldr	r0, [pc, #376]	; (8009a3c <_printf_i+0x244>)
 80098c2:	230a      	movs	r3, #10
 80098c4:	e019      	b.n	80098fa <_printf_i+0x102>
 80098c6:	680e      	ldr	r6, [r1, #0]
 80098c8:	602b      	str	r3, [r5, #0]
 80098ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098ce:	bf18      	it	ne
 80098d0:	b236      	sxthne	r6, r6
 80098d2:	e7ef      	b.n	80098b4 <_printf_i+0xbc>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	6820      	ldr	r0, [r4, #0]
 80098d8:	1d19      	adds	r1, r3, #4
 80098da:	6029      	str	r1, [r5, #0]
 80098dc:	0601      	lsls	r1, r0, #24
 80098de:	d501      	bpl.n	80098e4 <_printf_i+0xec>
 80098e0:	681e      	ldr	r6, [r3, #0]
 80098e2:	e002      	b.n	80098ea <_printf_i+0xf2>
 80098e4:	0646      	lsls	r6, r0, #25
 80098e6:	d5fb      	bpl.n	80098e0 <_printf_i+0xe8>
 80098e8:	881e      	ldrh	r6, [r3, #0]
 80098ea:	4854      	ldr	r0, [pc, #336]	; (8009a3c <_printf_i+0x244>)
 80098ec:	2f6f      	cmp	r7, #111	; 0x6f
 80098ee:	bf0c      	ite	eq
 80098f0:	2308      	moveq	r3, #8
 80098f2:	230a      	movne	r3, #10
 80098f4:	2100      	movs	r1, #0
 80098f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098fa:	6865      	ldr	r5, [r4, #4]
 80098fc:	60a5      	str	r5, [r4, #8]
 80098fe:	2d00      	cmp	r5, #0
 8009900:	bfa2      	ittt	ge
 8009902:	6821      	ldrge	r1, [r4, #0]
 8009904:	f021 0104 	bicge.w	r1, r1, #4
 8009908:	6021      	strge	r1, [r4, #0]
 800990a:	b90e      	cbnz	r6, 8009910 <_printf_i+0x118>
 800990c:	2d00      	cmp	r5, #0
 800990e:	d04d      	beq.n	80099ac <_printf_i+0x1b4>
 8009910:	4615      	mov	r5, r2
 8009912:	fbb6 f1f3 	udiv	r1, r6, r3
 8009916:	fb03 6711 	mls	r7, r3, r1, r6
 800991a:	5dc7      	ldrb	r7, [r0, r7]
 800991c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009920:	4637      	mov	r7, r6
 8009922:	42bb      	cmp	r3, r7
 8009924:	460e      	mov	r6, r1
 8009926:	d9f4      	bls.n	8009912 <_printf_i+0x11a>
 8009928:	2b08      	cmp	r3, #8
 800992a:	d10b      	bne.n	8009944 <_printf_i+0x14c>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	07de      	lsls	r6, r3, #31
 8009930:	d508      	bpl.n	8009944 <_printf_i+0x14c>
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	6861      	ldr	r1, [r4, #4]
 8009936:	4299      	cmp	r1, r3
 8009938:	bfde      	ittt	le
 800993a:	2330      	movle	r3, #48	; 0x30
 800993c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009940:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009944:	1b52      	subs	r2, r2, r5
 8009946:	6122      	str	r2, [r4, #16]
 8009948:	f8cd a000 	str.w	sl, [sp]
 800994c:	464b      	mov	r3, r9
 800994e:	aa03      	add	r2, sp, #12
 8009950:	4621      	mov	r1, r4
 8009952:	4640      	mov	r0, r8
 8009954:	f7ff fee2 	bl	800971c <_printf_common>
 8009958:	3001      	adds	r0, #1
 800995a:	d14c      	bne.n	80099f6 <_printf_i+0x1fe>
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	b004      	add	sp, #16
 8009962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009966:	4835      	ldr	r0, [pc, #212]	; (8009a3c <_printf_i+0x244>)
 8009968:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800996c:	6829      	ldr	r1, [r5, #0]
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	f851 6b04 	ldr.w	r6, [r1], #4
 8009974:	6029      	str	r1, [r5, #0]
 8009976:	061d      	lsls	r5, r3, #24
 8009978:	d514      	bpl.n	80099a4 <_printf_i+0x1ac>
 800997a:	07df      	lsls	r7, r3, #31
 800997c:	bf44      	itt	mi
 800997e:	f043 0320 	orrmi.w	r3, r3, #32
 8009982:	6023      	strmi	r3, [r4, #0]
 8009984:	b91e      	cbnz	r6, 800998e <_printf_i+0x196>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	f023 0320 	bic.w	r3, r3, #32
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	2310      	movs	r3, #16
 8009990:	e7b0      	b.n	80098f4 <_printf_i+0xfc>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	f043 0320 	orr.w	r3, r3, #32
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	2378      	movs	r3, #120	; 0x78
 800999c:	4828      	ldr	r0, [pc, #160]	; (8009a40 <_printf_i+0x248>)
 800999e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099a2:	e7e3      	b.n	800996c <_printf_i+0x174>
 80099a4:	0659      	lsls	r1, r3, #25
 80099a6:	bf48      	it	mi
 80099a8:	b2b6      	uxthmi	r6, r6
 80099aa:	e7e6      	b.n	800997a <_printf_i+0x182>
 80099ac:	4615      	mov	r5, r2
 80099ae:	e7bb      	b.n	8009928 <_printf_i+0x130>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	6826      	ldr	r6, [r4, #0]
 80099b4:	6961      	ldr	r1, [r4, #20]
 80099b6:	1d18      	adds	r0, r3, #4
 80099b8:	6028      	str	r0, [r5, #0]
 80099ba:	0635      	lsls	r5, r6, #24
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	d501      	bpl.n	80099c4 <_printf_i+0x1cc>
 80099c0:	6019      	str	r1, [r3, #0]
 80099c2:	e002      	b.n	80099ca <_printf_i+0x1d2>
 80099c4:	0670      	lsls	r0, r6, #25
 80099c6:	d5fb      	bpl.n	80099c0 <_printf_i+0x1c8>
 80099c8:	8019      	strh	r1, [r3, #0]
 80099ca:	2300      	movs	r3, #0
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	4615      	mov	r5, r2
 80099d0:	e7ba      	b.n	8009948 <_printf_i+0x150>
 80099d2:	682b      	ldr	r3, [r5, #0]
 80099d4:	1d1a      	adds	r2, r3, #4
 80099d6:	602a      	str	r2, [r5, #0]
 80099d8:	681d      	ldr	r5, [r3, #0]
 80099da:	6862      	ldr	r2, [r4, #4]
 80099dc:	2100      	movs	r1, #0
 80099de:	4628      	mov	r0, r5
 80099e0:	f7f6 fc66 	bl	80002b0 <memchr>
 80099e4:	b108      	cbz	r0, 80099ea <_printf_i+0x1f2>
 80099e6:	1b40      	subs	r0, r0, r5
 80099e8:	6060      	str	r0, [r4, #4]
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	6123      	str	r3, [r4, #16]
 80099ee:	2300      	movs	r3, #0
 80099f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f4:	e7a8      	b.n	8009948 <_printf_i+0x150>
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	462a      	mov	r2, r5
 80099fa:	4649      	mov	r1, r9
 80099fc:	4640      	mov	r0, r8
 80099fe:	47d0      	blx	sl
 8009a00:	3001      	adds	r0, #1
 8009a02:	d0ab      	beq.n	800995c <_printf_i+0x164>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	079b      	lsls	r3, r3, #30
 8009a08:	d413      	bmi.n	8009a32 <_printf_i+0x23a>
 8009a0a:	68e0      	ldr	r0, [r4, #12]
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	4298      	cmp	r0, r3
 8009a10:	bfb8      	it	lt
 8009a12:	4618      	movlt	r0, r3
 8009a14:	e7a4      	b.n	8009960 <_printf_i+0x168>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4632      	mov	r2, r6
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	47d0      	blx	sl
 8009a20:	3001      	adds	r0, #1
 8009a22:	d09b      	beq.n	800995c <_printf_i+0x164>
 8009a24:	3501      	adds	r5, #1
 8009a26:	68e3      	ldr	r3, [r4, #12]
 8009a28:	9903      	ldr	r1, [sp, #12]
 8009a2a:	1a5b      	subs	r3, r3, r1
 8009a2c:	42ab      	cmp	r3, r5
 8009a2e:	dcf2      	bgt.n	8009a16 <_printf_i+0x21e>
 8009a30:	e7eb      	b.n	8009a0a <_printf_i+0x212>
 8009a32:	2500      	movs	r5, #0
 8009a34:	f104 0619 	add.w	r6, r4, #25
 8009a38:	e7f5      	b.n	8009a26 <_printf_i+0x22e>
 8009a3a:	bf00      	nop
 8009a3c:	0801dbdd 	.word	0x0801dbdd
 8009a40:	0801dbee 	.word	0x0801dbee

08009a44 <_sbrk_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d06      	ldr	r5, [pc, #24]	; (8009a60 <_sbrk_r+0x1c>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	f7f7 ff9a 	bl	8001988 <_sbrk>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_sbrk_r+0x1a>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_sbrk_r+0x1a>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	2000519c 	.word	0x2000519c

08009a64 <__sread>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	460c      	mov	r4, r1
 8009a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6c:	f000 fab2 	bl	8009fd4 <_read_r>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	bfab      	itete	ge
 8009a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a76:	89a3      	ldrhlt	r3, [r4, #12]
 8009a78:	181b      	addge	r3, r3, r0
 8009a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a7e:	bfac      	ite	ge
 8009a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a82:	81a3      	strhlt	r3, [r4, #12]
 8009a84:	bd10      	pop	{r4, pc}

08009a86 <__swrite>:
 8009a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8a:	461f      	mov	r7, r3
 8009a8c:	898b      	ldrh	r3, [r1, #12]
 8009a8e:	05db      	lsls	r3, r3, #23
 8009a90:	4605      	mov	r5, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	4616      	mov	r6, r2
 8009a96:	d505      	bpl.n	8009aa4 <__swrite+0x1e>
 8009a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f000 f9c8 	bl	8009e34 <_lseek_r>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aba:	f000 b869 	b.w	8009b90 <_write_r>

08009abe <__sseek>:
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac6:	f000 f9b5 	bl	8009e34 <_lseek_r>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	bf15      	itete	ne
 8009ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ada:	81a3      	strheq	r3, [r4, #12]
 8009adc:	bf18      	it	ne
 8009ade:	81a3      	strhne	r3, [r4, #12]
 8009ae0:	bd10      	pop	{r4, pc}

08009ae2 <__sclose>:
 8009ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae6:	f000 b8d3 	b.w	8009c90 <_close_r>
	...

08009aec <__swbuf_r>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	460e      	mov	r6, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	4605      	mov	r5, r0
 8009af4:	b118      	cbz	r0, 8009afe <__swbuf_r+0x12>
 8009af6:	6983      	ldr	r3, [r0, #24]
 8009af8:	b90b      	cbnz	r3, 8009afe <__swbuf_r+0x12>
 8009afa:	f7ff fb81 	bl	8009200 <__sinit>
 8009afe:	4b21      	ldr	r3, [pc, #132]	; (8009b84 <__swbuf_r+0x98>)
 8009b00:	429c      	cmp	r4, r3
 8009b02:	d12b      	bne.n	8009b5c <__swbuf_r+0x70>
 8009b04:	686c      	ldr	r4, [r5, #4]
 8009b06:	69a3      	ldr	r3, [r4, #24]
 8009b08:	60a3      	str	r3, [r4, #8]
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	071a      	lsls	r2, r3, #28
 8009b0e:	d52f      	bpl.n	8009b70 <__swbuf_r+0x84>
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	b36b      	cbz	r3, 8009b70 <__swbuf_r+0x84>
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	6820      	ldr	r0, [r4, #0]
 8009b18:	1ac0      	subs	r0, r0, r3
 8009b1a:	6963      	ldr	r3, [r4, #20]
 8009b1c:	b2f6      	uxtb	r6, r6
 8009b1e:	4283      	cmp	r3, r0
 8009b20:	4637      	mov	r7, r6
 8009b22:	dc04      	bgt.n	8009b2e <__swbuf_r+0x42>
 8009b24:	4621      	mov	r1, r4
 8009b26:	4628      	mov	r0, r5
 8009b28:	f000 f948 	bl	8009dbc <_fflush_r>
 8009b2c:	bb30      	cbnz	r0, 8009b7c <__swbuf_r+0x90>
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	60a3      	str	r3, [r4, #8]
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	6022      	str	r2, [r4, #0]
 8009b3a:	701e      	strb	r6, [r3, #0]
 8009b3c:	6963      	ldr	r3, [r4, #20]
 8009b3e:	3001      	adds	r0, #1
 8009b40:	4283      	cmp	r3, r0
 8009b42:	d004      	beq.n	8009b4e <__swbuf_r+0x62>
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	07db      	lsls	r3, r3, #31
 8009b48:	d506      	bpl.n	8009b58 <__swbuf_r+0x6c>
 8009b4a:	2e0a      	cmp	r6, #10
 8009b4c:	d104      	bne.n	8009b58 <__swbuf_r+0x6c>
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 f933 	bl	8009dbc <_fflush_r>
 8009b56:	b988      	cbnz	r0, 8009b7c <__swbuf_r+0x90>
 8009b58:	4638      	mov	r0, r7
 8009b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <__swbuf_r+0x9c>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d101      	bne.n	8009b66 <__swbuf_r+0x7a>
 8009b62:	68ac      	ldr	r4, [r5, #8]
 8009b64:	e7cf      	b.n	8009b06 <__swbuf_r+0x1a>
 8009b66:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <__swbuf_r+0xa0>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	bf08      	it	eq
 8009b6c:	68ec      	ldreq	r4, [r5, #12]
 8009b6e:	e7ca      	b.n	8009b06 <__swbuf_r+0x1a>
 8009b70:	4621      	mov	r1, r4
 8009b72:	4628      	mov	r0, r5
 8009b74:	f000 f81e 	bl	8009bb4 <__swsetup_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d0cb      	beq.n	8009b14 <__swbuf_r+0x28>
 8009b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b80:	e7ea      	b.n	8009b58 <__swbuf_r+0x6c>
 8009b82:	bf00      	nop
 8009b84:	0801db8c 	.word	0x0801db8c
 8009b88:	0801dbac 	.word	0x0801dbac
 8009b8c:	0801db6c 	.word	0x0801db6c

08009b90 <_write_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d07      	ldr	r5, [pc, #28]	; (8009bb0 <_write_r+0x20>)
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f7 fea1 	bl	80018e6 <_write>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_write_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_write_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	2000519c 	.word	0x2000519c

08009bb4 <__swsetup_r>:
 8009bb4:	4b32      	ldr	r3, [pc, #200]	; (8009c80 <__swsetup_r+0xcc>)
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	681d      	ldr	r5, [r3, #0]
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	b125      	cbz	r5, 8009bca <__swsetup_r+0x16>
 8009bc0:	69ab      	ldr	r3, [r5, #24]
 8009bc2:	b913      	cbnz	r3, 8009bca <__swsetup_r+0x16>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f7ff fb1b 	bl	8009200 <__sinit>
 8009bca:	4b2e      	ldr	r3, [pc, #184]	; (8009c84 <__swsetup_r+0xd0>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d10f      	bne.n	8009bf0 <__swsetup_r+0x3c>
 8009bd0:	686c      	ldr	r4, [r5, #4]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bd8:	0719      	lsls	r1, r3, #28
 8009bda:	d42c      	bmi.n	8009c36 <__swsetup_r+0x82>
 8009bdc:	06dd      	lsls	r5, r3, #27
 8009bde:	d411      	bmi.n	8009c04 <__swsetup_r+0x50>
 8009be0:	2309      	movs	r3, #9
 8009be2:	6033      	str	r3, [r6, #0]
 8009be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295
 8009bee:	e03e      	b.n	8009c6e <__swsetup_r+0xba>
 8009bf0:	4b25      	ldr	r3, [pc, #148]	; (8009c88 <__swsetup_r+0xd4>)
 8009bf2:	429c      	cmp	r4, r3
 8009bf4:	d101      	bne.n	8009bfa <__swsetup_r+0x46>
 8009bf6:	68ac      	ldr	r4, [r5, #8]
 8009bf8:	e7eb      	b.n	8009bd2 <__swsetup_r+0x1e>
 8009bfa:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <__swsetup_r+0xd8>)
 8009bfc:	429c      	cmp	r4, r3
 8009bfe:	bf08      	it	eq
 8009c00:	68ec      	ldreq	r4, [r5, #12]
 8009c02:	e7e6      	b.n	8009bd2 <__swsetup_r+0x1e>
 8009c04:	0758      	lsls	r0, r3, #29
 8009c06:	d512      	bpl.n	8009c2e <__swsetup_r+0x7a>
 8009c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0a:	b141      	cbz	r1, 8009c1e <__swsetup_r+0x6a>
 8009c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <__swsetup_r+0x66>
 8009c14:	4630      	mov	r0, r6
 8009c16:	f000 f991 	bl	8009f3c <_free_r>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	2300      	movs	r3, #0
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f043 0308 	orr.w	r3, r3, #8
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	b94b      	cbnz	r3, 8009c4e <__swsetup_r+0x9a>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c44:	d003      	beq.n	8009c4e <__swsetup_r+0x9a>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f000 f92b 	bl	8009ea4 <__smakebuf_r>
 8009c4e:	89a0      	ldrh	r0, [r4, #12]
 8009c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c54:	f010 0301 	ands.w	r3, r0, #1
 8009c58:	d00a      	beq.n	8009c70 <__swsetup_r+0xbc>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60a3      	str	r3, [r4, #8]
 8009c5e:	6963      	ldr	r3, [r4, #20]
 8009c60:	425b      	negs	r3, r3
 8009c62:	61a3      	str	r3, [r4, #24]
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	b943      	cbnz	r3, 8009c7a <__swsetup_r+0xc6>
 8009c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c6c:	d1ba      	bne.n	8009be4 <__swsetup_r+0x30>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	0781      	lsls	r1, r0, #30
 8009c72:	bf58      	it	pl
 8009c74:	6963      	ldrpl	r3, [r4, #20]
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	e7f4      	b.n	8009c64 <__swsetup_r+0xb0>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e7f7      	b.n	8009c6e <__swsetup_r+0xba>
 8009c7e:	bf00      	nop
 8009c80:	20000038 	.word	0x20000038
 8009c84:	0801db8c 	.word	0x0801db8c
 8009c88:	0801dbac 	.word	0x0801dbac
 8009c8c:	0801db6c 	.word	0x0801db6c

08009c90 <_close_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d06      	ldr	r5, [pc, #24]	; (8009cac <_close_r+0x1c>)
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	f7f7 fe3f 	bl	800191e <_close>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_close_r+0x1a>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_close_r+0x1a>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	2000519c 	.word	0x2000519c

08009cb0 <__sflush_r>:
 8009cb0:	898a      	ldrh	r2, [r1, #12]
 8009cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	0710      	lsls	r0, r2, #28
 8009cba:	460c      	mov	r4, r1
 8009cbc:	d458      	bmi.n	8009d70 <__sflush_r+0xc0>
 8009cbe:	684b      	ldr	r3, [r1, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc05      	bgt.n	8009cd0 <__sflush_r+0x20>
 8009cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dc02      	bgt.n	8009cd0 <__sflush_r+0x20>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	d0f9      	beq.n	8009cca <__sflush_r+0x1a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cdc:	682f      	ldr	r7, [r5, #0]
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	d032      	beq.n	8009d48 <__sflush_r+0x98>
 8009ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	075a      	lsls	r2, r3, #29
 8009ce8:	d505      	bpl.n	8009cf6 <__sflush_r+0x46>
 8009cea:	6863      	ldr	r3, [r4, #4]
 8009cec:	1ac0      	subs	r0, r0, r3
 8009cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf0:	b10b      	cbz	r3, 8009cf6 <__sflush_r+0x46>
 8009cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cf4:	1ac0      	subs	r0, r0, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cfc:	6a21      	ldr	r1, [r4, #32]
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b0      	blx	r6
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	d106      	bne.n	8009d16 <__sflush_r+0x66>
 8009d08:	6829      	ldr	r1, [r5, #0]
 8009d0a:	291d      	cmp	r1, #29
 8009d0c:	d82c      	bhi.n	8009d68 <__sflush_r+0xb8>
 8009d0e:	4a2a      	ldr	r2, [pc, #168]	; (8009db8 <__sflush_r+0x108>)
 8009d10:	40ca      	lsrs	r2, r1
 8009d12:	07d6      	lsls	r6, r2, #31
 8009d14:	d528      	bpl.n	8009d68 <__sflush_r+0xb8>
 8009d16:	2200      	movs	r2, #0
 8009d18:	6062      	str	r2, [r4, #4]
 8009d1a:	04d9      	lsls	r1, r3, #19
 8009d1c:	6922      	ldr	r2, [r4, #16]
 8009d1e:	6022      	str	r2, [r4, #0]
 8009d20:	d504      	bpl.n	8009d2c <__sflush_r+0x7c>
 8009d22:	1c42      	adds	r2, r0, #1
 8009d24:	d101      	bne.n	8009d2a <__sflush_r+0x7a>
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	b903      	cbnz	r3, 8009d2c <__sflush_r+0x7c>
 8009d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2e:	602f      	str	r7, [r5, #0]
 8009d30:	2900      	cmp	r1, #0
 8009d32:	d0ca      	beq.n	8009cca <__sflush_r+0x1a>
 8009d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <__sflush_r+0x92>
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f000 f8fd 	bl	8009f3c <_free_r>
 8009d42:	2000      	movs	r0, #0
 8009d44:	6360      	str	r0, [r4, #52]	; 0x34
 8009d46:	e7c1      	b.n	8009ccc <__sflush_r+0x1c>
 8009d48:	6a21      	ldr	r1, [r4, #32]
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	1c41      	adds	r1, r0, #1
 8009d52:	d1c7      	bne.n	8009ce4 <__sflush_r+0x34>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0c4      	beq.n	8009ce4 <__sflush_r+0x34>
 8009d5a:	2b1d      	cmp	r3, #29
 8009d5c:	d001      	beq.n	8009d62 <__sflush_r+0xb2>
 8009d5e:	2b16      	cmp	r3, #22
 8009d60:	d101      	bne.n	8009d66 <__sflush_r+0xb6>
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	e7b1      	b.n	8009cca <__sflush_r+0x1a>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7ad      	b.n	8009ccc <__sflush_r+0x1c>
 8009d70:	690f      	ldr	r7, [r1, #16]
 8009d72:	2f00      	cmp	r7, #0
 8009d74:	d0a9      	beq.n	8009cca <__sflush_r+0x1a>
 8009d76:	0793      	lsls	r3, r2, #30
 8009d78:	680e      	ldr	r6, [r1, #0]
 8009d7a:	bf08      	it	eq
 8009d7c:	694b      	ldreq	r3, [r1, #20]
 8009d7e:	600f      	str	r7, [r1, #0]
 8009d80:	bf18      	it	ne
 8009d82:	2300      	movne	r3, #0
 8009d84:	eba6 0807 	sub.w	r8, r6, r7
 8009d88:	608b      	str	r3, [r1, #8]
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	dd9c      	ble.n	8009cca <__sflush_r+0x1a>
 8009d90:	6a21      	ldr	r1, [r4, #32]
 8009d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d94:	4643      	mov	r3, r8
 8009d96:	463a      	mov	r2, r7
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b0      	blx	r6
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	dc06      	bgt.n	8009dae <__sflush_r+0xfe>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	e78e      	b.n	8009ccc <__sflush_r+0x1c>
 8009dae:	4407      	add	r7, r0
 8009db0:	eba8 0800 	sub.w	r8, r8, r0
 8009db4:	e7e9      	b.n	8009d8a <__sflush_r+0xda>
 8009db6:	bf00      	nop
 8009db8:	20400001 	.word	0x20400001

08009dbc <_fflush_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	690b      	ldr	r3, [r1, #16]
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	b913      	cbnz	r3, 8009dcc <_fflush_r+0x10>
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	4628      	mov	r0, r5
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	b118      	cbz	r0, 8009dd6 <_fflush_r+0x1a>
 8009dce:	6983      	ldr	r3, [r0, #24]
 8009dd0:	b90b      	cbnz	r3, 8009dd6 <_fflush_r+0x1a>
 8009dd2:	f7ff fa15 	bl	8009200 <__sinit>
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <_fflush_r+0x6c>)
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	d11b      	bne.n	8009e14 <_fflush_r+0x58>
 8009ddc:	686c      	ldr	r4, [r5, #4]
 8009dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0ef      	beq.n	8009dc6 <_fflush_r+0xa>
 8009de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009de8:	07d0      	lsls	r0, r2, #31
 8009dea:	d404      	bmi.n	8009df6 <_fflush_r+0x3a>
 8009dec:	0599      	lsls	r1, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_fflush_r+0x3a>
 8009df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df2:	f7ff faa3 	bl	800933c <__retarget_lock_acquire_recursive>
 8009df6:	4628      	mov	r0, r5
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f7ff ff59 	bl	8009cb0 <__sflush_r>
 8009dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e00:	07da      	lsls	r2, r3, #31
 8009e02:	4605      	mov	r5, r0
 8009e04:	d4e0      	bmi.n	8009dc8 <_fflush_r+0xc>
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	059b      	lsls	r3, r3, #22
 8009e0a:	d4dd      	bmi.n	8009dc8 <_fflush_r+0xc>
 8009e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0e:	f7ff fa96 	bl	800933e <__retarget_lock_release_recursive>
 8009e12:	e7d9      	b.n	8009dc8 <_fflush_r+0xc>
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <_fflush_r+0x70>)
 8009e16:	429c      	cmp	r4, r3
 8009e18:	d101      	bne.n	8009e1e <_fflush_r+0x62>
 8009e1a:	68ac      	ldr	r4, [r5, #8]
 8009e1c:	e7df      	b.n	8009dde <_fflush_r+0x22>
 8009e1e:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <_fflush_r+0x74>)
 8009e20:	429c      	cmp	r4, r3
 8009e22:	bf08      	it	eq
 8009e24:	68ec      	ldreq	r4, [r5, #12]
 8009e26:	e7da      	b.n	8009dde <_fflush_r+0x22>
 8009e28:	0801db8c 	.word	0x0801db8c
 8009e2c:	0801dbac 	.word	0x0801dbac
 8009e30:	0801db6c 	.word	0x0801db6c

08009e34 <_lseek_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_lseek_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f7 fd92 	bl	800196c <_lseek>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_lseek_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_lseek_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	2000519c 	.word	0x2000519c

08009e58 <__swhatbuf_r>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	460e      	mov	r6, r1
 8009e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e60:	2900      	cmp	r1, #0
 8009e62:	b096      	sub	sp, #88	; 0x58
 8009e64:	4614      	mov	r4, r2
 8009e66:	461d      	mov	r5, r3
 8009e68:	da08      	bge.n	8009e7c <__swhatbuf_r+0x24>
 8009e6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	602a      	str	r2, [r5, #0]
 8009e72:	061a      	lsls	r2, r3, #24
 8009e74:	d410      	bmi.n	8009e98 <__swhatbuf_r+0x40>
 8009e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e7a:	e00e      	b.n	8009e9a <__swhatbuf_r+0x42>
 8009e7c:	466a      	mov	r2, sp
 8009e7e:	f000 f8bb 	bl	8009ff8 <_fstat_r>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	dbf1      	blt.n	8009e6a <__swhatbuf_r+0x12>
 8009e86:	9a01      	ldr	r2, [sp, #4]
 8009e88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e90:	425a      	negs	r2, r3
 8009e92:	415a      	adcs	r2, r3
 8009e94:	602a      	str	r2, [r5, #0]
 8009e96:	e7ee      	b.n	8009e76 <__swhatbuf_r+0x1e>
 8009e98:	2340      	movs	r3, #64	; 0x40
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	b016      	add	sp, #88	; 0x58
 8009ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ea4 <__smakebuf_r>:
 8009ea4:	898b      	ldrh	r3, [r1, #12]
 8009ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ea8:	079d      	lsls	r5, r3, #30
 8009eaa:	4606      	mov	r6, r0
 8009eac:	460c      	mov	r4, r1
 8009eae:	d507      	bpl.n	8009ec0 <__smakebuf_r+0x1c>
 8009eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	6123      	str	r3, [r4, #16]
 8009eb8:	2301      	movs	r3, #1
 8009eba:	6163      	str	r3, [r4, #20]
 8009ebc:	b002      	add	sp, #8
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
 8009ec0:	ab01      	add	r3, sp, #4
 8009ec2:	466a      	mov	r2, sp
 8009ec4:	f7ff ffc8 	bl	8009e58 <__swhatbuf_r>
 8009ec8:	9900      	ldr	r1, [sp, #0]
 8009eca:	4605      	mov	r5, r0
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7ff fa57 	bl	8009380 <_malloc_r>
 8009ed2:	b948      	cbnz	r0, 8009ee8 <__smakebuf_r+0x44>
 8009ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed8:	059a      	lsls	r2, r3, #22
 8009eda:	d4ef      	bmi.n	8009ebc <__smakebuf_r+0x18>
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	f043 0302 	orr.w	r3, r3, #2
 8009ee4:	81a3      	strh	r3, [r4, #12]
 8009ee6:	e7e3      	b.n	8009eb0 <__smakebuf_r+0xc>
 8009ee8:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <__smakebuf_r+0x7c>)
 8009eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	6020      	str	r0, [r4, #0]
 8009ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef4:	81a3      	strh	r3, [r4, #12]
 8009ef6:	9b00      	ldr	r3, [sp, #0]
 8009ef8:	6163      	str	r3, [r4, #20]
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	6120      	str	r0, [r4, #16]
 8009efe:	b15b      	cbz	r3, 8009f18 <__smakebuf_r+0x74>
 8009f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f889 	bl	800a01c <_isatty_r>
 8009f0a:	b128      	cbz	r0, 8009f18 <__smakebuf_r+0x74>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	89a0      	ldrh	r0, [r4, #12]
 8009f1a:	4305      	orrs	r5, r0
 8009f1c:	81a5      	strh	r5, [r4, #12]
 8009f1e:	e7cd      	b.n	8009ebc <__smakebuf_r+0x18>
 8009f20:	08009199 	.word	0x08009199

08009f24 <__malloc_lock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__malloc_lock+0x8>)
 8009f26:	f7ff ba09 	b.w	800933c <__retarget_lock_acquire_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20005190 	.word	0x20005190

08009f30 <__malloc_unlock>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__malloc_unlock+0x8>)
 8009f32:	f7ff ba04 	b.w	800933e <__retarget_lock_release_recursive>
 8009f36:	bf00      	nop
 8009f38:	20005190 	.word	0x20005190

08009f3c <_free_r>:
 8009f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	d044      	beq.n	8009fcc <_free_r+0x90>
 8009f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f46:	9001      	str	r0, [sp, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f4e:	bfb8      	it	lt
 8009f50:	18e4      	addlt	r4, r4, r3
 8009f52:	f7ff ffe7 	bl	8009f24 <__malloc_lock>
 8009f56:	4a1e      	ldr	r2, [pc, #120]	; (8009fd0 <_free_r+0x94>)
 8009f58:	9801      	ldr	r0, [sp, #4]
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	b933      	cbnz	r3, 8009f6c <_free_r+0x30>
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	6014      	str	r4, [r2, #0]
 8009f62:	b003      	add	sp, #12
 8009f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f68:	f7ff bfe2 	b.w	8009f30 <__malloc_unlock>
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d908      	bls.n	8009f82 <_free_r+0x46>
 8009f70:	6825      	ldr	r5, [r4, #0]
 8009f72:	1961      	adds	r1, r4, r5
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf01      	itttt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	1949      	addeq	r1, r1, r5
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	e7ed      	b.n	8009f5e <_free_r+0x22>
 8009f82:	461a      	mov	r2, r3
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	b10b      	cbz	r3, 8009f8c <_free_r+0x50>
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d9fa      	bls.n	8009f82 <_free_r+0x46>
 8009f8c:	6811      	ldr	r1, [r2, #0]
 8009f8e:	1855      	adds	r5, r2, r1
 8009f90:	42a5      	cmp	r5, r4
 8009f92:	d10b      	bne.n	8009fac <_free_r+0x70>
 8009f94:	6824      	ldr	r4, [r4, #0]
 8009f96:	4421      	add	r1, r4
 8009f98:	1854      	adds	r4, r2, r1
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	d1e0      	bne.n	8009f62 <_free_r+0x26>
 8009fa0:	681c      	ldr	r4, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	6053      	str	r3, [r2, #4]
 8009fa6:	4421      	add	r1, r4
 8009fa8:	6011      	str	r1, [r2, #0]
 8009faa:	e7da      	b.n	8009f62 <_free_r+0x26>
 8009fac:	d902      	bls.n	8009fb4 <_free_r+0x78>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	6003      	str	r3, [r0, #0]
 8009fb2:	e7d6      	b.n	8009f62 <_free_r+0x26>
 8009fb4:	6825      	ldr	r5, [r4, #0]
 8009fb6:	1961      	adds	r1, r4, r5
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf04      	itt	eq
 8009fbc:	6819      	ldreq	r1, [r3, #0]
 8009fbe:	685b      	ldreq	r3, [r3, #4]
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	bf04      	itt	eq
 8009fc4:	1949      	addeq	r1, r1, r5
 8009fc6:	6021      	streq	r1, [r4, #0]
 8009fc8:	6054      	str	r4, [r2, #4]
 8009fca:	e7ca      	b.n	8009f62 <_free_r+0x26>
 8009fcc:	b003      	add	sp, #12
 8009fce:	bd30      	pop	{r4, r5, pc}
 8009fd0:	20005194 	.word	0x20005194

08009fd4 <_read_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d07      	ldr	r5, [pc, #28]	; (8009ff4 <_read_r+0x20>)
 8009fd8:	4604      	mov	r4, r0
 8009fda:	4608      	mov	r0, r1
 8009fdc:	4611      	mov	r1, r2
 8009fde:	2200      	movs	r2, #0
 8009fe0:	602a      	str	r2, [r5, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f7f7 fc62 	bl	80018ac <_read>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d102      	bne.n	8009ff2 <_read_r+0x1e>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	b103      	cbz	r3, 8009ff2 <_read_r+0x1e>
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	2000519c 	.word	0x2000519c

08009ff8 <_fstat_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	; (800a018 <_fstat_r+0x20>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	f7f7 fc96 	bl	8001936 <_fstat>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d102      	bne.n	800a014 <_fstat_r+0x1c>
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	b103      	cbz	r3, 800a014 <_fstat_r+0x1c>
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	bf00      	nop
 800a018:	2000519c 	.word	0x2000519c

0800a01c <_isatty_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d06      	ldr	r5, [pc, #24]	; (800a038 <_isatty_r+0x1c>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	f7f7 fc95 	bl	8001956 <_isatty>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_isatty_r+0x1a>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_isatty_r+0x1a>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	2000519c 	.word	0x2000519c

0800a03c <log10f>:
 800a03c:	b508      	push	{r3, lr}
 800a03e:	ed2d 8b02 	vpush	{d8}
 800a042:	eeb0 8a40 	vmov.f32	s16, s0
 800a046:	f000 f845 	bl	800a0d4 <__ieee754_log10f>
 800a04a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	d60f      	bvs.n	800a074 <log10f+0x38>
 800a054:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05c:	d80a      	bhi.n	800a074 <log10f+0x38>
 800a05e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a066:	d108      	bne.n	800a07a <log10f+0x3e>
 800a068:	f7ff f81a 	bl	80090a0 <__errno>
 800a06c:	2322      	movs	r3, #34	; 0x22
 800a06e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a090 <log10f+0x54>
 800a072:	6003      	str	r3, [r0, #0]
 800a074:	ecbd 8b02 	vpop	{d8}
 800a078:	bd08      	pop	{r3, pc}
 800a07a:	f7ff f811 	bl	80090a0 <__errno>
 800a07e:	ecbd 8b02 	vpop	{d8}
 800a082:	2321      	movs	r3, #33	; 0x21
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a08a:	4802      	ldr	r0, [pc, #8]	; (800a094 <log10f+0x58>)
 800a08c:	f000 b87e 	b.w	800a18c <nanf>
 800a090:	ff800000 	.word	0xff800000
 800a094:	0801dbd1 	.word	0x0801dbd1

0800a098 <sqrtf>:
 800a098:	b508      	push	{r3, lr}
 800a09a:	ed2d 8b02 	vpush	{d8}
 800a09e:	eeb0 8a40 	vmov.f32	s16, s0
 800a0a2:	f000 f86f 	bl	800a184 <__ieee754_sqrtf>
 800a0a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ae:	d60c      	bvs.n	800a0ca <sqrtf+0x32>
 800a0b0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a0d0 <sqrtf+0x38>
 800a0b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0bc:	d505      	bpl.n	800a0ca <sqrtf+0x32>
 800a0be:	f7fe ffef 	bl	80090a0 <__errno>
 800a0c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a0c6:	2321      	movs	r3, #33	; 0x21
 800a0c8:	6003      	str	r3, [r0, #0]
 800a0ca:	ecbd 8b02 	vpop	{d8}
 800a0ce:	bd08      	pop	{r3, pc}
 800a0d0:	00000000 	.word	0x00000000

0800a0d4 <__ieee754_log10f>:
 800a0d4:	b508      	push	{r3, lr}
 800a0d6:	ee10 2a10 	vmov	r2, s0
 800a0da:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a0de:	ed2d 8b02 	vpush	{d8}
 800a0e2:	d108      	bne.n	800a0f6 <__ieee754_log10f+0x22>
 800a0e4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a16c <__ieee754_log10f+0x98>
 800a0e8:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a170 <__ieee754_log10f+0x9c>
 800a0ec:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a0f0:	ecbd 8b02 	vpop	{d8}
 800a0f4:	bd08      	pop	{r3, pc}
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	da02      	bge.n	800a100 <__ieee754_log10f+0x2c>
 800a0fa:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a0fe:	e7f3      	b.n	800a0e8 <__ieee754_log10f+0x14>
 800a100:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a104:	db02      	blt.n	800a10c <__ieee754_log10f+0x38>
 800a106:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a10a:	e7f1      	b.n	800a0f0 <__ieee754_log10f+0x1c>
 800a10c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a110:	bfbf      	itttt	lt
 800a112:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800a174 <__ieee754_log10f+0xa0>
 800a116:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a11a:	f06f 0118 	mvnlt.w	r1, #24
 800a11e:	ee17 2a90 	vmovlt	r2, s15
 800a122:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a126:	bfa8      	it	ge
 800a128:	2100      	movge	r1, #0
 800a12a:	3b7f      	subs	r3, #127	; 0x7f
 800a12c:	440b      	add	r3, r1
 800a12e:	0fd9      	lsrs	r1, r3, #31
 800a130:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a13c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800a140:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a144:	ee00 3a10 	vmov	s0, r3
 800a148:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a14c:	f000 f824 	bl	800a198 <__ieee754_logf>
 800a150:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a178 <__ieee754_log10f+0xa4>
 800a154:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a158:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a17c <__ieee754_log10f+0xa8>
 800a15c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a160:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a180 <__ieee754_log10f+0xac>
 800a164:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a168:	e7c2      	b.n	800a0f0 <__ieee754_log10f+0x1c>
 800a16a:	bf00      	nop
 800a16c:	cc000000 	.word	0xcc000000
 800a170:	00000000 	.word	0x00000000
 800a174:	4c000000 	.word	0x4c000000
 800a178:	3ede5bd9 	.word	0x3ede5bd9
 800a17c:	355427db 	.word	0x355427db
 800a180:	3e9a2080 	.word	0x3e9a2080

0800a184 <__ieee754_sqrtf>:
 800a184:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a188:	4770      	bx	lr
	...

0800a18c <nanf>:
 800a18c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a194 <nanf+0x8>
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	7fc00000 	.word	0x7fc00000

0800a198 <__ieee754_logf>:
 800a198:	ee10 3a10 	vmov	r3, s0
 800a19c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a1a0:	d106      	bne.n	800a1b0 <__ieee754_logf+0x18>
 800a1a2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a338 <__ieee754_logf+0x1a0>
 800a1a6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a33c <__ieee754_logf+0x1a4>
 800a1aa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a1ae:	4770      	bx	lr
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da02      	bge.n	800a1ba <__ieee754_logf+0x22>
 800a1b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a1b8:	e7f5      	b.n	800a1a6 <__ieee754_logf+0xe>
 800a1ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1be:	db02      	blt.n	800a1c6 <__ieee754_logf+0x2e>
 800a1c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1c4:	4770      	bx	lr
 800a1c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1ca:	bfb8      	it	lt
 800a1cc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a340 <__ieee754_logf+0x1a8>
 800a1d0:	485c      	ldr	r0, [pc, #368]	; (800a344 <__ieee754_logf+0x1ac>)
 800a1d2:	bfbe      	ittt	lt
 800a1d4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a1d8:	f06f 0118 	mvnlt.w	r1, #24
 800a1dc:	ee17 3a90 	vmovlt	r3, s15
 800a1e0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800a1e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a1e8:	4418      	add	r0, r3
 800a1ea:	bfa8      	it	ge
 800a1ec:	2100      	movge	r1, #0
 800a1ee:	3a7f      	subs	r2, #127	; 0x7f
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800a1f6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800a1fa:	4319      	orrs	r1, r3
 800a1fc:	ee00 1a10 	vmov	s0, r1
 800a200:	4951      	ldr	r1, [pc, #324]	; (800a348 <__ieee754_logf+0x1b0>)
 800a202:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800a206:	f103 000f 	add.w	r0, r3, #15
 800a20a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a20e:	4001      	ands	r1, r0
 800a210:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a214:	bb89      	cbnz	r1, 800a27a <__ieee754_logf+0xe2>
 800a216:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21e:	d10f      	bne.n	800a240 <__ieee754_logf+0xa8>
 800a220:	2a00      	cmp	r2, #0
 800a222:	f000 8085 	beq.w	800a330 <__ieee754_logf+0x198>
 800a226:	ee07 2a90 	vmov	s15, r2
 800a22a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a34c <__ieee754_logf+0x1b4>
 800a22e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a350 <__ieee754_logf+0x1b8>
 800a232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a236:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a23a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a23e:	4770      	bx	lr
 800a240:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a354 <__ieee754_logf+0x1bc>
 800a244:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a248:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a24c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a250:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a254:	b912      	cbnz	r2, 800a25c <__ieee754_logf+0xc4>
 800a256:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a25a:	4770      	bx	lr
 800a25c:	ee07 2a90 	vmov	s15, r2
 800a260:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a34c <__ieee754_logf+0x1b4>
 800a264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a268:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a26c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a270:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a350 <__ieee754_logf+0x1b8>
 800a274:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a278:	4770      	bx	lr
 800a27a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a27e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a282:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a358 <__ieee754_logf+0x1c0>
 800a286:	eddf 4a35 	vldr	s9, [pc, #212]	; 800a35c <__ieee754_logf+0x1c4>
 800a28a:	4935      	ldr	r1, [pc, #212]	; (800a360 <__ieee754_logf+0x1c8>)
 800a28c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a290:	4419      	add	r1, r3
 800a292:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800a296:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a29a:	430b      	orrs	r3, r1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	ee07 2a90 	vmov	s15, r2
 800a2a2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a2a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a2aa:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a2ae:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a364 <__ieee754_logf+0x1cc>
 800a2b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a2b6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800a368 <__ieee754_logf+0x1d0>
 800a2ba:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a2be:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a36c <__ieee754_logf+0x1d4>
 800a2c2:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a2c6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800a370 <__ieee754_logf+0x1d8>
 800a2ca:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a2ce:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a374 <__ieee754_logf+0x1dc>
 800a2d2:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a2d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a2da:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a2de:	dd1c      	ble.n	800a31a <__ieee754_logf+0x182>
 800a2e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a2e4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a2e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a2ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a2f4:	b922      	cbnz	r2, 800a300 <__ieee754_logf+0x168>
 800a2f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a2fe:	4770      	bx	lr
 800a300:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800a34c <__ieee754_logf+0x1b4>
 800a304:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a30c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a310:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a350 <__ieee754_logf+0x1b8>
 800a314:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a318:	4770      	bx	lr
 800a31a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a31e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a322:	2a00      	cmp	r2, #0
 800a324:	d0e9      	beq.n	800a2fa <__ieee754_logf+0x162>
 800a326:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a34c <__ieee754_logf+0x1b4>
 800a32a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a32e:	e7ed      	b.n	800a30c <__ieee754_logf+0x174>
 800a330:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a33c <__ieee754_logf+0x1a4>
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	cc000000 	.word	0xcc000000
 800a33c:	00000000 	.word	0x00000000
 800a340:	4c000000 	.word	0x4c000000
 800a344:	004afb20 	.word	0x004afb20
 800a348:	007ffff0 	.word	0x007ffff0
 800a34c:	3717f7d1 	.word	0x3717f7d1
 800a350:	3f317180 	.word	0x3f317180
 800a354:	3eaaaaab 	.word	0x3eaaaaab
 800a358:	3e1cd04f 	.word	0x3e1cd04f
 800a35c:	3e178897 	.word	0x3e178897
 800a360:	ffcf5c30 	.word	0xffcf5c30
 800a364:	3e638e29 	.word	0x3e638e29
 800a368:	3ecccccd 	.word	0x3ecccccd
 800a36c:	3e3a3325 	.word	0x3e3a3325
 800a370:	3e924925 	.word	0x3e924925
 800a374:	3f2aaaab 	.word	0x3f2aaaab

0800a378 <_init>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	bf00      	nop
 800a37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37e:	bc08      	pop	{r3}
 800a380:	469e      	mov	lr, r3
 800a382:	4770      	bx	lr

0800a384 <_fini>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr
